
farmerRobot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000114  00800200  000038aa  0000393e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000038aa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002e  00800314  00800314  00003a52  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00003a52  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000004f5  00000000  00000000  00003a72  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000dbf  00000000  00000000  00003f67  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001d0  00000000  00000000  00004d26  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000013cf  00000000  00000000  00004ef6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002f0  00000000  00000000  000062c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000552  00000000  00000000  000065b8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b3 00 	jmp	0x166	; 0x166 <__ctors_end>
       4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
       8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
       c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      10:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      14:	0c 94 20 0f 	jmp	0x1e40	; 0x1e40 <__vector_5>
      18:	0c 94 52 0f 	jmp	0x1ea4	; 0x1ea4 <__vector_6>
      1c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      20:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      24:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      28:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      2c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      30:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      34:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      38:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      3c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      40:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      44:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      48:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      4c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      50:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      54:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      58:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      5c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      60:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      64:	0c 94 84 0f 	jmp	0x1f08	; 0x1f08 <__vector_25>
      68:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      6c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      70:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      74:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      78:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      7c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      80:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      84:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      88:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      8c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      90:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      94:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      98:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      9c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      a0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      a4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      a8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      ac:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      b0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      b4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      b8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      bc:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      c0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      c4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      c8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      cc:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      d0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      d4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      d8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      dc:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      e0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      e4:	07 63       	ori	r16, 0x37	; 55
      e6:	42 36       	cpi	r20, 0x62	; 98
      e8:	b7 9b       	sbis	0x16, 7	; 22
      ea:	d8 a7       	std	Y+40, r29	; 0x28
      ec:	1a 39       	cpi	r17, 0x9A	; 154
      ee:	68 56       	subi	r22, 0x68	; 104
      f0:	18 ae       	std	Y+56, r1	; 0x38
      f2:	ba ab       	std	Y+50, r27	; 0x32
      f4:	55 8c       	ldd	r5, Z+29	; 0x1d
      f6:	1d 3c       	cpi	r17, 0xCD	; 205
      f8:	b7 cc       	rjmp	.-1682   	; 0xfffffa68 <__eeprom_end+0xff7efa68>
      fa:	57 63       	ori	r21, 0x37	; 55
      fc:	bd 6d       	ori	r27, 0xDD	; 221
      fe:	ed fd       	.word	0xfded	; ????
     100:	75 3e       	cpi	r23, 0xE5	; 229
     102:	f6 17       	cp	r31, r22
     104:	72 31       	cpi	r23, 0x12	; 18
     106:	bf 00       	.word	0x00bf	; ????
     108:	00 00       	nop
     10a:	80 3f       	cpi	r24, 0xF0	; 240
     10c:	08 00       	.word	0x0008	; ????
     10e:	00 00       	nop
     110:	be 92       	st	-X, r11
     112:	24 49       	sbci	r18, 0x94	; 148
     114:	12 3e       	cpi	r17, 0xE2	; 226
     116:	ab aa       	std	Y+51, r10	; 0x33
     118:	aa 2a       	or	r10, r26
     11a:	be cd       	rjmp	.-1156   	; 0xfffffc98 <__eeprom_end+0xff7efc98>
     11c:	cc cc       	rjmp	.-1640   	; 0xfffffab6 <__eeprom_end+0xff7efab6>
     11e:	4c 3e       	cpi	r20, 0xEC	; 236
     120:	00 00       	nop
     122:	00 80       	ld	r0, Z
     124:	be ab       	std	Y+54, r27	; 0x36
     126:	aa aa       	std	Y+50, r10	; 0x32
     128:	aa 3e       	cpi	r26, 0xEA	; 234
     12a:	00 00       	nop
     12c:	00 00       	nop
     12e:	bf 00       	.word	0x00bf	; ????
     130:	00 00       	nop
     132:	80 3f       	cpi	r24, 0xF0	; 240
     134:	00 00       	nop
     136:	00 00       	nop
     138:	00 08       	sbc	r0, r0
     13a:	41 78       	andi	r20, 0x81	; 129
     13c:	d3 bb       	out	0x13, r29	; 19
     13e:	43 87       	std	Z+11, r20	; 0x0b
     140:	d1 13       	cpse	r29, r17
     142:	3d 19       	sub	r19, r13
     144:	0e 3c       	cpi	r16, 0xCE	; 206
     146:	c3 bd       	out	0x23, r28	; 35
     148:	42 82       	std	Z+2, r4	; 0x02
     14a:	ad 2b       	or	r26, r29
     14c:	3e 68       	ori	r19, 0x8E	; 142
     14e:	ec 82       	std	Y+4, r14	; 0x04
     150:	76 be       	out	0x36, r7	; 54
     152:	d9 8f       	std	Y+25, r29	; 0x19
     154:	e1 a9       	ldd	r30, Z+49	; 0x31
     156:	3e 4c       	sbci	r19, 0xCE	; 206
     158:	80 ef       	ldi	r24, 0xF0	; 240
     15a:	ff be       	out	0x3f, r15	; 63
     15c:	01 c4       	rjmp	.+2050   	; 0x960 <lcd_set_4bit+0x2f8>
     15e:	ff 7f       	andi	r31, 0xFF	; 255
     160:	3f 00       	.word	0x003f	; ????
     162:	00 00       	nop
	...

00000166 <__ctors_end>:
     166:	11 24       	eor	r1, r1
     168:	1f be       	out	0x3f, r1	; 63
     16a:	cf ef       	ldi	r28, 0xFF	; 255
     16c:	d1 e2       	ldi	r29, 0x21	; 33
     16e:	de bf       	out	0x3e, r29	; 62
     170:	cd bf       	out	0x3d, r28	; 61
     172:	00 e0       	ldi	r16, 0x00	; 0
     174:	0c bf       	out	0x3c, r16	; 60

00000176 <__do_copy_data>:
     176:	13 e0       	ldi	r17, 0x03	; 3
     178:	a0 e0       	ldi	r26, 0x00	; 0
     17a:	b2 e0       	ldi	r27, 0x02	; 2
     17c:	ea ea       	ldi	r30, 0xAA	; 170
     17e:	f8 e3       	ldi	r31, 0x38	; 56
     180:	00 e0       	ldi	r16, 0x00	; 0
     182:	0b bf       	out	0x3b, r16	; 59
     184:	02 c0       	rjmp	.+4      	; 0x18a <__do_copy_data+0x14>
     186:	07 90       	elpm	r0, Z+
     188:	0d 92       	st	X+, r0
     18a:	a4 31       	cpi	r26, 0x14	; 20
     18c:	b1 07       	cpc	r27, r17
     18e:	d9 f7       	brne	.-10     	; 0x186 <__do_copy_data+0x10>

00000190 <__do_clear_bss>:
     190:	13 e0       	ldi	r17, 0x03	; 3
     192:	a4 e1       	ldi	r26, 0x14	; 20
     194:	b3 e0       	ldi	r27, 0x03	; 3
     196:	01 c0       	rjmp	.+2      	; 0x19a <.do_clear_bss_start>

00000198 <.do_clear_bss_loop>:
     198:	1d 92       	st	X+, r1

0000019a <.do_clear_bss_start>:
     19a:	a2 34       	cpi	r26, 0x42	; 66
     19c:	b1 07       	cpc	r27, r17
     19e:	e1 f7       	brne	.-8      	; 0x198 <.do_clear_bss_loop>
     1a0:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <main>
     1a4:	0c 94 53 1c 	jmp	0x38a6	; 0x38a6 <_exit>

000001a8 <__bad_interrupt>:
     1a8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001ac <motion_pin_config>:

// motion functions


void motion_pin_config (void)
{
     1ac:	df 93       	push	r29
     1ae:	cf 93       	push	r28
     1b0:	cd b7       	in	r28, 0x3d	; 61
     1b2:	de b7       	in	r29, 0x3e	; 62
 DDRA = DDRA | 0x0F;
     1b4:	a1 e2       	ldi	r26, 0x21	; 33
     1b6:	b0 e0       	ldi	r27, 0x00	; 0
     1b8:	e1 e2       	ldi	r30, 0x21	; 33
     1ba:	f0 e0       	ldi	r31, 0x00	; 0
     1bc:	80 81       	ld	r24, Z
     1be:	8f 60       	ori	r24, 0x0F	; 15
     1c0:	8c 93       	st	X, r24
 PORTA = PORTA & 0xF0;
     1c2:	a2 e2       	ldi	r26, 0x22	; 34
     1c4:	b0 e0       	ldi	r27, 0x00	; 0
     1c6:	e2 e2       	ldi	r30, 0x22	; 34
     1c8:	f0 e0       	ldi	r31, 0x00	; 0
     1ca:	80 81       	ld	r24, Z
     1cc:	80 7f       	andi	r24, 0xF0	; 240
     1ce:	8c 93       	st	X, r24
 DDRL = DDRL | 0x18;   //Setting PL3 and PL4 pins as output for PWM generation
     1d0:	aa e0       	ldi	r26, 0x0A	; 10
     1d2:	b1 e0       	ldi	r27, 0x01	; 1
     1d4:	ea e0       	ldi	r30, 0x0A	; 10
     1d6:	f1 e0       	ldi	r31, 0x01	; 1
     1d8:	80 81       	ld	r24, Z
     1da:	88 61       	ori	r24, 0x18	; 24
     1dc:	8c 93       	st	X, r24
 PORTL = PORTL | 0x18; //PL3 and PL4 pins are for velocity control using PWM.
     1de:	ab e0       	ldi	r26, 0x0B	; 11
     1e0:	b1 e0       	ldi	r27, 0x01	; 1
     1e2:	eb e0       	ldi	r30, 0x0B	; 11
     1e4:	f1 e0       	ldi	r31, 0x01	; 1
     1e6:	80 81       	ld	r24, Z
     1e8:	88 61       	ori	r24, 0x18	; 24
     1ea:	8c 93       	st	X, r24
}
     1ec:	cf 91       	pop	r28
     1ee:	df 91       	pop	r29
     1f0:	08 95       	ret

000001f2 <motion_set>:



//Function used for setting motor's direction
void motion_set (unsigned char Direction)
{
     1f2:	df 93       	push	r29
     1f4:	cf 93       	push	r28
     1f6:	0f 92       	push	r0
     1f8:	0f 92       	push	r0
     1fa:	cd b7       	in	r28, 0x3d	; 61
     1fc:	de b7       	in	r29, 0x3e	; 62
     1fe:	8a 83       	std	Y+2, r24	; 0x02
 unsigned char PortARestore = 0;
     200:	19 82       	std	Y+1, r1	; 0x01

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
     202:	8a 81       	ldd	r24, Y+2	; 0x02
     204:	8f 70       	andi	r24, 0x0F	; 15
     206:	8a 83       	std	Y+2, r24	; 0x02
 PortARestore = PORTA; 			// reading the PORTA's original status
     208:	e2 e2       	ldi	r30, 0x22	; 34
     20a:	f0 e0       	ldi	r31, 0x00	; 0
     20c:	80 81       	ld	r24, Z
     20e:	89 83       	std	Y+1, r24	; 0x01
 PortARestore &= 0xF0; 			// setting lower direction nibbel to 0
     210:	89 81       	ldd	r24, Y+1	; 0x01
     212:	80 7f       	andi	r24, 0xF0	; 240
     214:	89 83       	std	Y+1, r24	; 0x01
 PortARestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTA status
     216:	99 81       	ldd	r25, Y+1	; 0x01
     218:	8a 81       	ldd	r24, Y+2	; 0x02
     21a:	89 2b       	or	r24, r25
     21c:	89 83       	std	Y+1, r24	; 0x01
 PORTA = PortARestore; 			// setting the command to the port
     21e:	e2 e2       	ldi	r30, 0x22	; 34
     220:	f0 e0       	ldi	r31, 0x00	; 0
     222:	89 81       	ldd	r24, Y+1	; 0x01
     224:	80 83       	st	Z, r24

}
     226:	0f 90       	pop	r0
     228:	0f 90       	pop	r0
     22a:	cf 91       	pop	r28
     22c:	df 91       	pop	r29
     22e:	08 95       	ret

00000230 <MOVE_FWD>:
#define MOVE_INPLACE_RIGHT inplace_right()
#define MOVE_INPLACE_LEFT inplace_left()*/


void MOVE_FWD(void) //both wheels forward
{
     230:	df 93       	push	r29
     232:	cf 93       	push	r28
     234:	cd b7       	in	r28, 0x3d	; 61
     236:	de b7       	in	r29, 0x3e	; 62
  motion_set(0x06);
     238:	86 e0       	ldi	r24, 0x06	; 6
     23a:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <motion_set>
}
     23e:	cf 91       	pop	r28
     240:	df 91       	pop	r29
     242:	08 95       	ret

00000244 <MOVE_REV>:

void MOVE_REV(void) //both wheels backward
{
     244:	df 93       	push	r29
     246:	cf 93       	push	r28
     248:	cd b7       	in	r28, 0x3d	; 61
     24a:	de b7       	in	r29, 0x3e	; 62
  motion_set(0x09);
     24c:	89 e0       	ldi	r24, 0x09	; 9
     24e:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <motion_set>
}
     252:	cf 91       	pop	r28
     254:	df 91       	pop	r29
     256:	08 95       	ret

00000258 <MOVE_LEFT>:

void MOVE_LEFT(void) //Left wheel backward, Right wheel forward
{
     258:	df 93       	push	r29
     25a:	cf 93       	push	r28
     25c:	cd b7       	in	r28, 0x3d	; 61
     25e:	de b7       	in	r29, 0x3e	; 62
  motion_set(0x05);
     260:	85 e0       	ldi	r24, 0x05	; 5
     262:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <motion_set>
}
     266:	cf 91       	pop	r28
     268:	df 91       	pop	r29
     26a:	08 95       	ret

0000026c <MOVE_RIGHT>:

void MOVE_RIGHT(void) //Left wheel forward, Right wheel backward
{
     26c:	df 93       	push	r29
     26e:	cf 93       	push	r28
     270:	cd b7       	in	r28, 0x3d	; 61
     272:	de b7       	in	r29, 0x3e	; 62
  motion_set(0x0A);
     274:	8a e0       	ldi	r24, 0x0A	; 10
     276:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <motion_set>
}
     27a:	cf 91       	pop	r28
     27c:	df 91       	pop	r29
     27e:	08 95       	ret

00000280 <MOVE_SOFT_LEFT>:

void MOVE_SOFT_LEFT (void) //Left wheel stationary, Right wheel forward
{
     280:	df 93       	push	r29
     282:	cf 93       	push	r28
     284:	cd b7       	in	r28, 0x3d	; 61
     286:	de b7       	in	r29, 0x3e	; 62
 motion_set(0x04);
     288:	84 e0       	ldi	r24, 0x04	; 4
     28a:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <motion_set>
}
     28e:	cf 91       	pop	r28
     290:	df 91       	pop	r29
     292:	08 95       	ret

00000294 <MOVE_SOFT_RIGHT>:

void MOVE_SOFT_RIGHT (void) //Left wheel forward, Right wheel is stationary
{
     294:	df 93       	push	r29
     296:	cf 93       	push	r28
     298:	cd b7       	in	r28, 0x3d	; 61
     29a:	de b7       	in	r29, 0x3e	; 62
 motion_set(0x02);
     29c:	82 e0       	ldi	r24, 0x02	; 2
     29e:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <motion_set>
}
     2a2:	cf 91       	pop	r28
     2a4:	df 91       	pop	r29
     2a6:	08 95       	ret

000002a8 <MOVE_INPLACE_LEFT>:

void MOVE_INPLACE_LEFT(void) //Left wheel backward, right wheel stationary
{
     2a8:	df 93       	push	r29
     2aa:	cf 93       	push	r28
     2ac:	cd b7       	in	r28, 0x3d	; 61
     2ae:	de b7       	in	r29, 0x3e	; 62
 motion_set(0x01);
     2b0:	81 e0       	ldi	r24, 0x01	; 1
     2b2:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <motion_set>
}
     2b6:	cf 91       	pop	r28
     2b8:	df 91       	pop	r29
     2ba:	08 95       	ret

000002bc <MOVE_INPLACE_RIGHT>:

void MOVE_INPLACE_RIGHT (void) //Left wheel stationary, Right wheel backward
{
     2bc:	df 93       	push	r29
     2be:	cf 93       	push	r28
     2c0:	cd b7       	in	r28, 0x3d	; 61
     2c2:	de b7       	in	r29, 0x3e	; 62
 motion_set(0x08);
     2c4:	88 e0       	ldi	r24, 0x08	; 8
     2c6:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <motion_set>
}
     2ca:	cf 91       	pop	r28
     2cc:	df 91       	pop	r29
     2ce:	08 95       	ret

000002d0 <STOP>:

void STOP (void)
{
     2d0:	df 93       	push	r29
     2d2:	cf 93       	push	r28
     2d4:	cd b7       	in	r28, 0x3d	; 61
     2d6:	de b7       	in	r29, 0x3e	; 62
  motion_set(0x00);
     2d8:	80 e0       	ldi	r24, 0x00	; 0
     2da:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <motion_set>
}
     2de:	cf 91       	pop	r28
     2e0:	df 91       	pop	r29
     2e2:	08 95       	ret

000002e4 <timer5_init>:
// Timer 5 initialised in PWM mode for velocity control
// Prescale:64
// PWM 8bit fast, TOP=0x00FF
// Timer Frequency:674.988Hz
void timer5_init()
{
     2e4:	df 93       	push	r29
     2e6:	cf 93       	push	r28
     2e8:	cd b7       	in	r28, 0x3d	; 61
     2ea:	de b7       	in	r29, 0x3e	; 62
	TCCR5B = 0x00;	//Stop
     2ec:	e1 e2       	ldi	r30, 0x21	; 33
     2ee:	f1 e0       	ldi	r31, 0x01	; 1
     2f0:	10 82       	st	Z, r1
	TCNT5H = 0xFF;	//Counter higher 8-bit value to which OCR5xH value is compared with
     2f2:	e5 e2       	ldi	r30, 0x25	; 37
     2f4:	f1 e0       	ldi	r31, 0x01	; 1
     2f6:	8f ef       	ldi	r24, 0xFF	; 255
     2f8:	80 83       	st	Z, r24
	TCNT5L = 0x01;	//Counter lower 8-bit value to which OCR5xH value is compared with
     2fa:	e4 e2       	ldi	r30, 0x24	; 36
     2fc:	f1 e0       	ldi	r31, 0x01	; 1
     2fe:	81 e0       	ldi	r24, 0x01	; 1
     300:	80 83       	st	Z, r24
	OCR5AH = 0x00;	//Output compare register high value for Left Motor
     302:	e9 e2       	ldi	r30, 0x29	; 41
     304:	f1 e0       	ldi	r31, 0x01	; 1
     306:	10 82       	st	Z, r1
	OCR5AL = 0xFF;	//Output compare register low value for Left Motor
     308:	e8 e2       	ldi	r30, 0x28	; 40
     30a:	f1 e0       	ldi	r31, 0x01	; 1
     30c:	8f ef       	ldi	r24, 0xFF	; 255
     30e:	80 83       	st	Z, r24
	OCR5BH = 0x00;	//Output compare register high value for Right Motor
     310:	eb e2       	ldi	r30, 0x2B	; 43
     312:	f1 e0       	ldi	r31, 0x01	; 1
     314:	10 82       	st	Z, r1
	OCR5BL = 0xFF;	//Output compare register low value for Right Motor
     316:	ea e2       	ldi	r30, 0x2A	; 42
     318:	f1 e0       	ldi	r31, 0x01	; 1
     31a:	8f ef       	ldi	r24, 0xFF	; 255
     31c:	80 83       	st	Z, r24
	OCR5CH = 0x00;	//Output compare register high value for Motor C1
     31e:	ed e2       	ldi	r30, 0x2D	; 45
     320:	f1 e0       	ldi	r31, 0x01	; 1
     322:	10 82       	st	Z, r1
	OCR5CL = 0xFF;	//Output compare register low value for Motor C1
     324:	ec e2       	ldi	r30, 0x2C	; 44
     326:	f1 e0       	ldi	r31, 0x01	; 1
     328:	8f ef       	ldi	r24, 0xFF	; 255
     32a:	80 83       	st	Z, r24
	TCCR5A = 0xA9;	/*{COM5A1=1, COM5A0=0; COM5B1=1, COM5B0=0; COM5C1=1 COM5C0=0}
     32c:	e0 e2       	ldi	r30, 0x20	; 32
     32e:	f1 e0       	ldi	r31, 0x01	; 1
     330:	89 ea       	ldi	r24, 0xA9	; 169
     332:	80 83       	st	Z, r24
 					  For Overriding normal port functionalit to OCRnA outputs.
				  	  {WGM51=0, WGM50=1} Along With WGM52 in TCCR5B for Selecting FAST PWM 8-bit Mode*/
	
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
     334:	e1 e2       	ldi	r30, 0x21	; 33
     336:	f1 e0       	ldi	r31, 0x01	; 1
     338:	8b e0       	ldi	r24, 0x0B	; 11
     33a:	80 83       	st	Z, r24
}
     33c:	cf 91       	pop	r28
     33e:	df 91       	pop	r29
     340:	08 95       	ret

00000342 <velocity>:
// Function for robot velocity control
// Make sure that you pass only unsigned char value.


void velocity (unsigned char left_motor, unsigned char right_motor)
{
     342:	df 93       	push	r29
     344:	cf 93       	push	r28
     346:	0f 92       	push	r0
     348:	0f 92       	push	r0
     34a:	cd b7       	in	r28, 0x3d	; 61
     34c:	de b7       	in	r29, 0x3e	; 62
     34e:	89 83       	std	Y+1, r24	; 0x01
     350:	6a 83       	std	Y+2, r22	; 0x02
	OCR5AL = (unsigned char)left_motor;
     352:	e8 e2       	ldi	r30, 0x28	; 40
     354:	f1 e0       	ldi	r31, 0x01	; 1
     356:	89 81       	ldd	r24, Y+1	; 0x01
     358:	80 83       	st	Z, r24
	OCR5BL = (unsigned char)right_motor;
     35a:	ea e2       	ldi	r30, 0x2A	; 42
     35c:	f1 e0       	ldi	r31, 0x01	; 1
     35e:	8a 81       	ldd	r24, Y+2	; 0x02
     360:	80 83       	st	Z, r24
}
     362:	0f 90       	pop	r0
     364:	0f 90       	pop	r0
     366:	cf 91       	pop	r28
     368:	df 91       	pop	r29
     36a:	08 95       	ret

0000036c <MOTOR_LEFT_SPEED>:


void MOTOR_LEFT_SPEED(int val)
{
     36c:	df 93       	push	r29
     36e:	cf 93       	push	r28
     370:	0f 92       	push	r0
     372:	0f 92       	push	r0
     374:	cd b7       	in	r28, 0x3d	; 61
     376:	de b7       	in	r29, 0x3e	; 62
     378:	9a 83       	std	Y+2, r25	; 0x02
     37a:	89 83       	std	Y+1, r24	; 0x01
    if ( val > 254 )   //limiting the max velocity
     37c:	89 81       	ldd	r24, Y+1	; 0x01
     37e:	9a 81       	ldd	r25, Y+2	; 0x02
     380:	8f 3f       	cpi	r24, 0xFF	; 255
     382:	91 05       	cpc	r25, r1
     384:	24 f0       	brlt	.+8      	; 0x38e <MOTOR_LEFT_SPEED+0x22>
	   val = 255;	
     386:	8f ef       	ldi	r24, 0xFF	; 255
     388:	90 e0       	ldi	r25, 0x00	; 0
     38a:	9a 83       	std	Y+2, r25	; 0x02
     38c:	89 83       	std	Y+1, r24	; 0x01
    OCR5AL = (unsigned char) val;
     38e:	e8 e2       	ldi	r30, 0x28	; 40
     390:	f1 e0       	ldi	r31, 0x01	; 1
     392:	89 81       	ldd	r24, Y+1	; 0x01
     394:	80 83       	st	Z, r24
}
     396:	0f 90       	pop	r0
     398:	0f 90       	pop	r0
     39a:	cf 91       	pop	r28
     39c:	df 91       	pop	r29
     39e:	08 95       	ret

000003a0 <MOTOR_RIGHT_SPEED>:

void MOTOR_RIGHT_SPEED(int val)
{
     3a0:	df 93       	push	r29
     3a2:	cf 93       	push	r28
     3a4:	0f 92       	push	r0
     3a6:	0f 92       	push	r0
     3a8:	cd b7       	in	r28, 0x3d	; 61
     3aa:	de b7       	in	r29, 0x3e	; 62
     3ac:	9a 83       	std	Y+2, r25	; 0x02
     3ae:	89 83       	std	Y+1, r24	; 0x01
  if ( val > 254 )     //limiting the max velocity
     3b0:	89 81       	ldd	r24, Y+1	; 0x01
     3b2:	9a 81       	ldd	r25, Y+2	; 0x02
     3b4:	8f 3f       	cpi	r24, 0xFF	; 255
     3b6:	91 05       	cpc	r25, r1
     3b8:	24 f0       	brlt	.+8      	; 0x3c2 <MOTOR_RIGHT_SPEED+0x22>
	  val = 255;
     3ba:	8f ef       	ldi	r24, 0xFF	; 255
     3bc:	90 e0       	ldi	r25, 0x00	; 0
     3be:	9a 83       	std	Y+2, r25	; 0x02
     3c0:	89 83       	std	Y+1, r24	; 0x01
  OCR5BL = (unsigned char) val;
     3c2:	ea e2       	ldi	r30, 0x2A	; 42
     3c4:	f1 e0       	ldi	r31, 0x01	; 1
     3c6:	89 81       	ldd	r24, Y+1	; 0x01
     3c8:	80 83       	st	Z, r24
}
     3ca:	0f 90       	pop	r0
     3cc:	0f 90       	pop	r0
     3ce:	cf 91       	pop	r28
     3d0:	df 91       	pop	r29
     3d2:	08 95       	ret

000003d4 <adc_pin_config>:



//ADC pin configuration
void adc_pin_config (void)
{
     3d4:	df 93       	push	r29
     3d6:	cf 93       	push	r28
     3d8:	cd b7       	in	r28, 0x3d	; 61
     3da:	de b7       	in	r29, 0x3e	; 62
 DDRF = 0x00; 
     3dc:	e0 e3       	ldi	r30, 0x30	; 48
     3de:	f0 e0       	ldi	r31, 0x00	; 0
     3e0:	10 82       	st	Z, r1
 PORTF = 0x00;
     3e2:	e1 e3       	ldi	r30, 0x31	; 49
     3e4:	f0 e0       	ldi	r31, 0x00	; 0
     3e6:	10 82       	st	Z, r1
 DDRK = 0x00;
     3e8:	e7 e0       	ldi	r30, 0x07	; 7
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	10 82       	st	Z, r1
 PORTK = 0x00;
     3ee:	e8 e0       	ldi	r30, 0x08	; 8
     3f0:	f1 e0       	ldi	r31, 0x01	; 1
     3f2:	10 82       	st	Z, r1
}
     3f4:	cf 91       	pop	r28
     3f6:	df 91       	pop	r29
     3f8:	08 95       	ret

000003fa <port_init>:



//Function to Initialize PORTS
void port_init()
{
     3fa:	df 93       	push	r29
     3fc:	cf 93       	push	r28
     3fe:	cd b7       	in	r28, 0x3d	; 61
     400:	de b7       	in	r29, 0x3e	; 62
	
	adc_pin_config();
     402:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <adc_pin_config>
		
}
     406:	cf 91       	pop	r28
     408:	df 91       	pop	r29
     40a:	08 95       	ret

0000040c <init_adc>:




void init_adc()
{
     40c:	df 93       	push	r29
     40e:	cf 93       	push	r28
     410:	cd b7       	in	r28, 0x3d	; 61
     412:	de b7       	in	r29, 0x3e	; 62
	ADCSRA = 0x00;
     414:	ea e7       	ldi	r30, 0x7A	; 122
     416:	f0 e0       	ldi	r31, 0x00	; 0
     418:	10 82       	st	Z, r1
	ADCSRB = 0x00;		//MUX5 = 0
     41a:	eb e7       	ldi	r30, 0x7B	; 123
     41c:	f0 e0       	ldi	r31, 0x00	; 0
     41e:	10 82       	st	Z, r1
	ADMUX = 0x20;		//Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
     420:	ec e7       	ldi	r30, 0x7C	; 124
     422:	f0 e0       	ldi	r31, 0x00	; 0
     424:	80 e2       	ldi	r24, 0x20	; 32
     426:	80 83       	st	Z, r24
	ACSR = 0x80;
     428:	e0 e5       	ldi	r30, 0x50	; 80
     42a:	f0 e0       	ldi	r31, 0x00	; 0
     42c:	80 e8       	ldi	r24, 0x80	; 128
     42e:	80 83       	st	Z, r24
	ADCSRA = 0x86;		//ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0
     430:	ea e7       	ldi	r30, 0x7A	; 122
     432:	f0 e0       	ldi	r31, 0x00	; 0
     434:	86 e8       	ldi	r24, 0x86	; 134
     436:	80 83       	st	Z, r24
}
     438:	cf 91       	pop	r28
     43a:	df 91       	pop	r29
     43c:	08 95       	ret

0000043e <ADC_Conversion>:

//Function For ADC Conversion
unsigned char ADC_Conversion(unsigned char Ch) 
{
     43e:	df 93       	push	r29
     440:	cf 93       	push	r28
     442:	0f 92       	push	r0
     444:	0f 92       	push	r0
     446:	cd b7       	in	r28, 0x3d	; 61
     448:	de b7       	in	r29, 0x3e	; 62
     44a:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char a;
	if(Ch>7)
     44c:	8a 81       	ldd	r24, Y+2	; 0x02
     44e:	88 30       	cpi	r24, 0x08	; 8
     450:	20 f0       	brcs	.+8      	; 0x45a <ADC_Conversion+0x1c>
	{
		ADCSRB = 0x08;
     452:	eb e7       	ldi	r30, 0x7B	; 123
     454:	f0 e0       	ldi	r31, 0x00	; 0
     456:	88 e0       	ldi	r24, 0x08	; 8
     458:	80 83       	st	Z, r24
	}
	Ch = Ch & 0x07;  			
     45a:	8a 81       	ldd	r24, Y+2	; 0x02
     45c:	87 70       	andi	r24, 0x07	; 7
     45e:	8a 83       	std	Y+2, r24	; 0x02
	ADMUX= 0x20| Ch;	   		
     460:	ec e7       	ldi	r30, 0x7C	; 124
     462:	f0 e0       	ldi	r31, 0x00	; 0
     464:	8a 81       	ldd	r24, Y+2	; 0x02
     466:	80 62       	ori	r24, 0x20	; 32
     468:	80 83       	st	Z, r24
	ADCSRA = ADCSRA | 0x40;		//Set start conversion bit
     46a:	aa e7       	ldi	r26, 0x7A	; 122
     46c:	b0 e0       	ldi	r27, 0x00	; 0
     46e:	ea e7       	ldi	r30, 0x7A	; 122
     470:	f0 e0       	ldi	r31, 0x00	; 0
     472:	80 81       	ld	r24, Z
     474:	80 64       	ori	r24, 0x40	; 64
     476:	8c 93       	st	X, r24
	while((ADCSRA&0x10)==0);	//Wait for conversion to complete
     478:	ea e7       	ldi	r30, 0x7A	; 122
     47a:	f0 e0       	ldi	r31, 0x00	; 0
     47c:	80 81       	ld	r24, Z
     47e:	88 2f       	mov	r24, r24
     480:	90 e0       	ldi	r25, 0x00	; 0
     482:	80 71       	andi	r24, 0x10	; 16
     484:	90 70       	andi	r25, 0x00	; 0
     486:	00 97       	sbiw	r24, 0x00	; 0
     488:	b9 f3       	breq	.-18     	; 0x478 <ADC_Conversion+0x3a>
	a=ADCH;
     48a:	e9 e7       	ldi	r30, 0x79	; 121
     48c:	f0 e0       	ldi	r31, 0x00	; 0
     48e:	80 81       	ld	r24, Z
     490:	89 83       	std	Y+1, r24	; 0x01
	ADCSRA = ADCSRA|0x10;
     492:	aa e7       	ldi	r26, 0x7A	; 122
     494:	b0 e0       	ldi	r27, 0x00	; 0
     496:	ea e7       	ldi	r30, 0x7A	; 122
     498:	f0 e0       	ldi	r31, 0x00	; 0
     49a:	80 81       	ld	r24, Z
     49c:	80 61       	ori	r24, 0x10	; 16
     49e:	8c 93       	st	X, r24
	ADCSRB = 0x00;
     4a0:	eb e7       	ldi	r30, 0x7B	; 123
     4a2:	f0 e0       	ldi	r31, 0x00	; 0
     4a4:	10 82       	st	Z, r1
	return a;
     4a6:	89 81       	ldd	r24, Y+1	; 0x01
}
     4a8:	0f 90       	pop	r0
     4aa:	0f 90       	pop	r0
     4ac:	cf 91       	pop	r28
     4ae:	df 91       	pop	r29
     4b0:	08 95       	ret

000004b2 <init_ir>:
 analog value of Sharp Sensor. 
 ***********************************************************************************/

/***** Function to Initialize PORTS *****/
void init_ir()
{
     4b2:	df 93       	push	r29
     4b4:	cf 93       	push	r28
     4b6:	cd b7       	in	r28, 0x3d	; 61
     4b8:	de b7       	in	r29, 0x3e	; 62
	DDRF = 0x00; 
     4ba:	e0 e3       	ldi	r30, 0x30	; 48
     4bc:	f0 e0       	ldi	r31, 0x00	; 0
     4be:	10 82       	st	Z, r1
	PORTF = 0x00;
     4c0:	e1 e3       	ldi	r30, 0x31	; 49
     4c2:	f0 e0       	ldi	r31, 0x00	; 0
     4c4:	10 82       	st	Z, r1
	DDRA = 0x0F;
     4c6:	e1 e2       	ldi	r30, 0x21	; 33
     4c8:	f0 e0       	ldi	r31, 0x00	; 0
     4ca:	8f e0       	ldi	r24, 0x0F	; 15
     4cc:	80 83       	st	Z, r24
	PORTA = 0x00;
     4ce:	e2 e2       	ldi	r30, 0x22	; 34
     4d0:	f0 e0       	ldi	r31, 0x00	; 0
     4d2:	10 82       	st	Z, r1
	DDRL = 0x18;
     4d4:	ea e0       	ldi	r30, 0x0A	; 10
     4d6:	f1 e0       	ldi	r31, 0x01	; 1
     4d8:	88 e1       	ldi	r24, 0x18	; 24
     4da:	80 83       	st	Z, r24
	PORTL = 0x18;
     4dc:	eb e0       	ldi	r30, 0x0B	; 11
     4de:	f1 e0       	ldi	r31, 0x01	; 1
     4e0:	88 e1       	ldi	r24, 0x18	; 24
     4e2:	80 83       	st	Z, r24
	DDRC = 0xFF;
     4e4:	e7 e2       	ldi	r30, 0x27	; 39
     4e6:	f0 e0       	ldi	r31, 0x00	; 0
     4e8:	8f ef       	ldi	r24, 0xFF	; 255
     4ea:	80 83       	st	Z, r24
	PORTC = 0x00;
     4ec:	e8 e2       	ldi	r30, 0x28	; 40
     4ee:	f0 e0       	ldi	r31, 0x00	; 0
     4f0:	10 82       	st	Z, r1
	DDRJ = 0x00;
     4f2:	e4 e0       	ldi	r30, 0x04	; 4
     4f4:	f1 e0       	ldi	r31, 0x01	; 1
     4f6:	10 82       	st	Z, r1
	PORTJ = 0xFF;
     4f8:	e5 e0       	ldi	r30, 0x05	; 5
     4fa:	f1 e0       	ldi	r31, 0x01	; 1
     4fc:	8f ef       	ldi	r24, 0xFF	; 255
     4fe:	80 83       	st	Z, r24
}
     500:	cf 91       	pop	r28
     502:	df 91       	pop	r29
     504:	08 95       	ret

00000506 <Sharp_estimation>:


unsigned int Sharp_estimation(unsigned char adc_reading)
{
     506:	df 93       	push	r29
     508:	cf 93       	push	r28
     50a:	cd b7       	in	r28, 0x3d	; 61
     50c:	de b7       	in	r29, 0x3e	; 62
     50e:	27 97       	sbiw	r28, 0x07	; 7
     510:	0f b6       	in	r0, 0x3f	; 63
     512:	f8 94       	cli
     514:	de bf       	out	0x3e, r29	; 62
     516:	0f be       	out	0x3f, r0	; 63
     518:	cd bf       	out	0x3d, r28	; 61
     51a:	8f 83       	std	Y+7, r24	; 0x07
	float distance;
	unsigned int distanceInt;
	distance = (int)(10.00*(2799.6*(1.00/(pow(adc_reading,1.1546)))));
     51c:	8f 81       	ldd	r24, Y+7	; 0x07
     51e:	88 2f       	mov	r24, r24
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	bc 01       	movw	r22, r24
     528:	cd 01       	movw	r24, r26
     52a:	0e 94 07 17 	call	0x2e0e	; 0x2e0e <__floatunsisf>
     52e:	dc 01       	movw	r26, r24
     530:	cb 01       	movw	r24, r22
     532:	bc 01       	movw	r22, r24
     534:	cd 01       	movw	r24, r26
     536:	2f ee       	ldi	r18, 0xEF	; 239
     538:	39 ec       	ldi	r19, 0xC9	; 201
     53a:	43 e9       	ldi	r20, 0x93	; 147
     53c:	5f e3       	ldi	r21, 0x3F	; 63
     53e:	0e 94 dc 19 	call	0x33b8	; 0x33b8 <pow>
     542:	dc 01       	movw	r26, r24
     544:	cb 01       	movw	r24, r22
     546:	9c 01       	movw	r18, r24
     548:	ad 01       	movw	r20, r26
     54a:	60 e0       	ldi	r22, 0x00	; 0
     54c:	70 e0       	ldi	r23, 0x00	; 0
     54e:	80 e8       	ldi	r24, 0x80	; 128
     550:	9f e3       	ldi	r25, 0x3F	; 63
     552:	0e 94 19 15 	call	0x2a32	; 0x2a32 <__divsf3>
     556:	dc 01       	movw	r26, r24
     558:	cb 01       	movw	r24, r22
     55a:	bc 01       	movw	r22, r24
     55c:	cd 01       	movw	r24, r26
     55e:	2a e9       	ldi	r18, 0x9A	; 154
     560:	39 ef       	ldi	r19, 0xF9	; 249
     562:	4e e2       	ldi	r20, 0x2E	; 46
     564:	55 e4       	ldi	r21, 0x45	; 69
     566:	0e 94 1f 14 	call	0x283e	; 0x283e <__mulsf3>
     56a:	dc 01       	movw	r26, r24
     56c:	cb 01       	movw	r24, r22
     56e:	bc 01       	movw	r22, r24
     570:	cd 01       	movw	r24, r26
     572:	20 e0       	ldi	r18, 0x00	; 0
     574:	30 e0       	ldi	r19, 0x00	; 0
     576:	40 e2       	ldi	r20, 0x20	; 32
     578:	51 e4       	ldi	r21, 0x41	; 65
     57a:	0e 94 1f 14 	call	0x283e	; 0x283e <__mulsf3>
     57e:	dc 01       	movw	r26, r24
     580:	cb 01       	movw	r24, r22
     582:	bc 01       	movw	r22, r24
     584:	cd 01       	movw	r24, r26
     586:	0e 94 b3 16 	call	0x2d66	; 0x2d66 <__fixsfsi>
     58a:	dc 01       	movw	r26, r24
     58c:	cb 01       	movw	r24, r22
     58e:	aa 27       	eor	r26, r26
     590:	97 fd       	sbrc	r25, 7
     592:	a0 95       	com	r26
     594:	ba 2f       	mov	r27, r26
     596:	bc 01       	movw	r22, r24
     598:	cd 01       	movw	r24, r26
     59a:	0e 94 55 16 	call	0x2caa	; 0x2caa <__floatsisf>
     59e:	dc 01       	movw	r26, r24
     5a0:	cb 01       	movw	r24, r22
     5a2:	8b 83       	std	Y+3, r24	; 0x03
     5a4:	9c 83       	std	Y+4, r25	; 0x04
     5a6:	ad 83       	std	Y+5, r26	; 0x05
     5a8:	be 83       	std	Y+6, r27	; 0x06
	distanceInt = (int)distance;
     5aa:	6b 81       	ldd	r22, Y+3	; 0x03
     5ac:	7c 81       	ldd	r23, Y+4	; 0x04
     5ae:	8d 81       	ldd	r24, Y+5	; 0x05
     5b0:	9e 81       	ldd	r25, Y+6	; 0x06
     5b2:	0e 94 b3 16 	call	0x2d66	; 0x2d66 <__fixsfsi>
     5b6:	dc 01       	movw	r26, r24
     5b8:	cb 01       	movw	r24, r22
     5ba:	9a 83       	std	Y+2, r25	; 0x02
     5bc:	89 83       	std	Y+1, r24	; 0x01
	if(distanceInt>800)
     5be:	89 81       	ldd	r24, Y+1	; 0x01
     5c0:	9a 81       	ldd	r25, Y+2	; 0x02
     5c2:	23 e0       	ldi	r18, 0x03	; 3
     5c4:	81 32       	cpi	r24, 0x21	; 33
     5c6:	92 07       	cpc	r25, r18
     5c8:	20 f0       	brcs	.+8      	; 0x5d2 <Sharp_estimation+0xcc>
	{
		distanceInt=800;
     5ca:	80 e2       	ldi	r24, 0x20	; 32
     5cc:	93 e0       	ldi	r25, 0x03	; 3
     5ce:	9a 83       	std	Y+2, r25	; 0x02
     5d0:	89 83       	std	Y+1, r24	; 0x01
	}
	return distanceInt;
     5d2:	89 81       	ldd	r24, Y+1	; 0x01
     5d4:	9a 81       	ldd	r25, Y+2	; 0x02
}
     5d6:	27 96       	adiw	r28, 0x07	; 7
     5d8:	0f b6       	in	r0, 0x3f	; 63
     5da:	f8 94       	cli
     5dc:	de bf       	out	0x3e, r29	; 62
     5de:	0f be       	out	0x3f, r0	; 63
     5e0:	cd bf       	out	0x3d, r28	; 61
     5e2:	cf 91       	pop	r28
     5e4:	df 91       	pop	r29
     5e6:	08 95       	ret

000005e8 <front_dist_mm>:


int front_dist_mm(void) 
{
     5e8:	df 93       	push	r29
     5ea:	cf 93       	push	r28
     5ec:	00 d0       	rcall	.+0      	; 0x5ee <front_dist_mm+0x6>
     5ee:	cd b7       	in	r28, 0x3d	; 61
     5f0:	de b7       	in	r29, 0x3e	; 62
  //float front_distance;
  int front_distance_mm;
  unsigned char analog_val;
  analog_val = ADC_Conversion(11);
     5f2:	8b e0       	ldi	r24, 0x0B	; 11
     5f4:	0e 94 1f 02 	call	0x43e	; 0x43e <ADC_Conversion>
     5f8:	89 83       	std	Y+1, r24	; 0x01
 

 front_distance_mm=Sharp_estimation(analog_val);
     5fa:	89 81       	ldd	r24, Y+1	; 0x01
     5fc:	0e 94 83 02 	call	0x506	; 0x506 <Sharp_estimation>
     600:	9b 83       	std	Y+3, r25	; 0x03
     602:	8a 83       	std	Y+2, r24	; 0x02
  return front_distance_mm; 	
     604:	8a 81       	ldd	r24, Y+2	; 0x02
     606:	9b 81       	ldd	r25, Y+3	; 0x03

  //return 100;
}
     608:	0f 90       	pop	r0
     60a:	0f 90       	pop	r0
     60c:	0f 90       	pop	r0
     60e:	cf 91       	pop	r28
     610:	df 91       	pop	r29
     612:	08 95       	ret

00000614 <init_lcd>:

int i;


void init_lcd()
{
     614:	df 93       	push	r29
     616:	cf 93       	push	r28
     618:	cd b7       	in	r28, 0x3d	; 61
     61a:	de b7       	in	r29, 0x3e	; 62
	DDRF = 0x00; 
     61c:	e0 e3       	ldi	r30, 0x30	; 48
     61e:	f0 e0       	ldi	r31, 0x00	; 0
     620:	10 82       	st	Z, r1
	PORTF = 0x00;
     622:	e1 e3       	ldi	r30, 0x31	; 49
     624:	f0 e0       	ldi	r31, 0x00	; 0
     626:	10 82       	st	Z, r1
	DDRA = 0x0F;
     628:	e1 e2       	ldi	r30, 0x21	; 33
     62a:	f0 e0       	ldi	r31, 0x00	; 0
     62c:	8f e0       	ldi	r24, 0x0F	; 15
     62e:	80 83       	st	Z, r24
	PORTA = 0x00;
     630:	e2 e2       	ldi	r30, 0x22	; 34
     632:	f0 e0       	ldi	r31, 0x00	; 0
     634:	10 82       	st	Z, r1
	DDRL = 0x18;
     636:	ea e0       	ldi	r30, 0x0A	; 10
     638:	f1 e0       	ldi	r31, 0x01	; 1
     63a:	88 e1       	ldi	r24, 0x18	; 24
     63c:	80 83       	st	Z, r24
	PORTL = 0x18;
     63e:	eb e0       	ldi	r30, 0x0B	; 11
     640:	f1 e0       	ldi	r31, 0x01	; 1
     642:	88 e1       	ldi	r24, 0x18	; 24
     644:	80 83       	st	Z, r24
	DDRC = 0xFF;
     646:	e7 e2       	ldi	r30, 0x27	; 39
     648:	f0 e0       	ldi	r31, 0x00	; 0
     64a:	8f ef       	ldi	r24, 0xFF	; 255
     64c:	80 83       	st	Z, r24
	PORTC = 0x00;
     64e:	e8 e2       	ldi	r30, 0x28	; 40
     650:	f0 e0       	ldi	r31, 0x00	; 0
     652:	10 82       	st	Z, r1
	DDRJ = 0x00;
     654:	e4 e0       	ldi	r30, 0x04	; 4
     656:	f1 e0       	ldi	r31, 0x01	; 1
     658:	10 82       	st	Z, r1
	PORTJ = 0xFF;
     65a:	e5 e0       	ldi	r30, 0x05	; 5
     65c:	f1 e0       	ldi	r31, 0x01	; 1
     65e:	8f ef       	ldi	r24, 0xFF	; 255
     660:	80 83       	st	Z, r24
}
     662:	cf 91       	pop	r28
     664:	df 91       	pop	r29
     666:	08 95       	ret

00000668 <lcd_set_4bit>:



/*****Function to Reset LCD*****/
void lcd_set_4bit()
{
     668:	0f 93       	push	r16
     66a:	1f 93       	push	r17
     66c:	df 93       	push	r29
     66e:	cf 93       	push	r28
     670:	cd b7       	in	r28, 0x3d	; 61
     672:	de b7       	in	r29, 0x3e	; 62
     674:	c0 57       	subi	r28, 0x70	; 112
     676:	d0 40       	sbci	r29, 0x00	; 0
     678:	0f b6       	in	r0, 0x3f	; 63
     67a:	f8 94       	cli
     67c:	de bf       	out	0x3e, r29	; 62
     67e:	0f be       	out	0x3f, r0	; 63
     680:	cd bf       	out	0x3d, r28	; 61
     682:	fe 01       	movw	r30, r28
     684:	e3 59       	subi	r30, 0x93	; 147
     686:	ff 4f       	sbci	r31, 0xFF	; 255
     688:	80 e0       	ldi	r24, 0x00	; 0
     68a:	90 e0       	ldi	r25, 0x00	; 0
     68c:	a0 e8       	ldi	r26, 0x80	; 128
     68e:	bf e3       	ldi	r27, 0x3F	; 63
     690:	80 83       	st	Z, r24
     692:	91 83       	std	Z+1, r25	; 0x01
     694:	a2 83       	std	Z+2, r26	; 0x02
     696:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     698:	8e 01       	movw	r16, r28
     69a:	07 59       	subi	r16, 0x97	; 151
     69c:	1f 4f       	sbci	r17, 0xFF	; 255
     69e:	fe 01       	movw	r30, r28
     6a0:	e3 59       	subi	r30, 0x93	; 147
     6a2:	ff 4f       	sbci	r31, 0xFF	; 255
     6a4:	60 81       	ld	r22, Z
     6a6:	71 81       	ldd	r23, Z+1	; 0x01
     6a8:	82 81       	ldd	r24, Z+2	; 0x02
     6aa:	93 81       	ldd	r25, Z+3	; 0x03
     6ac:	2d ec       	ldi	r18, 0xCD	; 205
     6ae:	3c ec       	ldi	r19, 0xCC	; 204
     6b0:	4c e2       	ldi	r20, 0x2C	; 44
     6b2:	55 e4       	ldi	r21, 0x45	; 69
     6b4:	0e 94 1f 14 	call	0x283e	; 0x283e <__mulsf3>
     6b8:	dc 01       	movw	r26, r24
     6ba:	cb 01       	movw	r24, r22
     6bc:	f8 01       	movw	r30, r16
     6be:	80 83       	st	Z, r24
     6c0:	91 83       	std	Z+1, r25	; 0x01
     6c2:	a2 83       	std	Z+2, r26	; 0x02
     6c4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     6c6:	fe 01       	movw	r30, r28
     6c8:	e7 59       	subi	r30, 0x97	; 151
     6ca:	ff 4f       	sbci	r31, 0xFF	; 255
     6cc:	60 81       	ld	r22, Z
     6ce:	71 81       	ldd	r23, Z+1	; 0x01
     6d0:	82 81       	ldd	r24, Z+2	; 0x02
     6d2:	93 81       	ldd	r25, Z+3	; 0x03
     6d4:	20 e0       	ldi	r18, 0x00	; 0
     6d6:	30 e0       	ldi	r19, 0x00	; 0
     6d8:	40 e8       	ldi	r20, 0x80	; 128
     6da:	5f e3       	ldi	r21, 0x3F	; 63
     6dc:	0e 94 25 16 	call	0x2c4a	; 0x2c4a <__ltsf2>
     6e0:	88 23       	and	r24, r24
     6e2:	44 f4       	brge	.+16     	; 0x6f4 <lcd_set_4bit+0x8c>
		__ticks = 1;
     6e4:	fe 01       	movw	r30, r28
     6e6:	e9 59       	subi	r30, 0x99	; 153
     6e8:	ff 4f       	sbci	r31, 0xFF	; 255
     6ea:	81 e0       	ldi	r24, 0x01	; 1
     6ec:	90 e0       	ldi	r25, 0x00	; 0
     6ee:	91 83       	std	Z+1, r25	; 0x01
     6f0:	80 83       	st	Z, r24
     6f2:	64 c0       	rjmp	.+200    	; 0x7bc <lcd_set_4bit+0x154>
	else if (__tmp > 65535)
     6f4:	fe 01       	movw	r30, r28
     6f6:	e7 59       	subi	r30, 0x97	; 151
     6f8:	ff 4f       	sbci	r31, 0xFF	; 255
     6fa:	60 81       	ld	r22, Z
     6fc:	71 81       	ldd	r23, Z+1	; 0x01
     6fe:	82 81       	ldd	r24, Z+2	; 0x02
     700:	93 81       	ldd	r25, Z+3	; 0x03
     702:	20 e0       	ldi	r18, 0x00	; 0
     704:	3f ef       	ldi	r19, 0xFF	; 255
     706:	4f e7       	ldi	r20, 0x7F	; 127
     708:	57 e4       	ldi	r21, 0x47	; 71
     70a:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <__gtsf2>
     70e:	18 16       	cp	r1, r24
     710:	0c f0       	brlt	.+2      	; 0x714 <lcd_set_4bit+0xac>
     712:	43 c0       	rjmp	.+134    	; 0x79a <lcd_set_4bit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     714:	fe 01       	movw	r30, r28
     716:	e3 59       	subi	r30, 0x93	; 147
     718:	ff 4f       	sbci	r31, 0xFF	; 255
     71a:	60 81       	ld	r22, Z
     71c:	71 81       	ldd	r23, Z+1	; 0x01
     71e:	82 81       	ldd	r24, Z+2	; 0x02
     720:	93 81       	ldd	r25, Z+3	; 0x03
     722:	20 e0       	ldi	r18, 0x00	; 0
     724:	30 e0       	ldi	r19, 0x00	; 0
     726:	40 e2       	ldi	r20, 0x20	; 32
     728:	51 e4       	ldi	r21, 0x41	; 65
     72a:	0e 94 1f 14 	call	0x283e	; 0x283e <__mulsf3>
     72e:	dc 01       	movw	r26, r24
     730:	cb 01       	movw	r24, r22
     732:	8e 01       	movw	r16, r28
     734:	09 59       	subi	r16, 0x99	; 153
     736:	1f 4f       	sbci	r17, 0xFF	; 255
     738:	bc 01       	movw	r22, r24
     73a:	cd 01       	movw	r24, r26
     73c:	0e 94 49 12 	call	0x2492	; 0x2492 <__fixunssfsi>
     740:	dc 01       	movw	r26, r24
     742:	cb 01       	movw	r24, r22
     744:	f8 01       	movw	r30, r16
     746:	91 83       	std	Z+1, r25	; 0x01
     748:	80 83       	st	Z, r24
     74a:	1f c0       	rjmp	.+62     	; 0x78a <lcd_set_4bit+0x122>
     74c:	fe 01       	movw	r30, r28
     74e:	eb 59       	subi	r30, 0x9B	; 155
     750:	ff 4f       	sbci	r31, 0xFF	; 255
     752:	84 e1       	ldi	r24, 0x14	; 20
     754:	91 e0       	ldi	r25, 0x01	; 1
     756:	91 83       	std	Z+1, r25	; 0x01
     758:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     75a:	fe 01       	movw	r30, r28
     75c:	eb 59       	subi	r30, 0x9B	; 155
     75e:	ff 4f       	sbci	r31, 0xFF	; 255
     760:	80 81       	ld	r24, Z
     762:	91 81       	ldd	r25, Z+1	; 0x01
     764:	01 97       	sbiw	r24, 0x01	; 1
     766:	f1 f7       	brne	.-4      	; 0x764 <lcd_set_4bit+0xfc>
     768:	fe 01       	movw	r30, r28
     76a:	eb 59       	subi	r30, 0x9B	; 155
     76c:	ff 4f       	sbci	r31, 0xFF	; 255
     76e:	91 83       	std	Z+1, r25	; 0x01
     770:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     772:	de 01       	movw	r26, r28
     774:	a9 59       	subi	r26, 0x99	; 153
     776:	bf 4f       	sbci	r27, 0xFF	; 255
     778:	fe 01       	movw	r30, r28
     77a:	e9 59       	subi	r30, 0x99	; 153
     77c:	ff 4f       	sbci	r31, 0xFF	; 255
     77e:	80 81       	ld	r24, Z
     780:	91 81       	ldd	r25, Z+1	; 0x01
     782:	01 97       	sbiw	r24, 0x01	; 1
     784:	11 96       	adiw	r26, 0x01	; 1
     786:	9c 93       	st	X, r25
     788:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     78a:	fe 01       	movw	r30, r28
     78c:	e9 59       	subi	r30, 0x99	; 153
     78e:	ff 4f       	sbci	r31, 0xFF	; 255
     790:	80 81       	ld	r24, Z
     792:	91 81       	ldd	r25, Z+1	; 0x01
     794:	00 97       	sbiw	r24, 0x00	; 0
     796:	d1 f6       	brne	.-76     	; 0x74c <lcd_set_4bit+0xe4>
     798:	27 c0       	rjmp	.+78     	; 0x7e8 <lcd_set_4bit+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     79a:	8e 01       	movw	r16, r28
     79c:	09 59       	subi	r16, 0x99	; 153
     79e:	1f 4f       	sbci	r17, 0xFF	; 255
     7a0:	fe 01       	movw	r30, r28
     7a2:	e7 59       	subi	r30, 0x97	; 151
     7a4:	ff 4f       	sbci	r31, 0xFF	; 255
     7a6:	60 81       	ld	r22, Z
     7a8:	71 81       	ldd	r23, Z+1	; 0x01
     7aa:	82 81       	ldd	r24, Z+2	; 0x02
     7ac:	93 81       	ldd	r25, Z+3	; 0x03
     7ae:	0e 94 49 12 	call	0x2492	; 0x2492 <__fixunssfsi>
     7b2:	dc 01       	movw	r26, r24
     7b4:	cb 01       	movw	r24, r22
     7b6:	f8 01       	movw	r30, r16
     7b8:	91 83       	std	Z+1, r25	; 0x01
     7ba:	80 83       	st	Z, r24
     7bc:	de 01       	movw	r26, r28
     7be:	ad 59       	subi	r26, 0x9D	; 157
     7c0:	bf 4f       	sbci	r27, 0xFF	; 255
     7c2:	fe 01       	movw	r30, r28
     7c4:	e9 59       	subi	r30, 0x99	; 153
     7c6:	ff 4f       	sbci	r31, 0xFF	; 255
     7c8:	80 81       	ld	r24, Z
     7ca:	91 81       	ldd	r25, Z+1	; 0x01
     7cc:	8d 93       	st	X+, r24
     7ce:	9c 93       	st	X, r25
     7d0:	fe 01       	movw	r30, r28
     7d2:	ed 59       	subi	r30, 0x9D	; 157
     7d4:	ff 4f       	sbci	r31, 0xFF	; 255
     7d6:	80 81       	ld	r24, Z
     7d8:	91 81       	ldd	r25, Z+1	; 0x01
     7da:	01 97       	sbiw	r24, 0x01	; 1
     7dc:	f1 f7       	brne	.-4      	; 0x7da <lcd_set_4bit+0x172>
     7de:	fe 01       	movw	r30, r28
     7e0:	ed 59       	subi	r30, 0x9D	; 157
     7e2:	ff 4f       	sbci	r31, 0xFF	; 255
     7e4:	91 83       	std	Z+1, r25	; 0x01
     7e6:	80 83       	st	Z, r24
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     7e8:	a8 e2       	ldi	r26, 0x28	; 40
     7ea:	b0 e0       	ldi	r27, 0x00	; 0
     7ec:	e8 e2       	ldi	r30, 0x28	; 40
     7ee:	f0 e0       	ldi	r31, 0x00	; 0
     7f0:	80 81       	ld	r24, Z
     7f2:	8e 7f       	andi	r24, 0xFE	; 254
     7f4:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     7f6:	a8 e2       	ldi	r26, 0x28	; 40
     7f8:	b0 e0       	ldi	r27, 0x00	; 0
     7fa:	e8 e2       	ldi	r30, 0x28	; 40
     7fc:	f0 e0       	ldi	r31, 0x00	; 0
     7fe:	80 81       	ld	r24, Z
     800:	8d 7f       	andi	r24, 0xFD	; 253
     802:	8c 93       	st	X, r24
	lcd_port = 0x30;				//Sending 3
     804:	e8 e2       	ldi	r30, 0x28	; 40
     806:	f0 e0       	ldi	r31, 0x00	; 0
     808:	80 e3       	ldi	r24, 0x30	; 48
     80a:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     80c:	a8 e2       	ldi	r26, 0x28	; 40
     80e:	b0 e0       	ldi	r27, 0x00	; 0
     810:	e8 e2       	ldi	r30, 0x28	; 40
     812:	f0 e0       	ldi	r31, 0x00	; 0
     814:	80 81       	ld	r24, Z
     816:	84 60       	ori	r24, 0x04	; 4
     818:	8c 93       	st	X, r24
     81a:	fe 01       	movw	r30, r28
     81c:	e1 5a       	subi	r30, 0xA1	; 161
     81e:	ff 4f       	sbci	r31, 0xFF	; 255
     820:	80 e0       	ldi	r24, 0x00	; 0
     822:	90 e0       	ldi	r25, 0x00	; 0
     824:	a0 ea       	ldi	r26, 0xA0	; 160
     826:	b0 e4       	ldi	r27, 0x40	; 64
     828:	80 83       	st	Z, r24
     82a:	91 83       	std	Z+1, r25	; 0x01
     82c:	a2 83       	std	Z+2, r26	; 0x02
     82e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     830:	8e 01       	movw	r16, r28
     832:	05 5a       	subi	r16, 0xA5	; 165
     834:	1f 4f       	sbci	r17, 0xFF	; 255
     836:	fe 01       	movw	r30, r28
     838:	e1 5a       	subi	r30, 0xA1	; 161
     83a:	ff 4f       	sbci	r31, 0xFF	; 255
     83c:	60 81       	ld	r22, Z
     83e:	71 81       	ldd	r23, Z+1	; 0x01
     840:	82 81       	ldd	r24, Z+2	; 0x02
     842:	93 81       	ldd	r25, Z+3	; 0x03
     844:	2d ec       	ldi	r18, 0xCD	; 205
     846:	3c ec       	ldi	r19, 0xCC	; 204
     848:	4c e2       	ldi	r20, 0x2C	; 44
     84a:	55 e4       	ldi	r21, 0x45	; 69
     84c:	0e 94 1f 14 	call	0x283e	; 0x283e <__mulsf3>
     850:	dc 01       	movw	r26, r24
     852:	cb 01       	movw	r24, r22
     854:	f8 01       	movw	r30, r16
     856:	80 83       	st	Z, r24
     858:	91 83       	std	Z+1, r25	; 0x01
     85a:	a2 83       	std	Z+2, r26	; 0x02
     85c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     85e:	fe 01       	movw	r30, r28
     860:	e5 5a       	subi	r30, 0xA5	; 165
     862:	ff 4f       	sbci	r31, 0xFF	; 255
     864:	60 81       	ld	r22, Z
     866:	71 81       	ldd	r23, Z+1	; 0x01
     868:	82 81       	ldd	r24, Z+2	; 0x02
     86a:	93 81       	ldd	r25, Z+3	; 0x03
     86c:	20 e0       	ldi	r18, 0x00	; 0
     86e:	30 e0       	ldi	r19, 0x00	; 0
     870:	40 e8       	ldi	r20, 0x80	; 128
     872:	5f e3       	ldi	r21, 0x3F	; 63
     874:	0e 94 25 16 	call	0x2c4a	; 0x2c4a <__ltsf2>
     878:	88 23       	and	r24, r24
     87a:	44 f4       	brge	.+16     	; 0x88c <lcd_set_4bit+0x224>
		__ticks = 1;
     87c:	fe 01       	movw	r30, r28
     87e:	e7 5a       	subi	r30, 0xA7	; 167
     880:	ff 4f       	sbci	r31, 0xFF	; 255
     882:	81 e0       	ldi	r24, 0x01	; 1
     884:	90 e0       	ldi	r25, 0x00	; 0
     886:	91 83       	std	Z+1, r25	; 0x01
     888:	80 83       	st	Z, r24
     88a:	64 c0       	rjmp	.+200    	; 0x954 <lcd_set_4bit+0x2ec>
	else if (__tmp > 65535)
     88c:	fe 01       	movw	r30, r28
     88e:	e5 5a       	subi	r30, 0xA5	; 165
     890:	ff 4f       	sbci	r31, 0xFF	; 255
     892:	60 81       	ld	r22, Z
     894:	71 81       	ldd	r23, Z+1	; 0x01
     896:	82 81       	ldd	r24, Z+2	; 0x02
     898:	93 81       	ldd	r25, Z+3	; 0x03
     89a:	20 e0       	ldi	r18, 0x00	; 0
     89c:	3f ef       	ldi	r19, 0xFF	; 255
     89e:	4f e7       	ldi	r20, 0x7F	; 127
     8a0:	57 e4       	ldi	r21, 0x47	; 71
     8a2:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <__gtsf2>
     8a6:	18 16       	cp	r1, r24
     8a8:	0c f0       	brlt	.+2      	; 0x8ac <lcd_set_4bit+0x244>
     8aa:	43 c0       	rjmp	.+134    	; 0x932 <lcd_set_4bit+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     8ac:	fe 01       	movw	r30, r28
     8ae:	e1 5a       	subi	r30, 0xA1	; 161
     8b0:	ff 4f       	sbci	r31, 0xFF	; 255
     8b2:	60 81       	ld	r22, Z
     8b4:	71 81       	ldd	r23, Z+1	; 0x01
     8b6:	82 81       	ldd	r24, Z+2	; 0x02
     8b8:	93 81       	ldd	r25, Z+3	; 0x03
     8ba:	20 e0       	ldi	r18, 0x00	; 0
     8bc:	30 e0       	ldi	r19, 0x00	; 0
     8be:	40 e2       	ldi	r20, 0x20	; 32
     8c0:	51 e4       	ldi	r21, 0x41	; 65
     8c2:	0e 94 1f 14 	call	0x283e	; 0x283e <__mulsf3>
     8c6:	dc 01       	movw	r26, r24
     8c8:	cb 01       	movw	r24, r22
     8ca:	8e 01       	movw	r16, r28
     8cc:	07 5a       	subi	r16, 0xA7	; 167
     8ce:	1f 4f       	sbci	r17, 0xFF	; 255
     8d0:	bc 01       	movw	r22, r24
     8d2:	cd 01       	movw	r24, r26
     8d4:	0e 94 49 12 	call	0x2492	; 0x2492 <__fixunssfsi>
     8d8:	dc 01       	movw	r26, r24
     8da:	cb 01       	movw	r24, r22
     8dc:	f8 01       	movw	r30, r16
     8de:	91 83       	std	Z+1, r25	; 0x01
     8e0:	80 83       	st	Z, r24
     8e2:	1f c0       	rjmp	.+62     	; 0x922 <lcd_set_4bit+0x2ba>
     8e4:	fe 01       	movw	r30, r28
     8e6:	e9 5a       	subi	r30, 0xA9	; 169
     8e8:	ff 4f       	sbci	r31, 0xFF	; 255
     8ea:	84 e1       	ldi	r24, 0x14	; 20
     8ec:	91 e0       	ldi	r25, 0x01	; 1
     8ee:	91 83       	std	Z+1, r25	; 0x01
     8f0:	80 83       	st	Z, r24
     8f2:	fe 01       	movw	r30, r28
     8f4:	e9 5a       	subi	r30, 0xA9	; 169
     8f6:	ff 4f       	sbci	r31, 0xFF	; 255
     8f8:	80 81       	ld	r24, Z
     8fa:	91 81       	ldd	r25, Z+1	; 0x01
     8fc:	01 97       	sbiw	r24, 0x01	; 1
     8fe:	f1 f7       	brne	.-4      	; 0x8fc <lcd_set_4bit+0x294>
     900:	fe 01       	movw	r30, r28
     902:	e9 5a       	subi	r30, 0xA9	; 169
     904:	ff 4f       	sbci	r31, 0xFF	; 255
     906:	91 83       	std	Z+1, r25	; 0x01
     908:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     90a:	de 01       	movw	r26, r28
     90c:	a7 5a       	subi	r26, 0xA7	; 167
     90e:	bf 4f       	sbci	r27, 0xFF	; 255
     910:	fe 01       	movw	r30, r28
     912:	e7 5a       	subi	r30, 0xA7	; 167
     914:	ff 4f       	sbci	r31, 0xFF	; 255
     916:	80 81       	ld	r24, Z
     918:	91 81       	ldd	r25, Z+1	; 0x01
     91a:	01 97       	sbiw	r24, 0x01	; 1
     91c:	11 96       	adiw	r26, 0x01	; 1
     91e:	9c 93       	st	X, r25
     920:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     922:	fe 01       	movw	r30, r28
     924:	e7 5a       	subi	r30, 0xA7	; 167
     926:	ff 4f       	sbci	r31, 0xFF	; 255
     928:	80 81       	ld	r24, Z
     92a:	91 81       	ldd	r25, Z+1	; 0x01
     92c:	00 97       	sbiw	r24, 0x00	; 0
     92e:	d1 f6       	brne	.-76     	; 0x8e4 <lcd_set_4bit+0x27c>
     930:	27 c0       	rjmp	.+78     	; 0x980 <lcd_set_4bit+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     932:	8e 01       	movw	r16, r28
     934:	07 5a       	subi	r16, 0xA7	; 167
     936:	1f 4f       	sbci	r17, 0xFF	; 255
     938:	fe 01       	movw	r30, r28
     93a:	e5 5a       	subi	r30, 0xA5	; 165
     93c:	ff 4f       	sbci	r31, 0xFF	; 255
     93e:	60 81       	ld	r22, Z
     940:	71 81       	ldd	r23, Z+1	; 0x01
     942:	82 81       	ldd	r24, Z+2	; 0x02
     944:	93 81       	ldd	r25, Z+3	; 0x03
     946:	0e 94 49 12 	call	0x2492	; 0x2492 <__fixunssfsi>
     94a:	dc 01       	movw	r26, r24
     94c:	cb 01       	movw	r24, r22
     94e:	f8 01       	movw	r30, r16
     950:	91 83       	std	Z+1, r25	; 0x01
     952:	80 83       	st	Z, r24
     954:	de 01       	movw	r26, r28
     956:	ab 5a       	subi	r26, 0xAB	; 171
     958:	bf 4f       	sbci	r27, 0xFF	; 255
     95a:	fe 01       	movw	r30, r28
     95c:	e7 5a       	subi	r30, 0xA7	; 167
     95e:	ff 4f       	sbci	r31, 0xFF	; 255
     960:	80 81       	ld	r24, Z
     962:	91 81       	ldd	r25, Z+1	; 0x01
     964:	8d 93       	st	X+, r24
     966:	9c 93       	st	X, r25
     968:	fe 01       	movw	r30, r28
     96a:	eb 5a       	subi	r30, 0xAB	; 171
     96c:	ff 4f       	sbci	r31, 0xFF	; 255
     96e:	80 81       	ld	r24, Z
     970:	91 81       	ldd	r25, Z+1	; 0x01
     972:	01 97       	sbiw	r24, 0x01	; 1
     974:	f1 f7       	brne	.-4      	; 0x972 <lcd_set_4bit+0x30a>
     976:	fe 01       	movw	r30, r28
     978:	eb 5a       	subi	r30, 0xAB	; 171
     97a:	ff 4f       	sbci	r31, 0xFF	; 255
     97c:	91 83       	std	Z+1, r25	; 0x01
     97e:	80 83       	st	Z, r24
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     980:	a8 e2       	ldi	r26, 0x28	; 40
     982:	b0 e0       	ldi	r27, 0x00	; 0
     984:	e8 e2       	ldi	r30, 0x28	; 40
     986:	f0 e0       	ldi	r31, 0x00	; 0
     988:	80 81       	ld	r24, Z
     98a:	8b 7f       	andi	r24, 0xFB	; 251
     98c:	8c 93       	st	X, r24
     98e:	fe 01       	movw	r30, r28
     990:	ef 5a       	subi	r30, 0xAF	; 175
     992:	ff 4f       	sbci	r31, 0xFF	; 255
     994:	80 e0       	ldi	r24, 0x00	; 0
     996:	90 e0       	ldi	r25, 0x00	; 0
     998:	a0 e8       	ldi	r26, 0x80	; 128
     99a:	bf e3       	ldi	r27, 0x3F	; 63
     99c:	80 83       	st	Z, r24
     99e:	91 83       	std	Z+1, r25	; 0x01
     9a0:	a2 83       	std	Z+2, r26	; 0x02
     9a2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     9a4:	8e 01       	movw	r16, r28
     9a6:	03 5b       	subi	r16, 0xB3	; 179
     9a8:	1f 4f       	sbci	r17, 0xFF	; 255
     9aa:	fe 01       	movw	r30, r28
     9ac:	ef 5a       	subi	r30, 0xAF	; 175
     9ae:	ff 4f       	sbci	r31, 0xFF	; 255
     9b0:	60 81       	ld	r22, Z
     9b2:	71 81       	ldd	r23, Z+1	; 0x01
     9b4:	82 81       	ldd	r24, Z+2	; 0x02
     9b6:	93 81       	ldd	r25, Z+3	; 0x03
     9b8:	2d ec       	ldi	r18, 0xCD	; 205
     9ba:	3c ec       	ldi	r19, 0xCC	; 204
     9bc:	4c e2       	ldi	r20, 0x2C	; 44
     9be:	55 e4       	ldi	r21, 0x45	; 69
     9c0:	0e 94 1f 14 	call	0x283e	; 0x283e <__mulsf3>
     9c4:	dc 01       	movw	r26, r24
     9c6:	cb 01       	movw	r24, r22
     9c8:	f8 01       	movw	r30, r16
     9ca:	80 83       	st	Z, r24
     9cc:	91 83       	std	Z+1, r25	; 0x01
     9ce:	a2 83       	std	Z+2, r26	; 0x02
     9d0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     9d2:	fe 01       	movw	r30, r28
     9d4:	e3 5b       	subi	r30, 0xB3	; 179
     9d6:	ff 4f       	sbci	r31, 0xFF	; 255
     9d8:	60 81       	ld	r22, Z
     9da:	71 81       	ldd	r23, Z+1	; 0x01
     9dc:	82 81       	ldd	r24, Z+2	; 0x02
     9de:	93 81       	ldd	r25, Z+3	; 0x03
     9e0:	20 e0       	ldi	r18, 0x00	; 0
     9e2:	30 e0       	ldi	r19, 0x00	; 0
     9e4:	40 e8       	ldi	r20, 0x80	; 128
     9e6:	5f e3       	ldi	r21, 0x3F	; 63
     9e8:	0e 94 25 16 	call	0x2c4a	; 0x2c4a <__ltsf2>
     9ec:	88 23       	and	r24, r24
     9ee:	44 f4       	brge	.+16     	; 0xa00 <lcd_set_4bit+0x398>
		__ticks = 1;
     9f0:	fe 01       	movw	r30, r28
     9f2:	e5 5b       	subi	r30, 0xB5	; 181
     9f4:	ff 4f       	sbci	r31, 0xFF	; 255
     9f6:	81 e0       	ldi	r24, 0x01	; 1
     9f8:	90 e0       	ldi	r25, 0x00	; 0
     9fa:	91 83       	std	Z+1, r25	; 0x01
     9fc:	80 83       	st	Z, r24
     9fe:	64 c0       	rjmp	.+200    	; 0xac8 <lcd_set_4bit+0x460>
	else if (__tmp > 65535)
     a00:	fe 01       	movw	r30, r28
     a02:	e3 5b       	subi	r30, 0xB3	; 179
     a04:	ff 4f       	sbci	r31, 0xFF	; 255
     a06:	60 81       	ld	r22, Z
     a08:	71 81       	ldd	r23, Z+1	; 0x01
     a0a:	82 81       	ldd	r24, Z+2	; 0x02
     a0c:	93 81       	ldd	r25, Z+3	; 0x03
     a0e:	20 e0       	ldi	r18, 0x00	; 0
     a10:	3f ef       	ldi	r19, 0xFF	; 255
     a12:	4f e7       	ldi	r20, 0x7F	; 127
     a14:	57 e4       	ldi	r21, 0x47	; 71
     a16:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <__gtsf2>
     a1a:	18 16       	cp	r1, r24
     a1c:	0c f0       	brlt	.+2      	; 0xa20 <lcd_set_4bit+0x3b8>
     a1e:	43 c0       	rjmp	.+134    	; 0xaa6 <lcd_set_4bit+0x43e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a20:	fe 01       	movw	r30, r28
     a22:	ef 5a       	subi	r30, 0xAF	; 175
     a24:	ff 4f       	sbci	r31, 0xFF	; 255
     a26:	60 81       	ld	r22, Z
     a28:	71 81       	ldd	r23, Z+1	; 0x01
     a2a:	82 81       	ldd	r24, Z+2	; 0x02
     a2c:	93 81       	ldd	r25, Z+3	; 0x03
     a2e:	20 e0       	ldi	r18, 0x00	; 0
     a30:	30 e0       	ldi	r19, 0x00	; 0
     a32:	40 e2       	ldi	r20, 0x20	; 32
     a34:	51 e4       	ldi	r21, 0x41	; 65
     a36:	0e 94 1f 14 	call	0x283e	; 0x283e <__mulsf3>
     a3a:	dc 01       	movw	r26, r24
     a3c:	cb 01       	movw	r24, r22
     a3e:	8e 01       	movw	r16, r28
     a40:	05 5b       	subi	r16, 0xB5	; 181
     a42:	1f 4f       	sbci	r17, 0xFF	; 255
     a44:	bc 01       	movw	r22, r24
     a46:	cd 01       	movw	r24, r26
     a48:	0e 94 49 12 	call	0x2492	; 0x2492 <__fixunssfsi>
     a4c:	dc 01       	movw	r26, r24
     a4e:	cb 01       	movw	r24, r22
     a50:	f8 01       	movw	r30, r16
     a52:	91 83       	std	Z+1, r25	; 0x01
     a54:	80 83       	st	Z, r24
     a56:	1f c0       	rjmp	.+62     	; 0xa96 <lcd_set_4bit+0x42e>
     a58:	fe 01       	movw	r30, r28
     a5a:	e7 5b       	subi	r30, 0xB7	; 183
     a5c:	ff 4f       	sbci	r31, 0xFF	; 255
     a5e:	84 e1       	ldi	r24, 0x14	; 20
     a60:	91 e0       	ldi	r25, 0x01	; 1
     a62:	91 83       	std	Z+1, r25	; 0x01
     a64:	80 83       	st	Z, r24
     a66:	fe 01       	movw	r30, r28
     a68:	e7 5b       	subi	r30, 0xB7	; 183
     a6a:	ff 4f       	sbci	r31, 0xFF	; 255
     a6c:	80 81       	ld	r24, Z
     a6e:	91 81       	ldd	r25, Z+1	; 0x01
     a70:	01 97       	sbiw	r24, 0x01	; 1
     a72:	f1 f7       	brne	.-4      	; 0xa70 <lcd_set_4bit+0x408>
     a74:	fe 01       	movw	r30, r28
     a76:	e7 5b       	subi	r30, 0xB7	; 183
     a78:	ff 4f       	sbci	r31, 0xFF	; 255
     a7a:	91 83       	std	Z+1, r25	; 0x01
     a7c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a7e:	de 01       	movw	r26, r28
     a80:	a5 5b       	subi	r26, 0xB5	; 181
     a82:	bf 4f       	sbci	r27, 0xFF	; 255
     a84:	fe 01       	movw	r30, r28
     a86:	e5 5b       	subi	r30, 0xB5	; 181
     a88:	ff 4f       	sbci	r31, 0xFF	; 255
     a8a:	80 81       	ld	r24, Z
     a8c:	91 81       	ldd	r25, Z+1	; 0x01
     a8e:	01 97       	sbiw	r24, 0x01	; 1
     a90:	11 96       	adiw	r26, 0x01	; 1
     a92:	9c 93       	st	X, r25
     a94:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a96:	fe 01       	movw	r30, r28
     a98:	e5 5b       	subi	r30, 0xB5	; 181
     a9a:	ff 4f       	sbci	r31, 0xFF	; 255
     a9c:	80 81       	ld	r24, Z
     a9e:	91 81       	ldd	r25, Z+1	; 0x01
     aa0:	00 97       	sbiw	r24, 0x00	; 0
     aa2:	d1 f6       	brne	.-76     	; 0xa58 <lcd_set_4bit+0x3f0>
     aa4:	27 c0       	rjmp	.+78     	; 0xaf4 <lcd_set_4bit+0x48c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     aa6:	8e 01       	movw	r16, r28
     aa8:	05 5b       	subi	r16, 0xB5	; 181
     aaa:	1f 4f       	sbci	r17, 0xFF	; 255
     aac:	fe 01       	movw	r30, r28
     aae:	e3 5b       	subi	r30, 0xB3	; 179
     ab0:	ff 4f       	sbci	r31, 0xFF	; 255
     ab2:	60 81       	ld	r22, Z
     ab4:	71 81       	ldd	r23, Z+1	; 0x01
     ab6:	82 81       	ldd	r24, Z+2	; 0x02
     ab8:	93 81       	ldd	r25, Z+3	; 0x03
     aba:	0e 94 49 12 	call	0x2492	; 0x2492 <__fixunssfsi>
     abe:	dc 01       	movw	r26, r24
     ac0:	cb 01       	movw	r24, r22
     ac2:	f8 01       	movw	r30, r16
     ac4:	91 83       	std	Z+1, r25	; 0x01
     ac6:	80 83       	st	Z, r24
     ac8:	de 01       	movw	r26, r28
     aca:	a9 5b       	subi	r26, 0xB9	; 185
     acc:	bf 4f       	sbci	r27, 0xFF	; 255
     ace:	fe 01       	movw	r30, r28
     ad0:	e5 5b       	subi	r30, 0xB5	; 181
     ad2:	ff 4f       	sbci	r31, 0xFF	; 255
     ad4:	80 81       	ld	r24, Z
     ad6:	91 81       	ldd	r25, Z+1	; 0x01
     ad8:	8d 93       	st	X+, r24
     ada:	9c 93       	st	X, r25
     adc:	fe 01       	movw	r30, r28
     ade:	e9 5b       	subi	r30, 0xB9	; 185
     ae0:	ff 4f       	sbci	r31, 0xFF	; 255
     ae2:	80 81       	ld	r24, Z
     ae4:	91 81       	ldd	r25, Z+1	; 0x01
     ae6:	01 97       	sbiw	r24, 0x01	; 1
     ae8:	f1 f7       	brne	.-4      	; 0xae6 <lcd_set_4bit+0x47e>
     aea:	fe 01       	movw	r30, r28
     aec:	e9 5b       	subi	r30, 0xB9	; 185
     aee:	ff 4f       	sbci	r31, 0xFF	; 255
     af0:	91 83       	std	Z+1, r25	; 0x01
     af2:	80 83       	st	Z, r24

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     af4:	a8 e2       	ldi	r26, 0x28	; 40
     af6:	b0 e0       	ldi	r27, 0x00	; 0
     af8:	e8 e2       	ldi	r30, 0x28	; 40
     afa:	f0 e0       	ldi	r31, 0x00	; 0
     afc:	80 81       	ld	r24, Z
     afe:	8e 7f       	andi	r24, 0xFE	; 254
     b00:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     b02:	a8 e2       	ldi	r26, 0x28	; 40
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 e2       	ldi	r30, 0x28	; 40
     b08:	f0 e0       	ldi	r31, 0x00	; 0
     b0a:	80 81       	ld	r24, Z
     b0c:	8d 7f       	andi	r24, 0xFD	; 253
     b0e:	8c 93       	st	X, r24
	lcd_port = 0x30;				//Sending 3
     b10:	e8 e2       	ldi	r30, 0x28	; 40
     b12:	f0 e0       	ldi	r31, 0x00	; 0
     b14:	80 e3       	ldi	r24, 0x30	; 48
     b16:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     b18:	a8 e2       	ldi	r26, 0x28	; 40
     b1a:	b0 e0       	ldi	r27, 0x00	; 0
     b1c:	e8 e2       	ldi	r30, 0x28	; 40
     b1e:	f0 e0       	ldi	r31, 0x00	; 0
     b20:	80 81       	ld	r24, Z
     b22:	84 60       	ori	r24, 0x04	; 4
     b24:	8c 93       	st	X, r24
     b26:	fe 01       	movw	r30, r28
     b28:	ed 5b       	subi	r30, 0xBD	; 189
     b2a:	ff 4f       	sbci	r31, 0xFF	; 255
     b2c:	80 e0       	ldi	r24, 0x00	; 0
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	a0 ea       	ldi	r26, 0xA0	; 160
     b32:	b0 e4       	ldi	r27, 0x40	; 64
     b34:	80 83       	st	Z, r24
     b36:	91 83       	std	Z+1, r25	; 0x01
     b38:	a2 83       	std	Z+2, r26	; 0x02
     b3a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b3c:	8e 01       	movw	r16, r28
     b3e:	01 5c       	subi	r16, 0xC1	; 193
     b40:	1f 4f       	sbci	r17, 0xFF	; 255
     b42:	fe 01       	movw	r30, r28
     b44:	ed 5b       	subi	r30, 0xBD	; 189
     b46:	ff 4f       	sbci	r31, 0xFF	; 255
     b48:	60 81       	ld	r22, Z
     b4a:	71 81       	ldd	r23, Z+1	; 0x01
     b4c:	82 81       	ldd	r24, Z+2	; 0x02
     b4e:	93 81       	ldd	r25, Z+3	; 0x03
     b50:	2d ec       	ldi	r18, 0xCD	; 205
     b52:	3c ec       	ldi	r19, 0xCC	; 204
     b54:	4c e2       	ldi	r20, 0x2C	; 44
     b56:	55 e4       	ldi	r21, 0x45	; 69
     b58:	0e 94 1f 14 	call	0x283e	; 0x283e <__mulsf3>
     b5c:	dc 01       	movw	r26, r24
     b5e:	cb 01       	movw	r24, r22
     b60:	f8 01       	movw	r30, r16
     b62:	80 83       	st	Z, r24
     b64:	91 83       	std	Z+1, r25	; 0x01
     b66:	a2 83       	std	Z+2, r26	; 0x02
     b68:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     b6a:	fe 01       	movw	r30, r28
     b6c:	ff 96       	adiw	r30, 0x3f	; 63
     b6e:	60 81       	ld	r22, Z
     b70:	71 81       	ldd	r23, Z+1	; 0x01
     b72:	82 81       	ldd	r24, Z+2	; 0x02
     b74:	93 81       	ldd	r25, Z+3	; 0x03
     b76:	20 e0       	ldi	r18, 0x00	; 0
     b78:	30 e0       	ldi	r19, 0x00	; 0
     b7a:	40 e8       	ldi	r20, 0x80	; 128
     b7c:	5f e3       	ldi	r21, 0x3F	; 63
     b7e:	0e 94 25 16 	call	0x2c4a	; 0x2c4a <__ltsf2>
     b82:	88 23       	and	r24, r24
     b84:	2c f4       	brge	.+10     	; 0xb90 <lcd_set_4bit+0x528>
		__ticks = 1;
     b86:	81 e0       	ldi	r24, 0x01	; 1
     b88:	90 e0       	ldi	r25, 0x00	; 0
     b8a:	9e af       	std	Y+62, r25	; 0x3e
     b8c:	8d af       	std	Y+61, r24	; 0x3d
     b8e:	46 c0       	rjmp	.+140    	; 0xc1c <lcd_set_4bit+0x5b4>
	else if (__tmp > 65535)
     b90:	fe 01       	movw	r30, r28
     b92:	ff 96       	adiw	r30, 0x3f	; 63
     b94:	60 81       	ld	r22, Z
     b96:	71 81       	ldd	r23, Z+1	; 0x01
     b98:	82 81       	ldd	r24, Z+2	; 0x02
     b9a:	93 81       	ldd	r25, Z+3	; 0x03
     b9c:	20 e0       	ldi	r18, 0x00	; 0
     b9e:	3f ef       	ldi	r19, 0xFF	; 255
     ba0:	4f e7       	ldi	r20, 0x7F	; 127
     ba2:	57 e4       	ldi	r21, 0x47	; 71
     ba4:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <__gtsf2>
     ba8:	18 16       	cp	r1, r24
     baa:	64 f5       	brge	.+88     	; 0xc04 <lcd_set_4bit+0x59c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bac:	fe 01       	movw	r30, r28
     bae:	ed 5b       	subi	r30, 0xBD	; 189
     bb0:	ff 4f       	sbci	r31, 0xFF	; 255
     bb2:	60 81       	ld	r22, Z
     bb4:	71 81       	ldd	r23, Z+1	; 0x01
     bb6:	82 81       	ldd	r24, Z+2	; 0x02
     bb8:	93 81       	ldd	r25, Z+3	; 0x03
     bba:	20 e0       	ldi	r18, 0x00	; 0
     bbc:	30 e0       	ldi	r19, 0x00	; 0
     bbe:	40 e2       	ldi	r20, 0x20	; 32
     bc0:	51 e4       	ldi	r21, 0x41	; 65
     bc2:	0e 94 1f 14 	call	0x283e	; 0x283e <__mulsf3>
     bc6:	dc 01       	movw	r26, r24
     bc8:	cb 01       	movw	r24, r22
     bca:	bc 01       	movw	r22, r24
     bcc:	cd 01       	movw	r24, r26
     bce:	0e 94 49 12 	call	0x2492	; 0x2492 <__fixunssfsi>
     bd2:	dc 01       	movw	r26, r24
     bd4:	cb 01       	movw	r24, r22
     bd6:	9e af       	std	Y+62, r25	; 0x3e
     bd8:	8d af       	std	Y+61, r24	; 0x3d
     bda:	0f c0       	rjmp	.+30     	; 0xbfa <lcd_set_4bit+0x592>
     bdc:	84 e1       	ldi	r24, 0x14	; 20
     bde:	91 e0       	ldi	r25, 0x01	; 1
     be0:	9c af       	std	Y+60, r25	; 0x3c
     be2:	8b af       	std	Y+59, r24	; 0x3b
     be4:	8b ad       	ldd	r24, Y+59	; 0x3b
     be6:	9c ad       	ldd	r25, Y+60	; 0x3c
     be8:	01 97       	sbiw	r24, 0x01	; 1
     bea:	f1 f7       	brne	.-4      	; 0xbe8 <lcd_set_4bit+0x580>
     bec:	9c af       	std	Y+60, r25	; 0x3c
     bee:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     bf0:	8d ad       	ldd	r24, Y+61	; 0x3d
     bf2:	9e ad       	ldd	r25, Y+62	; 0x3e
     bf4:	01 97       	sbiw	r24, 0x01	; 1
     bf6:	9e af       	std	Y+62, r25	; 0x3e
     bf8:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     bfa:	8d ad       	ldd	r24, Y+61	; 0x3d
     bfc:	9e ad       	ldd	r25, Y+62	; 0x3e
     bfe:	00 97       	sbiw	r24, 0x00	; 0
     c00:	69 f7       	brne	.-38     	; 0xbdc <lcd_set_4bit+0x574>
     c02:	16 c0       	rjmp	.+44     	; 0xc30 <lcd_set_4bit+0x5c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c04:	fe 01       	movw	r30, r28
     c06:	ff 96       	adiw	r30, 0x3f	; 63
     c08:	60 81       	ld	r22, Z
     c0a:	71 81       	ldd	r23, Z+1	; 0x01
     c0c:	82 81       	ldd	r24, Z+2	; 0x02
     c0e:	93 81       	ldd	r25, Z+3	; 0x03
     c10:	0e 94 49 12 	call	0x2492	; 0x2492 <__fixunssfsi>
     c14:	dc 01       	movw	r26, r24
     c16:	cb 01       	movw	r24, r22
     c18:	9e af       	std	Y+62, r25	; 0x3e
     c1a:	8d af       	std	Y+61, r24	; 0x3d
     c1c:	8d ad       	ldd	r24, Y+61	; 0x3d
     c1e:	9e ad       	ldd	r25, Y+62	; 0x3e
     c20:	9a af       	std	Y+58, r25	; 0x3a
     c22:	89 af       	std	Y+57, r24	; 0x39
     c24:	89 ad       	ldd	r24, Y+57	; 0x39
     c26:	9a ad       	ldd	r25, Y+58	; 0x3a
     c28:	01 97       	sbiw	r24, 0x01	; 1
     c2a:	f1 f7       	brne	.-4      	; 0xc28 <lcd_set_4bit+0x5c0>
     c2c:	9a af       	std	Y+58, r25	; 0x3a
     c2e:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     c30:	a8 e2       	ldi	r26, 0x28	; 40
     c32:	b0 e0       	ldi	r27, 0x00	; 0
     c34:	e8 e2       	ldi	r30, 0x28	; 40
     c36:	f0 e0       	ldi	r31, 0x00	; 0
     c38:	80 81       	ld	r24, Z
     c3a:	8b 7f       	andi	r24, 0xFB	; 251
     c3c:	8c 93       	st	X, r24
     c3e:	80 e0       	ldi	r24, 0x00	; 0
     c40:	90 e0       	ldi	r25, 0x00	; 0
     c42:	a0 e8       	ldi	r26, 0x80	; 128
     c44:	bf e3       	ldi	r27, 0x3F	; 63
     c46:	8d ab       	std	Y+53, r24	; 0x35
     c48:	9e ab       	std	Y+54, r25	; 0x36
     c4a:	af ab       	std	Y+55, r26	; 0x37
     c4c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c4e:	6d a9       	ldd	r22, Y+53	; 0x35
     c50:	7e a9       	ldd	r23, Y+54	; 0x36
     c52:	8f a9       	ldd	r24, Y+55	; 0x37
     c54:	98 ad       	ldd	r25, Y+56	; 0x38
     c56:	2d ec       	ldi	r18, 0xCD	; 205
     c58:	3c ec       	ldi	r19, 0xCC	; 204
     c5a:	4c e2       	ldi	r20, 0x2C	; 44
     c5c:	55 e4       	ldi	r21, 0x45	; 69
     c5e:	0e 94 1f 14 	call	0x283e	; 0x283e <__mulsf3>
     c62:	dc 01       	movw	r26, r24
     c64:	cb 01       	movw	r24, r22
     c66:	89 ab       	std	Y+49, r24	; 0x31
     c68:	9a ab       	std	Y+50, r25	; 0x32
     c6a:	ab ab       	std	Y+51, r26	; 0x33
     c6c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     c6e:	69 a9       	ldd	r22, Y+49	; 0x31
     c70:	7a a9       	ldd	r23, Y+50	; 0x32
     c72:	8b a9       	ldd	r24, Y+51	; 0x33
     c74:	9c a9       	ldd	r25, Y+52	; 0x34
     c76:	20 e0       	ldi	r18, 0x00	; 0
     c78:	30 e0       	ldi	r19, 0x00	; 0
     c7a:	40 e8       	ldi	r20, 0x80	; 128
     c7c:	5f e3       	ldi	r21, 0x3F	; 63
     c7e:	0e 94 25 16 	call	0x2c4a	; 0x2c4a <__ltsf2>
     c82:	88 23       	and	r24, r24
     c84:	2c f4       	brge	.+10     	; 0xc90 <lcd_set_4bit+0x628>
		__ticks = 1;
     c86:	81 e0       	ldi	r24, 0x01	; 1
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	98 ab       	std	Y+48, r25	; 0x30
     c8c:	8f a7       	std	Y+47, r24	; 0x2f
     c8e:	3f c0       	rjmp	.+126    	; 0xd0e <lcd_set_4bit+0x6a6>
	else if (__tmp > 65535)
     c90:	69 a9       	ldd	r22, Y+49	; 0x31
     c92:	7a a9       	ldd	r23, Y+50	; 0x32
     c94:	8b a9       	ldd	r24, Y+51	; 0x33
     c96:	9c a9       	ldd	r25, Y+52	; 0x34
     c98:	20 e0       	ldi	r18, 0x00	; 0
     c9a:	3f ef       	ldi	r19, 0xFF	; 255
     c9c:	4f e7       	ldi	r20, 0x7F	; 127
     c9e:	57 e4       	ldi	r21, 0x47	; 71
     ca0:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <__gtsf2>
     ca4:	18 16       	cp	r1, r24
     ca6:	4c f5       	brge	.+82     	; 0xcfa <lcd_set_4bit+0x692>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ca8:	6d a9       	ldd	r22, Y+53	; 0x35
     caa:	7e a9       	ldd	r23, Y+54	; 0x36
     cac:	8f a9       	ldd	r24, Y+55	; 0x37
     cae:	98 ad       	ldd	r25, Y+56	; 0x38
     cb0:	20 e0       	ldi	r18, 0x00	; 0
     cb2:	30 e0       	ldi	r19, 0x00	; 0
     cb4:	40 e2       	ldi	r20, 0x20	; 32
     cb6:	51 e4       	ldi	r21, 0x41	; 65
     cb8:	0e 94 1f 14 	call	0x283e	; 0x283e <__mulsf3>
     cbc:	dc 01       	movw	r26, r24
     cbe:	cb 01       	movw	r24, r22
     cc0:	bc 01       	movw	r22, r24
     cc2:	cd 01       	movw	r24, r26
     cc4:	0e 94 49 12 	call	0x2492	; 0x2492 <__fixunssfsi>
     cc8:	dc 01       	movw	r26, r24
     cca:	cb 01       	movw	r24, r22
     ccc:	98 ab       	std	Y+48, r25	; 0x30
     cce:	8f a7       	std	Y+47, r24	; 0x2f
     cd0:	0f c0       	rjmp	.+30     	; 0xcf0 <lcd_set_4bit+0x688>
     cd2:	84 e1       	ldi	r24, 0x14	; 20
     cd4:	91 e0       	ldi	r25, 0x01	; 1
     cd6:	9e a7       	std	Y+46, r25	; 0x2e
     cd8:	8d a7       	std	Y+45, r24	; 0x2d
     cda:	8d a5       	ldd	r24, Y+45	; 0x2d
     cdc:	9e a5       	ldd	r25, Y+46	; 0x2e
     cde:	01 97       	sbiw	r24, 0x01	; 1
     ce0:	f1 f7       	brne	.-4      	; 0xcde <lcd_set_4bit+0x676>
     ce2:	9e a7       	std	Y+46, r25	; 0x2e
     ce4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ce6:	8f a5       	ldd	r24, Y+47	; 0x2f
     ce8:	98 a9       	ldd	r25, Y+48	; 0x30
     cea:	01 97       	sbiw	r24, 0x01	; 1
     cec:	98 ab       	std	Y+48, r25	; 0x30
     cee:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     cf0:	8f a5       	ldd	r24, Y+47	; 0x2f
     cf2:	98 a9       	ldd	r25, Y+48	; 0x30
     cf4:	00 97       	sbiw	r24, 0x00	; 0
     cf6:	69 f7       	brne	.-38     	; 0xcd2 <lcd_set_4bit+0x66a>
     cf8:	14 c0       	rjmp	.+40     	; 0xd22 <lcd_set_4bit+0x6ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     cfa:	69 a9       	ldd	r22, Y+49	; 0x31
     cfc:	7a a9       	ldd	r23, Y+50	; 0x32
     cfe:	8b a9       	ldd	r24, Y+51	; 0x33
     d00:	9c a9       	ldd	r25, Y+52	; 0x34
     d02:	0e 94 49 12 	call	0x2492	; 0x2492 <__fixunssfsi>
     d06:	dc 01       	movw	r26, r24
     d08:	cb 01       	movw	r24, r22
     d0a:	98 ab       	std	Y+48, r25	; 0x30
     d0c:	8f a7       	std	Y+47, r24	; 0x2f
     d0e:	8f a5       	ldd	r24, Y+47	; 0x2f
     d10:	98 a9       	ldd	r25, Y+48	; 0x30
     d12:	9c a7       	std	Y+44, r25	; 0x2c
     d14:	8b a7       	std	Y+43, r24	; 0x2b
     d16:	8b a5       	ldd	r24, Y+43	; 0x2b
     d18:	9c a5       	ldd	r25, Y+44	; 0x2c
     d1a:	01 97       	sbiw	r24, 0x01	; 1
     d1c:	f1 f7       	brne	.-4      	; 0xd1a <lcd_set_4bit+0x6b2>
     d1e:	9c a7       	std	Y+44, r25	; 0x2c
     d20:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     d22:	a8 e2       	ldi	r26, 0x28	; 40
     d24:	b0 e0       	ldi	r27, 0x00	; 0
     d26:	e8 e2       	ldi	r30, 0x28	; 40
     d28:	f0 e0       	ldi	r31, 0x00	; 0
     d2a:	80 81       	ld	r24, Z
     d2c:	8e 7f       	andi	r24, 0xFE	; 254
     d2e:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     d30:	a8 e2       	ldi	r26, 0x28	; 40
     d32:	b0 e0       	ldi	r27, 0x00	; 0
     d34:	e8 e2       	ldi	r30, 0x28	; 40
     d36:	f0 e0       	ldi	r31, 0x00	; 0
     d38:	80 81       	ld	r24, Z
     d3a:	8d 7f       	andi	r24, 0xFD	; 253
     d3c:	8c 93       	st	X, r24
	lcd_port = 0x30;				//Sending 3
     d3e:	e8 e2       	ldi	r30, 0x28	; 40
     d40:	f0 e0       	ldi	r31, 0x00	; 0
     d42:	80 e3       	ldi	r24, 0x30	; 48
     d44:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     d46:	a8 e2       	ldi	r26, 0x28	; 40
     d48:	b0 e0       	ldi	r27, 0x00	; 0
     d4a:	e8 e2       	ldi	r30, 0x28	; 40
     d4c:	f0 e0       	ldi	r31, 0x00	; 0
     d4e:	80 81       	ld	r24, Z
     d50:	84 60       	ori	r24, 0x04	; 4
     d52:	8c 93       	st	X, r24
     d54:	80 e0       	ldi	r24, 0x00	; 0
     d56:	90 e0       	ldi	r25, 0x00	; 0
     d58:	a0 ea       	ldi	r26, 0xA0	; 160
     d5a:	b0 e4       	ldi	r27, 0x40	; 64
     d5c:	8f a3       	std	Y+39, r24	; 0x27
     d5e:	98 a7       	std	Y+40, r25	; 0x28
     d60:	a9 a7       	std	Y+41, r26	; 0x29
     d62:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d64:	6f a1       	ldd	r22, Y+39	; 0x27
     d66:	78 a5       	ldd	r23, Y+40	; 0x28
     d68:	89 a5       	ldd	r24, Y+41	; 0x29
     d6a:	9a a5       	ldd	r25, Y+42	; 0x2a
     d6c:	2d ec       	ldi	r18, 0xCD	; 205
     d6e:	3c ec       	ldi	r19, 0xCC	; 204
     d70:	4c e2       	ldi	r20, 0x2C	; 44
     d72:	55 e4       	ldi	r21, 0x45	; 69
     d74:	0e 94 1f 14 	call	0x283e	; 0x283e <__mulsf3>
     d78:	dc 01       	movw	r26, r24
     d7a:	cb 01       	movw	r24, r22
     d7c:	8b a3       	std	Y+35, r24	; 0x23
     d7e:	9c a3       	std	Y+36, r25	; 0x24
     d80:	ad a3       	std	Y+37, r26	; 0x25
     d82:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     d84:	6b a1       	ldd	r22, Y+35	; 0x23
     d86:	7c a1       	ldd	r23, Y+36	; 0x24
     d88:	8d a1       	ldd	r24, Y+37	; 0x25
     d8a:	9e a1       	ldd	r25, Y+38	; 0x26
     d8c:	20 e0       	ldi	r18, 0x00	; 0
     d8e:	30 e0       	ldi	r19, 0x00	; 0
     d90:	40 e8       	ldi	r20, 0x80	; 128
     d92:	5f e3       	ldi	r21, 0x3F	; 63
     d94:	0e 94 25 16 	call	0x2c4a	; 0x2c4a <__ltsf2>
     d98:	88 23       	and	r24, r24
     d9a:	2c f4       	brge	.+10     	; 0xda6 <lcd_set_4bit+0x73e>
		__ticks = 1;
     d9c:	81 e0       	ldi	r24, 0x01	; 1
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	9a a3       	std	Y+34, r25	; 0x22
     da2:	89 a3       	std	Y+33, r24	; 0x21
     da4:	3f c0       	rjmp	.+126    	; 0xe24 <lcd_set_4bit+0x7bc>
	else if (__tmp > 65535)
     da6:	6b a1       	ldd	r22, Y+35	; 0x23
     da8:	7c a1       	ldd	r23, Y+36	; 0x24
     daa:	8d a1       	ldd	r24, Y+37	; 0x25
     dac:	9e a1       	ldd	r25, Y+38	; 0x26
     dae:	20 e0       	ldi	r18, 0x00	; 0
     db0:	3f ef       	ldi	r19, 0xFF	; 255
     db2:	4f e7       	ldi	r20, 0x7F	; 127
     db4:	57 e4       	ldi	r21, 0x47	; 71
     db6:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <__gtsf2>
     dba:	18 16       	cp	r1, r24
     dbc:	4c f5       	brge	.+82     	; 0xe10 <lcd_set_4bit+0x7a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     dbe:	6f a1       	ldd	r22, Y+39	; 0x27
     dc0:	78 a5       	ldd	r23, Y+40	; 0x28
     dc2:	89 a5       	ldd	r24, Y+41	; 0x29
     dc4:	9a a5       	ldd	r25, Y+42	; 0x2a
     dc6:	20 e0       	ldi	r18, 0x00	; 0
     dc8:	30 e0       	ldi	r19, 0x00	; 0
     dca:	40 e2       	ldi	r20, 0x20	; 32
     dcc:	51 e4       	ldi	r21, 0x41	; 65
     dce:	0e 94 1f 14 	call	0x283e	; 0x283e <__mulsf3>
     dd2:	dc 01       	movw	r26, r24
     dd4:	cb 01       	movw	r24, r22
     dd6:	bc 01       	movw	r22, r24
     dd8:	cd 01       	movw	r24, r26
     dda:	0e 94 49 12 	call	0x2492	; 0x2492 <__fixunssfsi>
     dde:	dc 01       	movw	r26, r24
     de0:	cb 01       	movw	r24, r22
     de2:	9a a3       	std	Y+34, r25	; 0x22
     de4:	89 a3       	std	Y+33, r24	; 0x21
     de6:	0f c0       	rjmp	.+30     	; 0xe06 <lcd_set_4bit+0x79e>
     de8:	84 e1       	ldi	r24, 0x14	; 20
     dea:	91 e0       	ldi	r25, 0x01	; 1
     dec:	98 a3       	std	Y+32, r25	; 0x20
     dee:	8f 8f       	std	Y+31, r24	; 0x1f
     df0:	8f 8d       	ldd	r24, Y+31	; 0x1f
     df2:	98 a1       	ldd	r25, Y+32	; 0x20
     df4:	01 97       	sbiw	r24, 0x01	; 1
     df6:	f1 f7       	brne	.-4      	; 0xdf4 <lcd_set_4bit+0x78c>
     df8:	98 a3       	std	Y+32, r25	; 0x20
     dfa:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dfc:	89 a1       	ldd	r24, Y+33	; 0x21
     dfe:	9a a1       	ldd	r25, Y+34	; 0x22
     e00:	01 97       	sbiw	r24, 0x01	; 1
     e02:	9a a3       	std	Y+34, r25	; 0x22
     e04:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e06:	89 a1       	ldd	r24, Y+33	; 0x21
     e08:	9a a1       	ldd	r25, Y+34	; 0x22
     e0a:	00 97       	sbiw	r24, 0x00	; 0
     e0c:	69 f7       	brne	.-38     	; 0xde8 <lcd_set_4bit+0x780>
     e0e:	14 c0       	rjmp	.+40     	; 0xe38 <lcd_set_4bit+0x7d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e10:	6b a1       	ldd	r22, Y+35	; 0x23
     e12:	7c a1       	ldd	r23, Y+36	; 0x24
     e14:	8d a1       	ldd	r24, Y+37	; 0x25
     e16:	9e a1       	ldd	r25, Y+38	; 0x26
     e18:	0e 94 49 12 	call	0x2492	; 0x2492 <__fixunssfsi>
     e1c:	dc 01       	movw	r26, r24
     e1e:	cb 01       	movw	r24, r22
     e20:	9a a3       	std	Y+34, r25	; 0x22
     e22:	89 a3       	std	Y+33, r24	; 0x21
     e24:	89 a1       	ldd	r24, Y+33	; 0x21
     e26:	9a a1       	ldd	r25, Y+34	; 0x22
     e28:	9e 8f       	std	Y+30, r25	; 0x1e
     e2a:	8d 8f       	std	Y+29, r24	; 0x1d
     e2c:	8d 8d       	ldd	r24, Y+29	; 0x1d
     e2e:	9e 8d       	ldd	r25, Y+30	; 0x1e
     e30:	01 97       	sbiw	r24, 0x01	; 1
     e32:	f1 f7       	brne	.-4      	; 0xe30 <lcd_set_4bit+0x7c8>
     e34:	9e 8f       	std	Y+30, r25	; 0x1e
     e36:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     e38:	a8 e2       	ldi	r26, 0x28	; 40
     e3a:	b0 e0       	ldi	r27, 0x00	; 0
     e3c:	e8 e2       	ldi	r30, 0x28	; 40
     e3e:	f0 e0       	ldi	r31, 0x00	; 0
     e40:	80 81       	ld	r24, Z
     e42:	8b 7f       	andi	r24, 0xFB	; 251
     e44:	8c 93       	st	X, r24
     e46:	80 e0       	ldi	r24, 0x00	; 0
     e48:	90 e0       	ldi	r25, 0x00	; 0
     e4a:	a0 e8       	ldi	r26, 0x80	; 128
     e4c:	bf e3       	ldi	r27, 0x3F	; 63
     e4e:	89 8f       	std	Y+25, r24	; 0x19
     e50:	9a 8f       	std	Y+26, r25	; 0x1a
     e52:	ab 8f       	std	Y+27, r26	; 0x1b
     e54:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e56:	69 8d       	ldd	r22, Y+25	; 0x19
     e58:	7a 8d       	ldd	r23, Y+26	; 0x1a
     e5a:	8b 8d       	ldd	r24, Y+27	; 0x1b
     e5c:	9c 8d       	ldd	r25, Y+28	; 0x1c
     e5e:	2d ec       	ldi	r18, 0xCD	; 205
     e60:	3c ec       	ldi	r19, 0xCC	; 204
     e62:	4c e2       	ldi	r20, 0x2C	; 44
     e64:	55 e4       	ldi	r21, 0x45	; 69
     e66:	0e 94 1f 14 	call	0x283e	; 0x283e <__mulsf3>
     e6a:	dc 01       	movw	r26, r24
     e6c:	cb 01       	movw	r24, r22
     e6e:	8d 8b       	std	Y+21, r24	; 0x15
     e70:	9e 8b       	std	Y+22, r25	; 0x16
     e72:	af 8b       	std	Y+23, r26	; 0x17
     e74:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     e76:	6d 89       	ldd	r22, Y+21	; 0x15
     e78:	7e 89       	ldd	r23, Y+22	; 0x16
     e7a:	8f 89       	ldd	r24, Y+23	; 0x17
     e7c:	98 8d       	ldd	r25, Y+24	; 0x18
     e7e:	20 e0       	ldi	r18, 0x00	; 0
     e80:	30 e0       	ldi	r19, 0x00	; 0
     e82:	40 e8       	ldi	r20, 0x80	; 128
     e84:	5f e3       	ldi	r21, 0x3F	; 63
     e86:	0e 94 25 16 	call	0x2c4a	; 0x2c4a <__ltsf2>
     e8a:	88 23       	and	r24, r24
     e8c:	2c f4       	brge	.+10     	; 0xe98 <lcd_set_4bit+0x830>
		__ticks = 1;
     e8e:	81 e0       	ldi	r24, 0x01	; 1
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	9c 8b       	std	Y+20, r25	; 0x14
     e94:	8b 8b       	std	Y+19, r24	; 0x13
     e96:	3f c0       	rjmp	.+126    	; 0xf16 <lcd_set_4bit+0x8ae>
	else if (__tmp > 65535)
     e98:	6d 89       	ldd	r22, Y+21	; 0x15
     e9a:	7e 89       	ldd	r23, Y+22	; 0x16
     e9c:	8f 89       	ldd	r24, Y+23	; 0x17
     e9e:	98 8d       	ldd	r25, Y+24	; 0x18
     ea0:	20 e0       	ldi	r18, 0x00	; 0
     ea2:	3f ef       	ldi	r19, 0xFF	; 255
     ea4:	4f e7       	ldi	r20, 0x7F	; 127
     ea6:	57 e4       	ldi	r21, 0x47	; 71
     ea8:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <__gtsf2>
     eac:	18 16       	cp	r1, r24
     eae:	4c f5       	brge	.+82     	; 0xf02 <lcd_set_4bit+0x89a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     eb0:	69 8d       	ldd	r22, Y+25	; 0x19
     eb2:	7a 8d       	ldd	r23, Y+26	; 0x1a
     eb4:	8b 8d       	ldd	r24, Y+27	; 0x1b
     eb6:	9c 8d       	ldd	r25, Y+28	; 0x1c
     eb8:	20 e0       	ldi	r18, 0x00	; 0
     eba:	30 e0       	ldi	r19, 0x00	; 0
     ebc:	40 e2       	ldi	r20, 0x20	; 32
     ebe:	51 e4       	ldi	r21, 0x41	; 65
     ec0:	0e 94 1f 14 	call	0x283e	; 0x283e <__mulsf3>
     ec4:	dc 01       	movw	r26, r24
     ec6:	cb 01       	movw	r24, r22
     ec8:	bc 01       	movw	r22, r24
     eca:	cd 01       	movw	r24, r26
     ecc:	0e 94 49 12 	call	0x2492	; 0x2492 <__fixunssfsi>
     ed0:	dc 01       	movw	r26, r24
     ed2:	cb 01       	movw	r24, r22
     ed4:	9c 8b       	std	Y+20, r25	; 0x14
     ed6:	8b 8b       	std	Y+19, r24	; 0x13
     ed8:	0f c0       	rjmp	.+30     	; 0xef8 <lcd_set_4bit+0x890>
     eda:	84 e1       	ldi	r24, 0x14	; 20
     edc:	91 e0       	ldi	r25, 0x01	; 1
     ede:	9a 8b       	std	Y+18, r25	; 0x12
     ee0:	89 8b       	std	Y+17, r24	; 0x11
     ee2:	89 89       	ldd	r24, Y+17	; 0x11
     ee4:	9a 89       	ldd	r25, Y+18	; 0x12
     ee6:	01 97       	sbiw	r24, 0x01	; 1
     ee8:	f1 f7       	brne	.-4      	; 0xee6 <lcd_set_4bit+0x87e>
     eea:	9a 8b       	std	Y+18, r25	; 0x12
     eec:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     eee:	8b 89       	ldd	r24, Y+19	; 0x13
     ef0:	9c 89       	ldd	r25, Y+20	; 0x14
     ef2:	01 97       	sbiw	r24, 0x01	; 1
     ef4:	9c 8b       	std	Y+20, r25	; 0x14
     ef6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ef8:	8b 89       	ldd	r24, Y+19	; 0x13
     efa:	9c 89       	ldd	r25, Y+20	; 0x14
     efc:	00 97       	sbiw	r24, 0x00	; 0
     efe:	69 f7       	brne	.-38     	; 0xeda <lcd_set_4bit+0x872>
     f00:	14 c0       	rjmp	.+40     	; 0xf2a <lcd_set_4bit+0x8c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f02:	6d 89       	ldd	r22, Y+21	; 0x15
     f04:	7e 89       	ldd	r23, Y+22	; 0x16
     f06:	8f 89       	ldd	r24, Y+23	; 0x17
     f08:	98 8d       	ldd	r25, Y+24	; 0x18
     f0a:	0e 94 49 12 	call	0x2492	; 0x2492 <__fixunssfsi>
     f0e:	dc 01       	movw	r26, r24
     f10:	cb 01       	movw	r24, r22
     f12:	9c 8b       	std	Y+20, r25	; 0x14
     f14:	8b 8b       	std	Y+19, r24	; 0x13
     f16:	8b 89       	ldd	r24, Y+19	; 0x13
     f18:	9c 89       	ldd	r25, Y+20	; 0x14
     f1a:	98 8b       	std	Y+16, r25	; 0x10
     f1c:	8f 87       	std	Y+15, r24	; 0x0f
     f1e:	8f 85       	ldd	r24, Y+15	; 0x0f
     f20:	98 89       	ldd	r25, Y+16	; 0x10
     f22:	01 97       	sbiw	r24, 0x01	; 1
     f24:	f1 f7       	brne	.-4      	; 0xf22 <lcd_set_4bit+0x8ba>
     f26:	98 8b       	std	Y+16, r25	; 0x10
     f28:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     f2a:	a8 e2       	ldi	r26, 0x28	; 40
     f2c:	b0 e0       	ldi	r27, 0x00	; 0
     f2e:	e8 e2       	ldi	r30, 0x28	; 40
     f30:	f0 e0       	ldi	r31, 0x00	; 0
     f32:	80 81       	ld	r24, Z
     f34:	8e 7f       	andi	r24, 0xFE	; 254
     f36:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     f38:	a8 e2       	ldi	r26, 0x28	; 40
     f3a:	b0 e0       	ldi	r27, 0x00	; 0
     f3c:	e8 e2       	ldi	r30, 0x28	; 40
     f3e:	f0 e0       	ldi	r31, 0x00	; 0
     f40:	80 81       	ld	r24, Z
     f42:	8d 7f       	andi	r24, 0xFD	; 253
     f44:	8c 93       	st	X, r24
	lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
     f46:	e8 e2       	ldi	r30, 0x28	; 40
     f48:	f0 e0       	ldi	r31, 0x00	; 0
     f4a:	80 e2       	ldi	r24, 0x20	; 32
     f4c:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     f4e:	a8 e2       	ldi	r26, 0x28	; 40
     f50:	b0 e0       	ldi	r27, 0x00	; 0
     f52:	e8 e2       	ldi	r30, 0x28	; 40
     f54:	f0 e0       	ldi	r31, 0x00	; 0
     f56:	80 81       	ld	r24, Z
     f58:	84 60       	ori	r24, 0x04	; 4
     f5a:	8c 93       	st	X, r24
     f5c:	80 e0       	ldi	r24, 0x00	; 0
     f5e:	90 e0       	ldi	r25, 0x00	; 0
     f60:	a0 ea       	ldi	r26, 0xA0	; 160
     f62:	b0 e4       	ldi	r27, 0x40	; 64
     f64:	8b 87       	std	Y+11, r24	; 0x0b
     f66:	9c 87       	std	Y+12, r25	; 0x0c
     f68:	ad 87       	std	Y+13, r26	; 0x0d
     f6a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f6c:	6b 85       	ldd	r22, Y+11	; 0x0b
     f6e:	7c 85       	ldd	r23, Y+12	; 0x0c
     f70:	8d 85       	ldd	r24, Y+13	; 0x0d
     f72:	9e 85       	ldd	r25, Y+14	; 0x0e
     f74:	2d ec       	ldi	r18, 0xCD	; 205
     f76:	3c ec       	ldi	r19, 0xCC	; 204
     f78:	4c e2       	ldi	r20, 0x2C	; 44
     f7a:	55 e4       	ldi	r21, 0x45	; 69
     f7c:	0e 94 1f 14 	call	0x283e	; 0x283e <__mulsf3>
     f80:	dc 01       	movw	r26, r24
     f82:	cb 01       	movw	r24, r22
     f84:	8f 83       	std	Y+7, r24	; 0x07
     f86:	98 87       	std	Y+8, r25	; 0x08
     f88:	a9 87       	std	Y+9, r26	; 0x09
     f8a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     f8c:	6f 81       	ldd	r22, Y+7	; 0x07
     f8e:	78 85       	ldd	r23, Y+8	; 0x08
     f90:	89 85       	ldd	r24, Y+9	; 0x09
     f92:	9a 85       	ldd	r25, Y+10	; 0x0a
     f94:	20 e0       	ldi	r18, 0x00	; 0
     f96:	30 e0       	ldi	r19, 0x00	; 0
     f98:	40 e8       	ldi	r20, 0x80	; 128
     f9a:	5f e3       	ldi	r21, 0x3F	; 63
     f9c:	0e 94 25 16 	call	0x2c4a	; 0x2c4a <__ltsf2>
     fa0:	88 23       	and	r24, r24
     fa2:	2c f4       	brge	.+10     	; 0xfae <lcd_set_4bit+0x946>
		__ticks = 1;
     fa4:	81 e0       	ldi	r24, 0x01	; 1
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	9e 83       	std	Y+6, r25	; 0x06
     faa:	8d 83       	std	Y+5, r24	; 0x05
     fac:	3f c0       	rjmp	.+126    	; 0x102c <lcd_set_4bit+0x9c4>
	else if (__tmp > 65535)
     fae:	6f 81       	ldd	r22, Y+7	; 0x07
     fb0:	78 85       	ldd	r23, Y+8	; 0x08
     fb2:	89 85       	ldd	r24, Y+9	; 0x09
     fb4:	9a 85       	ldd	r25, Y+10	; 0x0a
     fb6:	20 e0       	ldi	r18, 0x00	; 0
     fb8:	3f ef       	ldi	r19, 0xFF	; 255
     fba:	4f e7       	ldi	r20, 0x7F	; 127
     fbc:	57 e4       	ldi	r21, 0x47	; 71
     fbe:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <__gtsf2>
     fc2:	18 16       	cp	r1, r24
     fc4:	4c f5       	brge	.+82     	; 0x1018 <lcd_set_4bit+0x9b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fc6:	6b 85       	ldd	r22, Y+11	; 0x0b
     fc8:	7c 85       	ldd	r23, Y+12	; 0x0c
     fca:	8d 85       	ldd	r24, Y+13	; 0x0d
     fcc:	9e 85       	ldd	r25, Y+14	; 0x0e
     fce:	20 e0       	ldi	r18, 0x00	; 0
     fd0:	30 e0       	ldi	r19, 0x00	; 0
     fd2:	40 e2       	ldi	r20, 0x20	; 32
     fd4:	51 e4       	ldi	r21, 0x41	; 65
     fd6:	0e 94 1f 14 	call	0x283e	; 0x283e <__mulsf3>
     fda:	dc 01       	movw	r26, r24
     fdc:	cb 01       	movw	r24, r22
     fde:	bc 01       	movw	r22, r24
     fe0:	cd 01       	movw	r24, r26
     fe2:	0e 94 49 12 	call	0x2492	; 0x2492 <__fixunssfsi>
     fe6:	dc 01       	movw	r26, r24
     fe8:	cb 01       	movw	r24, r22
     fea:	9e 83       	std	Y+6, r25	; 0x06
     fec:	8d 83       	std	Y+5, r24	; 0x05
     fee:	0f c0       	rjmp	.+30     	; 0x100e <lcd_set_4bit+0x9a6>
     ff0:	84 e1       	ldi	r24, 0x14	; 20
     ff2:	91 e0       	ldi	r25, 0x01	; 1
     ff4:	9c 83       	std	Y+4, r25	; 0x04
     ff6:	8b 83       	std	Y+3, r24	; 0x03
     ff8:	8b 81       	ldd	r24, Y+3	; 0x03
     ffa:	9c 81       	ldd	r25, Y+4	; 0x04
     ffc:	01 97       	sbiw	r24, 0x01	; 1
     ffe:	f1 f7       	brne	.-4      	; 0xffc <lcd_set_4bit+0x994>
    1000:	9c 83       	std	Y+4, r25	; 0x04
    1002:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1004:	8d 81       	ldd	r24, Y+5	; 0x05
    1006:	9e 81       	ldd	r25, Y+6	; 0x06
    1008:	01 97       	sbiw	r24, 0x01	; 1
    100a:	9e 83       	std	Y+6, r25	; 0x06
    100c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    100e:	8d 81       	ldd	r24, Y+5	; 0x05
    1010:	9e 81       	ldd	r25, Y+6	; 0x06
    1012:	00 97       	sbiw	r24, 0x00	; 0
    1014:	69 f7       	brne	.-38     	; 0xff0 <lcd_set_4bit+0x988>
    1016:	14 c0       	rjmp	.+40     	; 0x1040 <lcd_set_4bit+0x9d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1018:	6f 81       	ldd	r22, Y+7	; 0x07
    101a:	78 85       	ldd	r23, Y+8	; 0x08
    101c:	89 85       	ldd	r24, Y+9	; 0x09
    101e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1020:	0e 94 49 12 	call	0x2492	; 0x2492 <__fixunssfsi>
    1024:	dc 01       	movw	r26, r24
    1026:	cb 01       	movw	r24, r22
    1028:	9e 83       	std	Y+6, r25	; 0x06
    102a:	8d 83       	std	Y+5, r24	; 0x05
    102c:	8d 81       	ldd	r24, Y+5	; 0x05
    102e:	9e 81       	ldd	r25, Y+6	; 0x06
    1030:	9a 83       	std	Y+2, r25	; 0x02
    1032:	89 83       	std	Y+1, r24	; 0x01
    1034:	89 81       	ldd	r24, Y+1	; 0x01
    1036:	9a 81       	ldd	r25, Y+2	; 0x02
    1038:	01 97       	sbiw	r24, 0x01	; 1
    103a:	f1 f7       	brne	.-4      	; 0x1038 <lcd_set_4bit+0x9d0>
    103c:	9a 83       	std	Y+2, r25	; 0x02
    103e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
    1040:	a8 e2       	ldi	r26, 0x28	; 40
    1042:	b0 e0       	ldi	r27, 0x00	; 0
    1044:	e8 e2       	ldi	r30, 0x28	; 40
    1046:	f0 e0       	ldi	r31, 0x00	; 0
    1048:	80 81       	ld	r24, Z
    104a:	8b 7f       	andi	r24, 0xFB	; 251
    104c:	8c 93       	st	X, r24

	
}
    104e:	c0 59       	subi	r28, 0x90	; 144
    1050:	df 4f       	sbci	r29, 0xFF	; 255
    1052:	0f b6       	in	r0, 0x3f	; 63
    1054:	f8 94       	cli
    1056:	de bf       	out	0x3e, r29	; 62
    1058:	0f be       	out	0x3f, r0	; 63
    105a:	cd bf       	out	0x3d, r28	; 61
    105c:	cf 91       	pop	r28
    105e:	df 91       	pop	r29
    1060:	1f 91       	pop	r17
    1062:	0f 91       	pop	r16
    1064:	08 95       	ret

00001066 <lcd_init>:

/*****Function to Initialize LCD*****/
void lcd_init()
{
    1066:	df 93       	push	r29
    1068:	cf 93       	push	r28
    106a:	cd b7       	in	r28, 0x3d	; 61
    106c:	de b7       	in	r29, 0x3e	; 62
    106e:	2e 97       	sbiw	r28, 0x0e	; 14
    1070:	0f b6       	in	r0, 0x3f	; 63
    1072:	f8 94       	cli
    1074:	de bf       	out	0x3e, r29	; 62
    1076:	0f be       	out	0x3f, r0	; 63
    1078:	cd bf       	out	0x3d, r28	; 61
    107a:	80 e0       	ldi	r24, 0x00	; 0
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	a0 e8       	ldi	r26, 0x80	; 128
    1080:	bf e3       	ldi	r27, 0x3F	; 63
    1082:	8b 87       	std	Y+11, r24	; 0x0b
    1084:	9c 87       	std	Y+12, r25	; 0x0c
    1086:	ad 87       	std	Y+13, r26	; 0x0d
    1088:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    108a:	6b 85       	ldd	r22, Y+11	; 0x0b
    108c:	7c 85       	ldd	r23, Y+12	; 0x0c
    108e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1090:	9e 85       	ldd	r25, Y+14	; 0x0e
    1092:	2d ec       	ldi	r18, 0xCD	; 205
    1094:	3c ec       	ldi	r19, 0xCC	; 204
    1096:	4c e2       	ldi	r20, 0x2C	; 44
    1098:	55 e4       	ldi	r21, 0x45	; 69
    109a:	0e 94 1f 14 	call	0x283e	; 0x283e <__mulsf3>
    109e:	dc 01       	movw	r26, r24
    10a0:	cb 01       	movw	r24, r22
    10a2:	8f 83       	std	Y+7, r24	; 0x07
    10a4:	98 87       	std	Y+8, r25	; 0x08
    10a6:	a9 87       	std	Y+9, r26	; 0x09
    10a8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    10aa:	6f 81       	ldd	r22, Y+7	; 0x07
    10ac:	78 85       	ldd	r23, Y+8	; 0x08
    10ae:	89 85       	ldd	r24, Y+9	; 0x09
    10b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    10b2:	20 e0       	ldi	r18, 0x00	; 0
    10b4:	30 e0       	ldi	r19, 0x00	; 0
    10b6:	40 e8       	ldi	r20, 0x80	; 128
    10b8:	5f e3       	ldi	r21, 0x3F	; 63
    10ba:	0e 94 25 16 	call	0x2c4a	; 0x2c4a <__ltsf2>
    10be:	88 23       	and	r24, r24
    10c0:	2c f4       	brge	.+10     	; 0x10cc <lcd_init+0x66>
		__ticks = 1;
    10c2:	81 e0       	ldi	r24, 0x01	; 1
    10c4:	90 e0       	ldi	r25, 0x00	; 0
    10c6:	9e 83       	std	Y+6, r25	; 0x06
    10c8:	8d 83       	std	Y+5, r24	; 0x05
    10ca:	3f c0       	rjmp	.+126    	; 0x114a <lcd_init+0xe4>
	else if (__tmp > 65535)
    10cc:	6f 81       	ldd	r22, Y+7	; 0x07
    10ce:	78 85       	ldd	r23, Y+8	; 0x08
    10d0:	89 85       	ldd	r24, Y+9	; 0x09
    10d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    10d4:	20 e0       	ldi	r18, 0x00	; 0
    10d6:	3f ef       	ldi	r19, 0xFF	; 255
    10d8:	4f e7       	ldi	r20, 0x7F	; 127
    10da:	57 e4       	ldi	r21, 0x47	; 71
    10dc:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <__gtsf2>
    10e0:	18 16       	cp	r1, r24
    10e2:	4c f5       	brge	.+82     	; 0x1136 <lcd_init+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    10e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    10e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    10ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    10ec:	20 e0       	ldi	r18, 0x00	; 0
    10ee:	30 e0       	ldi	r19, 0x00	; 0
    10f0:	40 e2       	ldi	r20, 0x20	; 32
    10f2:	51 e4       	ldi	r21, 0x41	; 65
    10f4:	0e 94 1f 14 	call	0x283e	; 0x283e <__mulsf3>
    10f8:	dc 01       	movw	r26, r24
    10fa:	cb 01       	movw	r24, r22
    10fc:	bc 01       	movw	r22, r24
    10fe:	cd 01       	movw	r24, r26
    1100:	0e 94 49 12 	call	0x2492	; 0x2492 <__fixunssfsi>
    1104:	dc 01       	movw	r26, r24
    1106:	cb 01       	movw	r24, r22
    1108:	9e 83       	std	Y+6, r25	; 0x06
    110a:	8d 83       	std	Y+5, r24	; 0x05
    110c:	0f c0       	rjmp	.+30     	; 0x112c <lcd_init+0xc6>
    110e:	84 e1       	ldi	r24, 0x14	; 20
    1110:	91 e0       	ldi	r25, 0x01	; 1
    1112:	9c 83       	std	Y+4, r25	; 0x04
    1114:	8b 83       	std	Y+3, r24	; 0x03
    1116:	8b 81       	ldd	r24, Y+3	; 0x03
    1118:	9c 81       	ldd	r25, Y+4	; 0x04
    111a:	01 97       	sbiw	r24, 0x01	; 1
    111c:	f1 f7       	brne	.-4      	; 0x111a <lcd_init+0xb4>
    111e:	9c 83       	std	Y+4, r25	; 0x04
    1120:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1122:	8d 81       	ldd	r24, Y+5	; 0x05
    1124:	9e 81       	ldd	r25, Y+6	; 0x06
    1126:	01 97       	sbiw	r24, 0x01	; 1
    1128:	9e 83       	std	Y+6, r25	; 0x06
    112a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    112c:	8d 81       	ldd	r24, Y+5	; 0x05
    112e:	9e 81       	ldd	r25, Y+6	; 0x06
    1130:	00 97       	sbiw	r24, 0x00	; 0
    1132:	69 f7       	brne	.-38     	; 0x110e <lcd_init+0xa8>
    1134:	14 c0       	rjmp	.+40     	; 0x115e <lcd_init+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1136:	6f 81       	ldd	r22, Y+7	; 0x07
    1138:	78 85       	ldd	r23, Y+8	; 0x08
    113a:	89 85       	ldd	r24, Y+9	; 0x09
    113c:	9a 85       	ldd	r25, Y+10	; 0x0a
    113e:	0e 94 49 12 	call	0x2492	; 0x2492 <__fixunssfsi>
    1142:	dc 01       	movw	r26, r24
    1144:	cb 01       	movw	r24, r22
    1146:	9e 83       	std	Y+6, r25	; 0x06
    1148:	8d 83       	std	Y+5, r24	; 0x05
    114a:	8d 81       	ldd	r24, Y+5	; 0x05
    114c:	9e 81       	ldd	r25, Y+6	; 0x06
    114e:	9a 83       	std	Y+2, r25	; 0x02
    1150:	89 83       	std	Y+1, r24	; 0x01
    1152:	89 81       	ldd	r24, Y+1	; 0x01
    1154:	9a 81       	ldd	r25, Y+2	; 0x02
    1156:	01 97       	sbiw	r24, 0x01	; 1
    1158:	f1 f7       	brne	.-4      	; 0x1156 <lcd_init+0xf0>
    115a:	9a 83       	std	Y+2, r25	; 0x02
    115c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

	lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
    115e:	88 e2       	ldi	r24, 0x28	; 40
    1160:	0e 94 c7 08 	call	0x118e	; 0x118e <lcd_wr_command>
	lcd_wr_command(0x01);
    1164:	81 e0       	ldi	r24, 0x01	; 1
    1166:	0e 94 c7 08 	call	0x118e	; 0x118e <lcd_wr_command>
	lcd_wr_command(0x06);
    116a:	86 e0       	ldi	r24, 0x06	; 6
    116c:	0e 94 c7 08 	call	0x118e	; 0x118e <lcd_wr_command>
	lcd_wr_command(0x0E);
    1170:	8e e0       	ldi	r24, 0x0E	; 14
    1172:	0e 94 c7 08 	call	0x118e	; 0x118e <lcd_wr_command>
	lcd_wr_command(0x80);
    1176:	80 e8       	ldi	r24, 0x80	; 128
    1178:	0e 94 c7 08 	call	0x118e	; 0x118e <lcd_wr_command>
		
}
    117c:	2e 96       	adiw	r28, 0x0e	; 14
    117e:	0f b6       	in	r0, 0x3f	; 63
    1180:	f8 94       	cli
    1182:	de bf       	out	0x3e, r29	; 62
    1184:	0f be       	out	0x3f, r0	; 63
    1186:	cd bf       	out	0x3d, r28	; 61
    1188:	cf 91       	pop	r28
    118a:	df 91       	pop	r29
    118c:	08 95       	ret

0000118e <lcd_wr_command>:

	 
/*****Function to Write Command on LCD*****/
void lcd_wr_command(unsigned char cmd)
{
    118e:	df 93       	push	r29
    1190:	cf 93       	push	r28
    1192:	cd b7       	in	r28, 0x3d	; 61
    1194:	de b7       	in	r29, 0x3e	; 62
    1196:	6e 97       	sbiw	r28, 0x1e	; 30
    1198:	0f b6       	in	r0, 0x3f	; 63
    119a:	f8 94       	cli
    119c:	de bf       	out	0x3e, r29	; 62
    119e:	0f be       	out	0x3f, r0	; 63
    11a0:	cd bf       	out	0x3d, r28	; 61
    11a2:	8e 8f       	std	Y+30, r24	; 0x1e
	unsigned char temp;
	temp = cmd;
    11a4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    11a6:	8d 8f       	std	Y+29, r24	; 0x1d
	temp = temp & 0xF0;
    11a8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    11aa:	80 7f       	andi	r24, 0xF0	; 240
    11ac:	8d 8f       	std	Y+29, r24	; 0x1d
	lcd_port &= 0x0F;
    11ae:	a8 e2       	ldi	r26, 0x28	; 40
    11b0:	b0 e0       	ldi	r27, 0x00	; 0
    11b2:	e8 e2       	ldi	r30, 0x28	; 40
    11b4:	f0 e0       	ldi	r31, 0x00	; 0
    11b6:	80 81       	ld	r24, Z
    11b8:	8f 70       	andi	r24, 0x0F	; 15
    11ba:	8c 93       	st	X, r24
	lcd_port |= temp;
    11bc:	a8 e2       	ldi	r26, 0x28	; 40
    11be:	b0 e0       	ldi	r27, 0x00	; 0
    11c0:	e8 e2       	ldi	r30, 0x28	; 40
    11c2:	f0 e0       	ldi	r31, 0x00	; 0
    11c4:	90 81       	ld	r25, Z
    11c6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    11c8:	89 2b       	or	r24, r25
    11ca:	8c 93       	st	X, r24
	cbit(lcd_port,RS);
    11cc:	a8 e2       	ldi	r26, 0x28	; 40
    11ce:	b0 e0       	ldi	r27, 0x00	; 0
    11d0:	e8 e2       	ldi	r30, 0x28	; 40
    11d2:	f0 e0       	ldi	r31, 0x00	; 0
    11d4:	80 81       	ld	r24, Z
    11d6:	8e 7f       	andi	r24, 0xFE	; 254
    11d8:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
    11da:	a8 e2       	ldi	r26, 0x28	; 40
    11dc:	b0 e0       	ldi	r27, 0x00	; 0
    11de:	e8 e2       	ldi	r30, 0x28	; 40
    11e0:	f0 e0       	ldi	r31, 0x00	; 0
    11e2:	80 81       	ld	r24, Z
    11e4:	8d 7f       	andi	r24, 0xFD	; 253
    11e6:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
    11e8:	a8 e2       	ldi	r26, 0x28	; 40
    11ea:	b0 e0       	ldi	r27, 0x00	; 0
    11ec:	e8 e2       	ldi	r30, 0x28	; 40
    11ee:	f0 e0       	ldi	r31, 0x00	; 0
    11f0:	80 81       	ld	r24, Z
    11f2:	84 60       	ori	r24, 0x04	; 4
    11f4:	8c 93       	st	X, r24
    11f6:	80 e0       	ldi	r24, 0x00	; 0
    11f8:	90 e0       	ldi	r25, 0x00	; 0
    11fa:	a0 ea       	ldi	r26, 0xA0	; 160
    11fc:	b0 e4       	ldi	r27, 0x40	; 64
    11fe:	89 8f       	std	Y+25, r24	; 0x19
    1200:	9a 8f       	std	Y+26, r25	; 0x1a
    1202:	ab 8f       	std	Y+27, r26	; 0x1b
    1204:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1206:	69 8d       	ldd	r22, Y+25	; 0x19
    1208:	7a 8d       	ldd	r23, Y+26	; 0x1a
    120a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    120c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    120e:	2d ec       	ldi	r18, 0xCD	; 205
    1210:	3c ec       	ldi	r19, 0xCC	; 204
    1212:	4c e2       	ldi	r20, 0x2C	; 44
    1214:	55 e4       	ldi	r21, 0x45	; 69
    1216:	0e 94 1f 14 	call	0x283e	; 0x283e <__mulsf3>
    121a:	dc 01       	movw	r26, r24
    121c:	cb 01       	movw	r24, r22
    121e:	8d 8b       	std	Y+21, r24	; 0x15
    1220:	9e 8b       	std	Y+22, r25	; 0x16
    1222:	af 8b       	std	Y+23, r26	; 0x17
    1224:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1226:	6d 89       	ldd	r22, Y+21	; 0x15
    1228:	7e 89       	ldd	r23, Y+22	; 0x16
    122a:	8f 89       	ldd	r24, Y+23	; 0x17
    122c:	98 8d       	ldd	r25, Y+24	; 0x18
    122e:	20 e0       	ldi	r18, 0x00	; 0
    1230:	30 e0       	ldi	r19, 0x00	; 0
    1232:	40 e8       	ldi	r20, 0x80	; 128
    1234:	5f e3       	ldi	r21, 0x3F	; 63
    1236:	0e 94 25 16 	call	0x2c4a	; 0x2c4a <__ltsf2>
    123a:	88 23       	and	r24, r24
    123c:	2c f4       	brge	.+10     	; 0x1248 <lcd_wr_command+0xba>
		__ticks = 1;
    123e:	81 e0       	ldi	r24, 0x01	; 1
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	9c 8b       	std	Y+20, r25	; 0x14
    1244:	8b 8b       	std	Y+19, r24	; 0x13
    1246:	3f c0       	rjmp	.+126    	; 0x12c6 <lcd_wr_command+0x138>
	else if (__tmp > 65535)
    1248:	6d 89       	ldd	r22, Y+21	; 0x15
    124a:	7e 89       	ldd	r23, Y+22	; 0x16
    124c:	8f 89       	ldd	r24, Y+23	; 0x17
    124e:	98 8d       	ldd	r25, Y+24	; 0x18
    1250:	20 e0       	ldi	r18, 0x00	; 0
    1252:	3f ef       	ldi	r19, 0xFF	; 255
    1254:	4f e7       	ldi	r20, 0x7F	; 127
    1256:	57 e4       	ldi	r21, 0x47	; 71
    1258:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <__gtsf2>
    125c:	18 16       	cp	r1, r24
    125e:	4c f5       	brge	.+82     	; 0x12b2 <lcd_wr_command+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1260:	69 8d       	ldd	r22, Y+25	; 0x19
    1262:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1264:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1266:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1268:	20 e0       	ldi	r18, 0x00	; 0
    126a:	30 e0       	ldi	r19, 0x00	; 0
    126c:	40 e2       	ldi	r20, 0x20	; 32
    126e:	51 e4       	ldi	r21, 0x41	; 65
    1270:	0e 94 1f 14 	call	0x283e	; 0x283e <__mulsf3>
    1274:	dc 01       	movw	r26, r24
    1276:	cb 01       	movw	r24, r22
    1278:	bc 01       	movw	r22, r24
    127a:	cd 01       	movw	r24, r26
    127c:	0e 94 49 12 	call	0x2492	; 0x2492 <__fixunssfsi>
    1280:	dc 01       	movw	r26, r24
    1282:	cb 01       	movw	r24, r22
    1284:	9c 8b       	std	Y+20, r25	; 0x14
    1286:	8b 8b       	std	Y+19, r24	; 0x13
    1288:	0f c0       	rjmp	.+30     	; 0x12a8 <lcd_wr_command+0x11a>
    128a:	84 e1       	ldi	r24, 0x14	; 20
    128c:	91 e0       	ldi	r25, 0x01	; 1
    128e:	9a 8b       	std	Y+18, r25	; 0x12
    1290:	89 8b       	std	Y+17, r24	; 0x11
    1292:	89 89       	ldd	r24, Y+17	; 0x11
    1294:	9a 89       	ldd	r25, Y+18	; 0x12
    1296:	01 97       	sbiw	r24, 0x01	; 1
    1298:	f1 f7       	brne	.-4      	; 0x1296 <lcd_wr_command+0x108>
    129a:	9a 8b       	std	Y+18, r25	; 0x12
    129c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    129e:	8b 89       	ldd	r24, Y+19	; 0x13
    12a0:	9c 89       	ldd	r25, Y+20	; 0x14
    12a2:	01 97       	sbiw	r24, 0x01	; 1
    12a4:	9c 8b       	std	Y+20, r25	; 0x14
    12a6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12a8:	8b 89       	ldd	r24, Y+19	; 0x13
    12aa:	9c 89       	ldd	r25, Y+20	; 0x14
    12ac:	00 97       	sbiw	r24, 0x00	; 0
    12ae:	69 f7       	brne	.-38     	; 0x128a <lcd_wr_command+0xfc>
    12b0:	14 c0       	rjmp	.+40     	; 0x12da <lcd_wr_command+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12b2:	6d 89       	ldd	r22, Y+21	; 0x15
    12b4:	7e 89       	ldd	r23, Y+22	; 0x16
    12b6:	8f 89       	ldd	r24, Y+23	; 0x17
    12b8:	98 8d       	ldd	r25, Y+24	; 0x18
    12ba:	0e 94 49 12 	call	0x2492	; 0x2492 <__fixunssfsi>
    12be:	dc 01       	movw	r26, r24
    12c0:	cb 01       	movw	r24, r22
    12c2:	9c 8b       	std	Y+20, r25	; 0x14
    12c4:	8b 8b       	std	Y+19, r24	; 0x13
    12c6:	8b 89       	ldd	r24, Y+19	; 0x13
    12c8:	9c 89       	ldd	r25, Y+20	; 0x14
    12ca:	98 8b       	std	Y+16, r25	; 0x10
    12cc:	8f 87       	std	Y+15, r24	; 0x0f
    12ce:	8f 85       	ldd	r24, Y+15	; 0x0f
    12d0:	98 89       	ldd	r25, Y+16	; 0x10
    12d2:	01 97       	sbiw	r24, 0x01	; 1
    12d4:	f1 f7       	brne	.-4      	; 0x12d2 <lcd_wr_command+0x144>
    12d6:	98 8b       	std	Y+16, r25	; 0x10
    12d8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	cbit(lcd_port,EN);
    12da:	a8 e2       	ldi	r26, 0x28	; 40
    12dc:	b0 e0       	ldi	r27, 0x00	; 0
    12de:	e8 e2       	ldi	r30, 0x28	; 40
    12e0:	f0 e0       	ldi	r31, 0x00	; 0
    12e2:	80 81       	ld	r24, Z
    12e4:	8b 7f       	andi	r24, 0xFB	; 251
    12e6:	8c 93       	st	X, r24
	
	cmd = cmd & 0x0F;
    12e8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    12ea:	8f 70       	andi	r24, 0x0F	; 15
    12ec:	8e 8f       	std	Y+30, r24	; 0x1e
	cmd = cmd<<4;
    12ee:	8e 8d       	ldd	r24, Y+30	; 0x1e
    12f0:	82 95       	swap	r24
    12f2:	80 7f       	andi	r24, 0xF0	; 240
    12f4:	8e 8f       	std	Y+30, r24	; 0x1e
	lcd_port &= 0x0F;
    12f6:	a8 e2       	ldi	r26, 0x28	; 40
    12f8:	b0 e0       	ldi	r27, 0x00	; 0
    12fa:	e8 e2       	ldi	r30, 0x28	; 40
    12fc:	f0 e0       	ldi	r31, 0x00	; 0
    12fe:	80 81       	ld	r24, Z
    1300:	8f 70       	andi	r24, 0x0F	; 15
    1302:	8c 93       	st	X, r24
	lcd_port |= cmd;
    1304:	a8 e2       	ldi	r26, 0x28	; 40
    1306:	b0 e0       	ldi	r27, 0x00	; 0
    1308:	e8 e2       	ldi	r30, 0x28	; 40
    130a:	f0 e0       	ldi	r31, 0x00	; 0
    130c:	90 81       	ld	r25, Z
    130e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1310:	89 2b       	or	r24, r25
    1312:	8c 93       	st	X, r24
	cbit(lcd_port,RS);
    1314:	a8 e2       	ldi	r26, 0x28	; 40
    1316:	b0 e0       	ldi	r27, 0x00	; 0
    1318:	e8 e2       	ldi	r30, 0x28	; 40
    131a:	f0 e0       	ldi	r31, 0x00	; 0
    131c:	80 81       	ld	r24, Z
    131e:	8e 7f       	andi	r24, 0xFE	; 254
    1320:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
    1322:	a8 e2       	ldi	r26, 0x28	; 40
    1324:	b0 e0       	ldi	r27, 0x00	; 0
    1326:	e8 e2       	ldi	r30, 0x28	; 40
    1328:	f0 e0       	ldi	r31, 0x00	; 0
    132a:	80 81       	ld	r24, Z
    132c:	8d 7f       	andi	r24, 0xFD	; 253
    132e:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
    1330:	a8 e2       	ldi	r26, 0x28	; 40
    1332:	b0 e0       	ldi	r27, 0x00	; 0
    1334:	e8 e2       	ldi	r30, 0x28	; 40
    1336:	f0 e0       	ldi	r31, 0x00	; 0
    1338:	80 81       	ld	r24, Z
    133a:	84 60       	ori	r24, 0x04	; 4
    133c:	8c 93       	st	X, r24
    133e:	80 e0       	ldi	r24, 0x00	; 0
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	a0 ea       	ldi	r26, 0xA0	; 160
    1344:	b0 e4       	ldi	r27, 0x40	; 64
    1346:	8b 87       	std	Y+11, r24	; 0x0b
    1348:	9c 87       	std	Y+12, r25	; 0x0c
    134a:	ad 87       	std	Y+13, r26	; 0x0d
    134c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    134e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1350:	7c 85       	ldd	r23, Y+12	; 0x0c
    1352:	8d 85       	ldd	r24, Y+13	; 0x0d
    1354:	9e 85       	ldd	r25, Y+14	; 0x0e
    1356:	2d ec       	ldi	r18, 0xCD	; 205
    1358:	3c ec       	ldi	r19, 0xCC	; 204
    135a:	4c e2       	ldi	r20, 0x2C	; 44
    135c:	55 e4       	ldi	r21, 0x45	; 69
    135e:	0e 94 1f 14 	call	0x283e	; 0x283e <__mulsf3>
    1362:	dc 01       	movw	r26, r24
    1364:	cb 01       	movw	r24, r22
    1366:	8f 83       	std	Y+7, r24	; 0x07
    1368:	98 87       	std	Y+8, r25	; 0x08
    136a:	a9 87       	std	Y+9, r26	; 0x09
    136c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    136e:	6f 81       	ldd	r22, Y+7	; 0x07
    1370:	78 85       	ldd	r23, Y+8	; 0x08
    1372:	89 85       	ldd	r24, Y+9	; 0x09
    1374:	9a 85       	ldd	r25, Y+10	; 0x0a
    1376:	20 e0       	ldi	r18, 0x00	; 0
    1378:	30 e0       	ldi	r19, 0x00	; 0
    137a:	40 e8       	ldi	r20, 0x80	; 128
    137c:	5f e3       	ldi	r21, 0x3F	; 63
    137e:	0e 94 25 16 	call	0x2c4a	; 0x2c4a <__ltsf2>
    1382:	88 23       	and	r24, r24
    1384:	2c f4       	brge	.+10     	; 0x1390 <lcd_wr_command+0x202>
		__ticks = 1;
    1386:	81 e0       	ldi	r24, 0x01	; 1
    1388:	90 e0       	ldi	r25, 0x00	; 0
    138a:	9e 83       	std	Y+6, r25	; 0x06
    138c:	8d 83       	std	Y+5, r24	; 0x05
    138e:	3f c0       	rjmp	.+126    	; 0x140e <lcd_wr_command+0x280>
	else if (__tmp > 65535)
    1390:	6f 81       	ldd	r22, Y+7	; 0x07
    1392:	78 85       	ldd	r23, Y+8	; 0x08
    1394:	89 85       	ldd	r24, Y+9	; 0x09
    1396:	9a 85       	ldd	r25, Y+10	; 0x0a
    1398:	20 e0       	ldi	r18, 0x00	; 0
    139a:	3f ef       	ldi	r19, 0xFF	; 255
    139c:	4f e7       	ldi	r20, 0x7F	; 127
    139e:	57 e4       	ldi	r21, 0x47	; 71
    13a0:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <__gtsf2>
    13a4:	18 16       	cp	r1, r24
    13a6:	4c f5       	brge	.+82     	; 0x13fa <lcd_wr_command+0x26c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    13aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    13ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    13ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    13b0:	20 e0       	ldi	r18, 0x00	; 0
    13b2:	30 e0       	ldi	r19, 0x00	; 0
    13b4:	40 e2       	ldi	r20, 0x20	; 32
    13b6:	51 e4       	ldi	r21, 0x41	; 65
    13b8:	0e 94 1f 14 	call	0x283e	; 0x283e <__mulsf3>
    13bc:	dc 01       	movw	r26, r24
    13be:	cb 01       	movw	r24, r22
    13c0:	bc 01       	movw	r22, r24
    13c2:	cd 01       	movw	r24, r26
    13c4:	0e 94 49 12 	call	0x2492	; 0x2492 <__fixunssfsi>
    13c8:	dc 01       	movw	r26, r24
    13ca:	cb 01       	movw	r24, r22
    13cc:	9e 83       	std	Y+6, r25	; 0x06
    13ce:	8d 83       	std	Y+5, r24	; 0x05
    13d0:	0f c0       	rjmp	.+30     	; 0x13f0 <lcd_wr_command+0x262>
    13d2:	84 e1       	ldi	r24, 0x14	; 20
    13d4:	91 e0       	ldi	r25, 0x01	; 1
    13d6:	9c 83       	std	Y+4, r25	; 0x04
    13d8:	8b 83       	std	Y+3, r24	; 0x03
    13da:	8b 81       	ldd	r24, Y+3	; 0x03
    13dc:	9c 81       	ldd	r25, Y+4	; 0x04
    13de:	01 97       	sbiw	r24, 0x01	; 1
    13e0:	f1 f7       	brne	.-4      	; 0x13de <lcd_wr_command+0x250>
    13e2:	9c 83       	std	Y+4, r25	; 0x04
    13e4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13e6:	8d 81       	ldd	r24, Y+5	; 0x05
    13e8:	9e 81       	ldd	r25, Y+6	; 0x06
    13ea:	01 97       	sbiw	r24, 0x01	; 1
    13ec:	9e 83       	std	Y+6, r25	; 0x06
    13ee:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13f0:	8d 81       	ldd	r24, Y+5	; 0x05
    13f2:	9e 81       	ldd	r25, Y+6	; 0x06
    13f4:	00 97       	sbiw	r24, 0x00	; 0
    13f6:	69 f7       	brne	.-38     	; 0x13d2 <lcd_wr_command+0x244>
    13f8:	14 c0       	rjmp	.+40     	; 0x1422 <lcd_wr_command+0x294>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13fa:	6f 81       	ldd	r22, Y+7	; 0x07
    13fc:	78 85       	ldd	r23, Y+8	; 0x08
    13fe:	89 85       	ldd	r24, Y+9	; 0x09
    1400:	9a 85       	ldd	r25, Y+10	; 0x0a
    1402:	0e 94 49 12 	call	0x2492	; 0x2492 <__fixunssfsi>
    1406:	dc 01       	movw	r26, r24
    1408:	cb 01       	movw	r24, r22
    140a:	9e 83       	std	Y+6, r25	; 0x06
    140c:	8d 83       	std	Y+5, r24	; 0x05
    140e:	8d 81       	ldd	r24, Y+5	; 0x05
    1410:	9e 81       	ldd	r25, Y+6	; 0x06
    1412:	9a 83       	std	Y+2, r25	; 0x02
    1414:	89 83       	std	Y+1, r24	; 0x01
    1416:	89 81       	ldd	r24, Y+1	; 0x01
    1418:	9a 81       	ldd	r25, Y+2	; 0x02
    141a:	01 97       	sbiw	r24, 0x01	; 1
    141c:	f1 f7       	brne	.-4      	; 0x141a <lcd_wr_command+0x28c>
    141e:	9a 83       	std	Y+2, r25	; 0x02
    1420:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	cbit(lcd_port,EN);
    1422:	a8 e2       	ldi	r26, 0x28	; 40
    1424:	b0 e0       	ldi	r27, 0x00	; 0
    1426:	e8 e2       	ldi	r30, 0x28	; 40
    1428:	f0 e0       	ldi	r31, 0x00	; 0
    142a:	80 81       	ld	r24, Z
    142c:	8b 7f       	andi	r24, 0xFB	; 251
    142e:	8c 93       	st	X, r24
}
    1430:	6e 96       	adiw	r28, 0x1e	; 30
    1432:	0f b6       	in	r0, 0x3f	; 63
    1434:	f8 94       	cli
    1436:	de bf       	out	0x3e, r29	; 62
    1438:	0f be       	out	0x3f, r0	; 63
    143a:	cd bf       	out	0x3d, r28	; 61
    143c:	cf 91       	pop	r28
    143e:	df 91       	pop	r29
    1440:	08 95       	ret

00001442 <lcd_wr_char>:

/*****Function to Write Data on LCD*****/
void lcd_wr_char(char letter)
{
    1442:	df 93       	push	r29
    1444:	cf 93       	push	r28
    1446:	cd b7       	in	r28, 0x3d	; 61
    1448:	de b7       	in	r29, 0x3e	; 62
    144a:	6e 97       	sbiw	r28, 0x1e	; 30
    144c:	0f b6       	in	r0, 0x3f	; 63
    144e:	f8 94       	cli
    1450:	de bf       	out	0x3e, r29	; 62
    1452:	0f be       	out	0x3f, r0	; 63
    1454:	cd bf       	out	0x3d, r28	; 61
    1456:	8e 8f       	std	Y+30, r24	; 0x1e
	char temp;
	temp = letter;
    1458:	8e 8d       	ldd	r24, Y+30	; 0x1e
    145a:	8d 8f       	std	Y+29, r24	; 0x1d
	temp = (temp & 0xF0);
    145c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    145e:	80 7f       	andi	r24, 0xF0	; 240
    1460:	8d 8f       	std	Y+29, r24	; 0x1d
	lcd_port &= 0x0F;
    1462:	a8 e2       	ldi	r26, 0x28	; 40
    1464:	b0 e0       	ldi	r27, 0x00	; 0
    1466:	e8 e2       	ldi	r30, 0x28	; 40
    1468:	f0 e0       	ldi	r31, 0x00	; 0
    146a:	80 81       	ld	r24, Z
    146c:	8f 70       	andi	r24, 0x0F	; 15
    146e:	8c 93       	st	X, r24
	lcd_port |= temp;
    1470:	a8 e2       	ldi	r26, 0x28	; 40
    1472:	b0 e0       	ldi	r27, 0x00	; 0
    1474:	e8 e2       	ldi	r30, 0x28	; 40
    1476:	f0 e0       	ldi	r31, 0x00	; 0
    1478:	90 81       	ld	r25, Z
    147a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    147c:	89 2b       	or	r24, r25
    147e:	8c 93       	st	X, r24
	sbit(lcd_port,RS);
    1480:	a8 e2       	ldi	r26, 0x28	; 40
    1482:	b0 e0       	ldi	r27, 0x00	; 0
    1484:	e8 e2       	ldi	r30, 0x28	; 40
    1486:	f0 e0       	ldi	r31, 0x00	; 0
    1488:	80 81       	ld	r24, Z
    148a:	81 60       	ori	r24, 0x01	; 1
    148c:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
    148e:	a8 e2       	ldi	r26, 0x28	; 40
    1490:	b0 e0       	ldi	r27, 0x00	; 0
    1492:	e8 e2       	ldi	r30, 0x28	; 40
    1494:	f0 e0       	ldi	r31, 0x00	; 0
    1496:	80 81       	ld	r24, Z
    1498:	8d 7f       	andi	r24, 0xFD	; 253
    149a:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
    149c:	a8 e2       	ldi	r26, 0x28	; 40
    149e:	b0 e0       	ldi	r27, 0x00	; 0
    14a0:	e8 e2       	ldi	r30, 0x28	; 40
    14a2:	f0 e0       	ldi	r31, 0x00	; 0
    14a4:	80 81       	ld	r24, Z
    14a6:	84 60       	ori	r24, 0x04	; 4
    14a8:	8c 93       	st	X, r24
    14aa:	80 e0       	ldi	r24, 0x00	; 0
    14ac:	90 e0       	ldi	r25, 0x00	; 0
    14ae:	a0 ea       	ldi	r26, 0xA0	; 160
    14b0:	b0 e4       	ldi	r27, 0x40	; 64
    14b2:	89 8f       	std	Y+25, r24	; 0x19
    14b4:	9a 8f       	std	Y+26, r25	; 0x1a
    14b6:	ab 8f       	std	Y+27, r26	; 0x1b
    14b8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14ba:	69 8d       	ldd	r22, Y+25	; 0x19
    14bc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    14be:	8b 8d       	ldd	r24, Y+27	; 0x1b
    14c0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    14c2:	2d ec       	ldi	r18, 0xCD	; 205
    14c4:	3c ec       	ldi	r19, 0xCC	; 204
    14c6:	4c e2       	ldi	r20, 0x2C	; 44
    14c8:	55 e4       	ldi	r21, 0x45	; 69
    14ca:	0e 94 1f 14 	call	0x283e	; 0x283e <__mulsf3>
    14ce:	dc 01       	movw	r26, r24
    14d0:	cb 01       	movw	r24, r22
    14d2:	8d 8b       	std	Y+21, r24	; 0x15
    14d4:	9e 8b       	std	Y+22, r25	; 0x16
    14d6:	af 8b       	std	Y+23, r26	; 0x17
    14d8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    14da:	6d 89       	ldd	r22, Y+21	; 0x15
    14dc:	7e 89       	ldd	r23, Y+22	; 0x16
    14de:	8f 89       	ldd	r24, Y+23	; 0x17
    14e0:	98 8d       	ldd	r25, Y+24	; 0x18
    14e2:	20 e0       	ldi	r18, 0x00	; 0
    14e4:	30 e0       	ldi	r19, 0x00	; 0
    14e6:	40 e8       	ldi	r20, 0x80	; 128
    14e8:	5f e3       	ldi	r21, 0x3F	; 63
    14ea:	0e 94 25 16 	call	0x2c4a	; 0x2c4a <__ltsf2>
    14ee:	88 23       	and	r24, r24
    14f0:	2c f4       	brge	.+10     	; 0x14fc <lcd_wr_char+0xba>
		__ticks = 1;
    14f2:	81 e0       	ldi	r24, 0x01	; 1
    14f4:	90 e0       	ldi	r25, 0x00	; 0
    14f6:	9c 8b       	std	Y+20, r25	; 0x14
    14f8:	8b 8b       	std	Y+19, r24	; 0x13
    14fa:	3f c0       	rjmp	.+126    	; 0x157a <lcd_wr_char+0x138>
	else if (__tmp > 65535)
    14fc:	6d 89       	ldd	r22, Y+21	; 0x15
    14fe:	7e 89       	ldd	r23, Y+22	; 0x16
    1500:	8f 89       	ldd	r24, Y+23	; 0x17
    1502:	98 8d       	ldd	r25, Y+24	; 0x18
    1504:	20 e0       	ldi	r18, 0x00	; 0
    1506:	3f ef       	ldi	r19, 0xFF	; 255
    1508:	4f e7       	ldi	r20, 0x7F	; 127
    150a:	57 e4       	ldi	r21, 0x47	; 71
    150c:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <__gtsf2>
    1510:	18 16       	cp	r1, r24
    1512:	4c f5       	brge	.+82     	; 0x1566 <lcd_wr_char+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1514:	69 8d       	ldd	r22, Y+25	; 0x19
    1516:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1518:	8b 8d       	ldd	r24, Y+27	; 0x1b
    151a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    151c:	20 e0       	ldi	r18, 0x00	; 0
    151e:	30 e0       	ldi	r19, 0x00	; 0
    1520:	40 e2       	ldi	r20, 0x20	; 32
    1522:	51 e4       	ldi	r21, 0x41	; 65
    1524:	0e 94 1f 14 	call	0x283e	; 0x283e <__mulsf3>
    1528:	dc 01       	movw	r26, r24
    152a:	cb 01       	movw	r24, r22
    152c:	bc 01       	movw	r22, r24
    152e:	cd 01       	movw	r24, r26
    1530:	0e 94 49 12 	call	0x2492	; 0x2492 <__fixunssfsi>
    1534:	dc 01       	movw	r26, r24
    1536:	cb 01       	movw	r24, r22
    1538:	9c 8b       	std	Y+20, r25	; 0x14
    153a:	8b 8b       	std	Y+19, r24	; 0x13
    153c:	0f c0       	rjmp	.+30     	; 0x155c <lcd_wr_char+0x11a>
    153e:	84 e1       	ldi	r24, 0x14	; 20
    1540:	91 e0       	ldi	r25, 0x01	; 1
    1542:	9a 8b       	std	Y+18, r25	; 0x12
    1544:	89 8b       	std	Y+17, r24	; 0x11
    1546:	89 89       	ldd	r24, Y+17	; 0x11
    1548:	9a 89       	ldd	r25, Y+18	; 0x12
    154a:	01 97       	sbiw	r24, 0x01	; 1
    154c:	f1 f7       	brne	.-4      	; 0x154a <lcd_wr_char+0x108>
    154e:	9a 8b       	std	Y+18, r25	; 0x12
    1550:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1552:	8b 89       	ldd	r24, Y+19	; 0x13
    1554:	9c 89       	ldd	r25, Y+20	; 0x14
    1556:	01 97       	sbiw	r24, 0x01	; 1
    1558:	9c 8b       	std	Y+20, r25	; 0x14
    155a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    155c:	8b 89       	ldd	r24, Y+19	; 0x13
    155e:	9c 89       	ldd	r25, Y+20	; 0x14
    1560:	00 97       	sbiw	r24, 0x00	; 0
    1562:	69 f7       	brne	.-38     	; 0x153e <lcd_wr_char+0xfc>
    1564:	14 c0       	rjmp	.+40     	; 0x158e <lcd_wr_char+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1566:	6d 89       	ldd	r22, Y+21	; 0x15
    1568:	7e 89       	ldd	r23, Y+22	; 0x16
    156a:	8f 89       	ldd	r24, Y+23	; 0x17
    156c:	98 8d       	ldd	r25, Y+24	; 0x18
    156e:	0e 94 49 12 	call	0x2492	; 0x2492 <__fixunssfsi>
    1572:	dc 01       	movw	r26, r24
    1574:	cb 01       	movw	r24, r22
    1576:	9c 8b       	std	Y+20, r25	; 0x14
    1578:	8b 8b       	std	Y+19, r24	; 0x13
    157a:	8b 89       	ldd	r24, Y+19	; 0x13
    157c:	9c 89       	ldd	r25, Y+20	; 0x14
    157e:	98 8b       	std	Y+16, r25	; 0x10
    1580:	8f 87       	std	Y+15, r24	; 0x0f
    1582:	8f 85       	ldd	r24, Y+15	; 0x0f
    1584:	98 89       	ldd	r25, Y+16	; 0x10
    1586:	01 97       	sbiw	r24, 0x01	; 1
    1588:	f1 f7       	brne	.-4      	; 0x1586 <lcd_wr_char+0x144>
    158a:	98 8b       	std	Y+16, r25	; 0x10
    158c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	cbit(lcd_port,EN);
    158e:	a8 e2       	ldi	r26, 0x28	; 40
    1590:	b0 e0       	ldi	r27, 0x00	; 0
    1592:	e8 e2       	ldi	r30, 0x28	; 40
    1594:	f0 e0       	ldi	r31, 0x00	; 0
    1596:	80 81       	ld	r24, Z
    1598:	8b 7f       	andi	r24, 0xFB	; 251
    159a:	8c 93       	st	X, r24

	letter = letter & 0x0F;
    159c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    159e:	8f 70       	andi	r24, 0x0F	; 15
    15a0:	8e 8f       	std	Y+30, r24	; 0x1e
	letter = letter<<4;
    15a2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    15a4:	82 95       	swap	r24
    15a6:	80 7f       	andi	r24, 0xF0	; 240
    15a8:	8e 8f       	std	Y+30, r24	; 0x1e
	lcd_port &= 0x0F;
    15aa:	a8 e2       	ldi	r26, 0x28	; 40
    15ac:	b0 e0       	ldi	r27, 0x00	; 0
    15ae:	e8 e2       	ldi	r30, 0x28	; 40
    15b0:	f0 e0       	ldi	r31, 0x00	; 0
    15b2:	80 81       	ld	r24, Z
    15b4:	8f 70       	andi	r24, 0x0F	; 15
    15b6:	8c 93       	st	X, r24
	lcd_port |= letter;
    15b8:	a8 e2       	ldi	r26, 0x28	; 40
    15ba:	b0 e0       	ldi	r27, 0x00	; 0
    15bc:	e8 e2       	ldi	r30, 0x28	; 40
    15be:	f0 e0       	ldi	r31, 0x00	; 0
    15c0:	90 81       	ld	r25, Z
    15c2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    15c4:	89 2b       	or	r24, r25
    15c6:	8c 93       	st	X, r24
	sbit(lcd_port,RS);
    15c8:	a8 e2       	ldi	r26, 0x28	; 40
    15ca:	b0 e0       	ldi	r27, 0x00	; 0
    15cc:	e8 e2       	ldi	r30, 0x28	; 40
    15ce:	f0 e0       	ldi	r31, 0x00	; 0
    15d0:	80 81       	ld	r24, Z
    15d2:	81 60       	ori	r24, 0x01	; 1
    15d4:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
    15d6:	a8 e2       	ldi	r26, 0x28	; 40
    15d8:	b0 e0       	ldi	r27, 0x00	; 0
    15da:	e8 e2       	ldi	r30, 0x28	; 40
    15dc:	f0 e0       	ldi	r31, 0x00	; 0
    15de:	80 81       	ld	r24, Z
    15e0:	8d 7f       	andi	r24, 0xFD	; 253
    15e2:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
    15e4:	a8 e2       	ldi	r26, 0x28	; 40
    15e6:	b0 e0       	ldi	r27, 0x00	; 0
    15e8:	e8 e2       	ldi	r30, 0x28	; 40
    15ea:	f0 e0       	ldi	r31, 0x00	; 0
    15ec:	80 81       	ld	r24, Z
    15ee:	84 60       	ori	r24, 0x04	; 4
    15f0:	8c 93       	st	X, r24
    15f2:	80 e0       	ldi	r24, 0x00	; 0
    15f4:	90 e0       	ldi	r25, 0x00	; 0
    15f6:	a0 ea       	ldi	r26, 0xA0	; 160
    15f8:	b0 e4       	ldi	r27, 0x40	; 64
    15fa:	8b 87       	std	Y+11, r24	; 0x0b
    15fc:	9c 87       	std	Y+12, r25	; 0x0c
    15fe:	ad 87       	std	Y+13, r26	; 0x0d
    1600:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1602:	6b 85       	ldd	r22, Y+11	; 0x0b
    1604:	7c 85       	ldd	r23, Y+12	; 0x0c
    1606:	8d 85       	ldd	r24, Y+13	; 0x0d
    1608:	9e 85       	ldd	r25, Y+14	; 0x0e
    160a:	2d ec       	ldi	r18, 0xCD	; 205
    160c:	3c ec       	ldi	r19, 0xCC	; 204
    160e:	4c e2       	ldi	r20, 0x2C	; 44
    1610:	55 e4       	ldi	r21, 0x45	; 69
    1612:	0e 94 1f 14 	call	0x283e	; 0x283e <__mulsf3>
    1616:	dc 01       	movw	r26, r24
    1618:	cb 01       	movw	r24, r22
    161a:	8f 83       	std	Y+7, r24	; 0x07
    161c:	98 87       	std	Y+8, r25	; 0x08
    161e:	a9 87       	std	Y+9, r26	; 0x09
    1620:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1622:	6f 81       	ldd	r22, Y+7	; 0x07
    1624:	78 85       	ldd	r23, Y+8	; 0x08
    1626:	89 85       	ldd	r24, Y+9	; 0x09
    1628:	9a 85       	ldd	r25, Y+10	; 0x0a
    162a:	20 e0       	ldi	r18, 0x00	; 0
    162c:	30 e0       	ldi	r19, 0x00	; 0
    162e:	40 e8       	ldi	r20, 0x80	; 128
    1630:	5f e3       	ldi	r21, 0x3F	; 63
    1632:	0e 94 25 16 	call	0x2c4a	; 0x2c4a <__ltsf2>
    1636:	88 23       	and	r24, r24
    1638:	2c f4       	brge	.+10     	; 0x1644 <lcd_wr_char+0x202>
		__ticks = 1;
    163a:	81 e0       	ldi	r24, 0x01	; 1
    163c:	90 e0       	ldi	r25, 0x00	; 0
    163e:	9e 83       	std	Y+6, r25	; 0x06
    1640:	8d 83       	std	Y+5, r24	; 0x05
    1642:	3f c0       	rjmp	.+126    	; 0x16c2 <lcd_wr_char+0x280>
	else if (__tmp > 65535)
    1644:	6f 81       	ldd	r22, Y+7	; 0x07
    1646:	78 85       	ldd	r23, Y+8	; 0x08
    1648:	89 85       	ldd	r24, Y+9	; 0x09
    164a:	9a 85       	ldd	r25, Y+10	; 0x0a
    164c:	20 e0       	ldi	r18, 0x00	; 0
    164e:	3f ef       	ldi	r19, 0xFF	; 255
    1650:	4f e7       	ldi	r20, 0x7F	; 127
    1652:	57 e4       	ldi	r21, 0x47	; 71
    1654:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <__gtsf2>
    1658:	18 16       	cp	r1, r24
    165a:	4c f5       	brge	.+82     	; 0x16ae <lcd_wr_char+0x26c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    165c:	6b 85       	ldd	r22, Y+11	; 0x0b
    165e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1660:	8d 85       	ldd	r24, Y+13	; 0x0d
    1662:	9e 85       	ldd	r25, Y+14	; 0x0e
    1664:	20 e0       	ldi	r18, 0x00	; 0
    1666:	30 e0       	ldi	r19, 0x00	; 0
    1668:	40 e2       	ldi	r20, 0x20	; 32
    166a:	51 e4       	ldi	r21, 0x41	; 65
    166c:	0e 94 1f 14 	call	0x283e	; 0x283e <__mulsf3>
    1670:	dc 01       	movw	r26, r24
    1672:	cb 01       	movw	r24, r22
    1674:	bc 01       	movw	r22, r24
    1676:	cd 01       	movw	r24, r26
    1678:	0e 94 49 12 	call	0x2492	; 0x2492 <__fixunssfsi>
    167c:	dc 01       	movw	r26, r24
    167e:	cb 01       	movw	r24, r22
    1680:	9e 83       	std	Y+6, r25	; 0x06
    1682:	8d 83       	std	Y+5, r24	; 0x05
    1684:	0f c0       	rjmp	.+30     	; 0x16a4 <lcd_wr_char+0x262>
    1686:	84 e1       	ldi	r24, 0x14	; 20
    1688:	91 e0       	ldi	r25, 0x01	; 1
    168a:	9c 83       	std	Y+4, r25	; 0x04
    168c:	8b 83       	std	Y+3, r24	; 0x03
    168e:	8b 81       	ldd	r24, Y+3	; 0x03
    1690:	9c 81       	ldd	r25, Y+4	; 0x04
    1692:	01 97       	sbiw	r24, 0x01	; 1
    1694:	f1 f7       	brne	.-4      	; 0x1692 <lcd_wr_char+0x250>
    1696:	9c 83       	std	Y+4, r25	; 0x04
    1698:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    169a:	8d 81       	ldd	r24, Y+5	; 0x05
    169c:	9e 81       	ldd	r25, Y+6	; 0x06
    169e:	01 97       	sbiw	r24, 0x01	; 1
    16a0:	9e 83       	std	Y+6, r25	; 0x06
    16a2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16a4:	8d 81       	ldd	r24, Y+5	; 0x05
    16a6:	9e 81       	ldd	r25, Y+6	; 0x06
    16a8:	00 97       	sbiw	r24, 0x00	; 0
    16aa:	69 f7       	brne	.-38     	; 0x1686 <lcd_wr_char+0x244>
    16ac:	14 c0       	rjmp	.+40     	; 0x16d6 <lcd_wr_char+0x294>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16ae:	6f 81       	ldd	r22, Y+7	; 0x07
    16b0:	78 85       	ldd	r23, Y+8	; 0x08
    16b2:	89 85       	ldd	r24, Y+9	; 0x09
    16b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    16b6:	0e 94 49 12 	call	0x2492	; 0x2492 <__fixunssfsi>
    16ba:	dc 01       	movw	r26, r24
    16bc:	cb 01       	movw	r24, r22
    16be:	9e 83       	std	Y+6, r25	; 0x06
    16c0:	8d 83       	std	Y+5, r24	; 0x05
    16c2:	8d 81       	ldd	r24, Y+5	; 0x05
    16c4:	9e 81       	ldd	r25, Y+6	; 0x06
    16c6:	9a 83       	std	Y+2, r25	; 0x02
    16c8:	89 83       	std	Y+1, r24	; 0x01
    16ca:	89 81       	ldd	r24, Y+1	; 0x01
    16cc:	9a 81       	ldd	r25, Y+2	; 0x02
    16ce:	01 97       	sbiw	r24, 0x01	; 1
    16d0:	f1 f7       	brne	.-4      	; 0x16ce <lcd_wr_char+0x28c>
    16d2:	9a 83       	std	Y+2, r25	; 0x02
    16d4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	cbit(lcd_port,EN);
    16d6:	a8 e2       	ldi	r26, 0x28	; 40
    16d8:	b0 e0       	ldi	r27, 0x00	; 0
    16da:	e8 e2       	ldi	r30, 0x28	; 40
    16dc:	f0 e0       	ldi	r31, 0x00	; 0
    16de:	80 81       	ld	r24, Z
    16e0:	8b 7f       	andi	r24, 0xFB	; 251
    16e2:	8c 93       	st	X, r24
}
    16e4:	6e 96       	adiw	r28, 0x1e	; 30
    16e6:	0f b6       	in	r0, 0x3f	; 63
    16e8:	f8 94       	cli
    16ea:	de bf       	out	0x3e, r29	; 62
    16ec:	0f be       	out	0x3f, r0	; 63
    16ee:	cd bf       	out	0x3d, r28	; 61
    16f0:	cf 91       	pop	r28
    16f2:	df 91       	pop	r29
    16f4:	08 95       	ret

000016f6 <lcd_home>:


void lcd_home()
{
    16f6:	df 93       	push	r29
    16f8:	cf 93       	push	r28
    16fa:	cd b7       	in	r28, 0x3d	; 61
    16fc:	de b7       	in	r29, 0x3e	; 62
	lcd_wr_command(0x80);
    16fe:	80 e8       	ldi	r24, 0x80	; 128
    1700:	0e 94 c7 08 	call	0x118e	; 0x118e <lcd_wr_command>
}
    1704:	cf 91       	pop	r28
    1706:	df 91       	pop	r29
    1708:	08 95       	ret

0000170a <lcd_string>:


/*****Function to Print String on LCD*****/
void lcd_string(char *str)
{
    170a:	df 93       	push	r29
    170c:	cf 93       	push	r28
    170e:	0f 92       	push	r0
    1710:	0f 92       	push	r0
    1712:	cd b7       	in	r28, 0x3d	; 61
    1714:	de b7       	in	r29, 0x3e	; 62
    1716:	9a 83       	std	Y+2, r25	; 0x02
    1718:	89 83       	std	Y+1, r24	; 0x01
    171a:	0a c0       	rjmp	.+20     	; 0x1730 <lcd_string+0x26>
	while(*str != '\0')
	{
		lcd_wr_char(*str);
    171c:	e9 81       	ldd	r30, Y+1	; 0x01
    171e:	fa 81       	ldd	r31, Y+2	; 0x02
    1720:	80 81       	ld	r24, Z
    1722:	0e 94 21 0a 	call	0x1442	; 0x1442 <lcd_wr_char>
		str++;
    1726:	89 81       	ldd	r24, Y+1	; 0x01
    1728:	9a 81       	ldd	r25, Y+2	; 0x02
    172a:	01 96       	adiw	r24, 0x01	; 1
    172c:	9a 83       	std	Y+2, r25	; 0x02
    172e:	89 83       	std	Y+1, r24	; 0x01


/*****Function to Print String on LCD*****/
void lcd_string(char *str)
{
	while(*str != '\0')
    1730:	e9 81       	ldd	r30, Y+1	; 0x01
    1732:	fa 81       	ldd	r31, Y+2	; 0x02
    1734:	80 81       	ld	r24, Z
    1736:	88 23       	and	r24, r24
    1738:	89 f7       	brne	.-30     	; 0x171c <lcd_string+0x12>
	{
		lcd_wr_char(*str);
		str++;
	}
}
    173a:	0f 90       	pop	r0
    173c:	0f 90       	pop	r0
    173e:	cf 91       	pop	r28
    1740:	df 91       	pop	r29
    1742:	08 95       	ret

00001744 <lcd_cursor>:

/*** Position the LCD cursor at "row", "column". ***/

void lcd_cursor (char row, char column)
{
    1744:	df 93       	push	r29
    1746:	cf 93       	push	r28
    1748:	00 d0       	rcall	.+0      	; 0x174a <lcd_cursor+0x6>
    174a:	0f 92       	push	r0
    174c:	cd b7       	in	r28, 0x3d	; 61
    174e:	de b7       	in	r29, 0x3e	; 62
    1750:	89 83       	std	Y+1, r24	; 0x01
    1752:	6a 83       	std	Y+2, r22	; 0x02
	switch (row) {
    1754:	89 81       	ldd	r24, Y+1	; 0x01
    1756:	28 2f       	mov	r18, r24
    1758:	30 e0       	ldi	r19, 0x00	; 0
    175a:	3c 83       	std	Y+4, r19	; 0x04
    175c:	2b 83       	std	Y+3, r18	; 0x03
    175e:	8b 81       	ldd	r24, Y+3	; 0x03
    1760:	9c 81       	ldd	r25, Y+4	; 0x04
    1762:	82 30       	cpi	r24, 0x02	; 2
    1764:	91 05       	cpc	r25, r1
    1766:	d9 f0       	breq	.+54     	; 0x179e <lcd_cursor+0x5a>
    1768:	2b 81       	ldd	r18, Y+3	; 0x03
    176a:	3c 81       	ldd	r19, Y+4	; 0x04
    176c:	23 30       	cpi	r18, 0x03	; 3
    176e:	31 05       	cpc	r19, r1
    1770:	34 f4       	brge	.+12     	; 0x177e <lcd_cursor+0x3a>
    1772:	8b 81       	ldd	r24, Y+3	; 0x03
    1774:	9c 81       	ldd	r25, Y+4	; 0x04
    1776:	81 30       	cpi	r24, 0x01	; 1
    1778:	91 05       	cpc	r25, r1
    177a:	61 f0       	breq	.+24     	; 0x1794 <lcd_cursor+0x50>
    177c:	1e c0       	rjmp	.+60     	; 0x17ba <lcd_cursor+0x76>
    177e:	2b 81       	ldd	r18, Y+3	; 0x03
    1780:	3c 81       	ldd	r19, Y+4	; 0x04
    1782:	23 30       	cpi	r18, 0x03	; 3
    1784:	31 05       	cpc	r19, r1
    1786:	81 f0       	breq	.+32     	; 0x17a8 <lcd_cursor+0x64>
    1788:	8b 81       	ldd	r24, Y+3	; 0x03
    178a:	9c 81       	ldd	r25, Y+4	; 0x04
    178c:	84 30       	cpi	r24, 0x04	; 4
    178e:	91 05       	cpc	r25, r1
    1790:	81 f0       	breq	.+32     	; 0x17b2 <lcd_cursor+0x6e>
    1792:	13 c0       	rjmp	.+38     	; 0x17ba <lcd_cursor+0x76>
		case 1: lcd_wr_command (0x80 + column - 1); break;
    1794:	8a 81       	ldd	r24, Y+2	; 0x02
    1796:	81 58       	subi	r24, 0x81	; 129
    1798:	0e 94 c7 08 	call	0x118e	; 0x118e <lcd_wr_command>
    179c:	0e c0       	rjmp	.+28     	; 0x17ba <lcd_cursor+0x76>
		case 2: lcd_wr_command (0xc0 + column - 1); break;
    179e:	8a 81       	ldd	r24, Y+2	; 0x02
    17a0:	81 54       	subi	r24, 0x41	; 65
    17a2:	0e 94 c7 08 	call	0x118e	; 0x118e <lcd_wr_command>
    17a6:	09 c0       	rjmp	.+18     	; 0x17ba <lcd_cursor+0x76>
		case 3: lcd_wr_command (0x94 + column - 1); break;
    17a8:	8a 81       	ldd	r24, Y+2	; 0x02
    17aa:	8d 56       	subi	r24, 0x6D	; 109
    17ac:	0e 94 c7 08 	call	0x118e	; 0x118e <lcd_wr_command>
    17b0:	04 c0       	rjmp	.+8      	; 0x17ba <lcd_cursor+0x76>
		case 4: lcd_wr_command (0xd4 + column - 1); break;
    17b2:	8a 81       	ldd	r24, Y+2	; 0x02
    17b4:	8d 52       	subi	r24, 0x2D	; 45
    17b6:	0e 94 c7 08 	call	0x118e	; 0x118e <lcd_wr_command>
		default: break;
	}
}
    17ba:	0f 90       	pop	r0
    17bc:	0f 90       	pop	r0
    17be:	0f 90       	pop	r0
    17c0:	0f 90       	pop	r0
    17c2:	cf 91       	pop	r28
    17c4:	df 91       	pop	r29
    17c6:	08 95       	ret

000017c8 <lcd_print>:

/***** Function To Print Any input value upto the desired digit on LCD *****/
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
    17c8:	df 93       	push	r29
    17ca:	cf 93       	push	r28
    17cc:	cd b7       	in	r28, 0x3d	; 61
    17ce:	de b7       	in	r29, 0x3e	; 62
    17d0:	27 97       	sbiw	r28, 0x07	; 7
    17d2:	0f b6       	in	r0, 0x3f	; 63
    17d4:	f8 94       	cli
    17d6:	de bf       	out	0x3e, r29	; 62
    17d8:	0f be       	out	0x3f, r0	; 63
    17da:	cd bf       	out	0x3d, r28	; 61
    17dc:	8a 83       	std	Y+2, r24	; 0x02
    17de:	6b 83       	std	Y+3, r22	; 0x03
    17e0:	5d 83       	std	Y+5, r21	; 0x05
    17e2:	4c 83       	std	Y+4, r20	; 0x04
    17e4:	3f 83       	std	Y+7, r19	; 0x07
    17e6:	2e 83       	std	Y+6, r18	; 0x06
	unsigned char flag=0;
    17e8:	19 82       	std	Y+1, r1	; 0x01
	if(row==0||coloumn==0)
    17ea:	8a 81       	ldd	r24, Y+2	; 0x02
    17ec:	88 23       	and	r24, r24
    17ee:	19 f0       	breq	.+6      	; 0x17f6 <lcd_print+0x2e>
    17f0:	8b 81       	ldd	r24, Y+3	; 0x03
    17f2:	88 23       	and	r24, r24
    17f4:	19 f4       	brne	.+6      	; 0x17fc <lcd_print+0x34>
	{
		lcd_home();
    17f6:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <lcd_home>
    17fa:	04 c0       	rjmp	.+8      	; 0x1804 <lcd_print+0x3c>
	}
	else
	{
		lcd_cursor(row,coloumn);
    17fc:	8a 81       	ldd	r24, Y+2	; 0x02
    17fe:	6b 81       	ldd	r22, Y+3	; 0x03
    1800:	0e 94 a2 0b 	call	0x1744	; 0x1744 <lcd_cursor>
	}
	if(digits==5 || flag==1)
    1804:	8e 81       	ldd	r24, Y+6	; 0x06
    1806:	9f 81       	ldd	r25, Y+7	; 0x07
    1808:	85 30       	cpi	r24, 0x05	; 5
    180a:	91 05       	cpc	r25, r1
    180c:	19 f0       	breq	.+6      	; 0x1814 <lcd_print+0x4c>
    180e:	89 81       	ldd	r24, Y+1	; 0x01
    1810:	81 30       	cpi	r24, 0x01	; 1
    1812:	a9 f4       	brne	.+42     	; 0x183e <lcd_print+0x76>
	{
		million=value/10000+48;
    1814:	8c 81       	ldd	r24, Y+4	; 0x04
    1816:	9d 81       	ldd	r25, Y+5	; 0x05
    1818:	20 e1       	ldi	r18, 0x10	; 16
    181a:	37 e2       	ldi	r19, 0x27	; 39
    181c:	b9 01       	movw	r22, r18
    181e:	0e 94 7e 19 	call	0x32fc	; 0x32fc <__udivmodhi4>
    1822:	cb 01       	movw	r24, r22
    1824:	c0 96       	adiw	r24, 0x30	; 48
    1826:	90 93 2c 03 	sts	0x032C, r25
    182a:	80 93 2b 03 	sts	0x032B, r24
		lcd_wr_char(million);
    182e:	80 91 2b 03 	lds	r24, 0x032B
    1832:	90 91 2c 03 	lds	r25, 0x032C
    1836:	0e 94 21 0a 	call	0x1442	; 0x1442 <lcd_wr_char>
		flag=1;
    183a:	81 e0       	ldi	r24, 0x01	; 1
    183c:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==4 || flag==1)
    183e:	8e 81       	ldd	r24, Y+6	; 0x06
    1840:	9f 81       	ldd	r25, Y+7	; 0x07
    1842:	84 30       	cpi	r24, 0x04	; 4
    1844:	91 05       	cpc	r25, r1
    1846:	19 f0       	breq	.+6      	; 0x184e <lcd_print+0x86>
    1848:	89 81       	ldd	r24, Y+1	; 0x01
    184a:	81 30       	cpi	r24, 0x01	; 1
    184c:	11 f5       	brne	.+68     	; 0x1892 <lcd_print+0xca>
	{
		temp = value/1000;
    184e:	8c 81       	ldd	r24, Y+4	; 0x04
    1850:	9d 81       	ldd	r25, Y+5	; 0x05
    1852:	28 ee       	ldi	r18, 0xE8	; 232
    1854:	33 e0       	ldi	r19, 0x03	; 3
    1856:	b9 01       	movw	r22, r18
    1858:	0e 94 7e 19 	call	0x32fc	; 0x32fc <__udivmodhi4>
    185c:	cb 01       	movw	r24, r22
    185e:	90 93 30 03 	sts	0x0330, r25
    1862:	80 93 2f 03 	sts	0x032F, r24
		thousand = temp%10 + 48;
    1866:	80 91 2f 03 	lds	r24, 0x032F
    186a:	90 91 30 03 	lds	r25, 0x0330
    186e:	2a e0       	ldi	r18, 0x0A	; 10
    1870:	30 e0       	ldi	r19, 0x00	; 0
    1872:	b9 01       	movw	r22, r18
    1874:	0e 94 7e 19 	call	0x32fc	; 0x32fc <__udivmodhi4>
    1878:	c0 96       	adiw	r24, 0x30	; 48
    187a:	90 93 41 03 	sts	0x0341, r25
    187e:	80 93 40 03 	sts	0x0340, r24
		lcd_wr_char(thousand);
    1882:	80 91 40 03 	lds	r24, 0x0340
    1886:	90 91 41 03 	lds	r25, 0x0341
    188a:	0e 94 21 0a 	call	0x1442	; 0x1442 <lcd_wr_char>
		flag=1;
    188e:	81 e0       	ldi	r24, 0x01	; 1
    1890:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==3 || flag==1)
    1892:	8e 81       	ldd	r24, Y+6	; 0x06
    1894:	9f 81       	ldd	r25, Y+7	; 0x07
    1896:	83 30       	cpi	r24, 0x03	; 3
    1898:	91 05       	cpc	r25, r1
    189a:	19 f0       	breq	.+6      	; 0x18a2 <lcd_print+0xda>
    189c:	89 81       	ldd	r24, Y+1	; 0x01
    189e:	81 30       	cpi	r24, 0x01	; 1
    18a0:	11 f5       	brne	.+68     	; 0x18e6 <lcd_print+0x11e>
	{
		temp = value/100;
    18a2:	8c 81       	ldd	r24, Y+4	; 0x04
    18a4:	9d 81       	ldd	r25, Y+5	; 0x05
    18a6:	24 e6       	ldi	r18, 0x64	; 100
    18a8:	30 e0       	ldi	r19, 0x00	; 0
    18aa:	b9 01       	movw	r22, r18
    18ac:	0e 94 7e 19 	call	0x32fc	; 0x32fc <__udivmodhi4>
    18b0:	cb 01       	movw	r24, r22
    18b2:	90 93 30 03 	sts	0x0330, r25
    18b6:	80 93 2f 03 	sts	0x032F, r24
		hundred = temp%10 + 48;
    18ba:	80 91 2f 03 	lds	r24, 0x032F
    18be:	90 91 30 03 	lds	r25, 0x0330
    18c2:	2a e0       	ldi	r18, 0x0A	; 10
    18c4:	30 e0       	ldi	r19, 0x00	; 0
    18c6:	b9 01       	movw	r22, r18
    18c8:	0e 94 7e 19 	call	0x32fc	; 0x32fc <__udivmodhi4>
    18cc:	c0 96       	adiw	r24, 0x30	; 48
    18ce:	90 93 3d 03 	sts	0x033D, r25
    18d2:	80 93 3c 03 	sts	0x033C, r24
		lcd_wr_char(hundred);
    18d6:	80 91 3c 03 	lds	r24, 0x033C
    18da:	90 91 3d 03 	lds	r25, 0x033D
    18de:	0e 94 21 0a 	call	0x1442	; 0x1442 <lcd_wr_char>
		flag=1;
    18e2:	81 e0       	ldi	r24, 0x01	; 1
    18e4:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==2 || flag==1)
    18e6:	8e 81       	ldd	r24, Y+6	; 0x06
    18e8:	9f 81       	ldd	r25, Y+7	; 0x07
    18ea:	82 30       	cpi	r24, 0x02	; 2
    18ec:	91 05       	cpc	r25, r1
    18ee:	19 f0       	breq	.+6      	; 0x18f6 <lcd_print+0x12e>
    18f0:	89 81       	ldd	r24, Y+1	; 0x01
    18f2:	81 30       	cpi	r24, 0x01	; 1
    18f4:	11 f5       	brne	.+68     	; 0x193a <lcd_print+0x172>
	{
		temp = value/10;
    18f6:	8c 81       	ldd	r24, Y+4	; 0x04
    18f8:	9d 81       	ldd	r25, Y+5	; 0x05
    18fa:	2a e0       	ldi	r18, 0x0A	; 10
    18fc:	30 e0       	ldi	r19, 0x00	; 0
    18fe:	b9 01       	movw	r22, r18
    1900:	0e 94 7e 19 	call	0x32fc	; 0x32fc <__udivmodhi4>
    1904:	cb 01       	movw	r24, r22
    1906:	90 93 30 03 	sts	0x0330, r25
    190a:	80 93 2f 03 	sts	0x032F, r24
		tens = temp%10 + 48;
    190e:	80 91 2f 03 	lds	r24, 0x032F
    1912:	90 91 30 03 	lds	r25, 0x0330
    1916:	2a e0       	ldi	r18, 0x0A	; 10
    1918:	30 e0       	ldi	r19, 0x00	; 0
    191a:	b9 01       	movw	r22, r18
    191c:	0e 94 7e 19 	call	0x32fc	; 0x32fc <__udivmodhi4>
    1920:	c0 96       	adiw	r24, 0x30	; 48
    1922:	90 93 37 03 	sts	0x0337, r25
    1926:	80 93 36 03 	sts	0x0336, r24
		lcd_wr_char(tens);
    192a:	80 91 36 03 	lds	r24, 0x0336
    192e:	90 91 37 03 	lds	r25, 0x0337
    1932:	0e 94 21 0a 	call	0x1442	; 0x1442 <lcd_wr_char>
		flag=1;
    1936:	81 e0       	ldi	r24, 0x01	; 1
    1938:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==1 || flag==1)
    193a:	8e 81       	ldd	r24, Y+6	; 0x06
    193c:	9f 81       	ldd	r25, Y+7	; 0x07
    193e:	81 30       	cpi	r24, 0x01	; 1
    1940:	91 05       	cpc	r25, r1
    1942:	19 f0       	breq	.+6      	; 0x194a <lcd_print+0x182>
    1944:	89 81       	ldd	r24, Y+1	; 0x01
    1946:	81 30       	cpi	r24, 0x01	; 1
    1948:	91 f4       	brne	.+36     	; 0x196e <lcd_print+0x1a6>
	{
		unit = value%10 + 48;
    194a:	8c 81       	ldd	r24, Y+4	; 0x04
    194c:	9d 81       	ldd	r25, Y+5	; 0x05
    194e:	2a e0       	ldi	r18, 0x0A	; 10
    1950:	30 e0       	ldi	r19, 0x00	; 0
    1952:	b9 01       	movw	r22, r18
    1954:	0e 94 7e 19 	call	0x32fc	; 0x32fc <__udivmodhi4>
    1958:	c0 96       	adiw	r24, 0x30	; 48
    195a:	90 93 3f 03 	sts	0x033F, r25
    195e:	80 93 3e 03 	sts	0x033E, r24
		lcd_wr_char(unit);
    1962:	80 91 3e 03 	lds	r24, 0x033E
    1966:	90 91 3f 03 	lds	r25, 0x033F
    196a:	0e 94 21 0a 	call	0x1442	; 0x1442 <lcd_wr_char>
	}
	if(digits>5)
    196e:	8e 81       	ldd	r24, Y+6	; 0x06
    1970:	9f 81       	ldd	r25, Y+7	; 0x07
    1972:	86 30       	cpi	r24, 0x06	; 6
    1974:	91 05       	cpc	r25, r1
    1976:	1c f0       	brlt	.+6      	; 0x197e <lcd_print+0x1b6>
	{
		lcd_wr_char('E');
    1978:	85 e4       	ldi	r24, 0x45	; 69
    197a:	0e 94 21 0a 	call	0x1442	; 0x1442 <lcd_wr_char>
	}
	
}
    197e:	27 96       	adiw	r28, 0x07	; 7
    1980:	0f b6       	in	r0, 0x3f	; 63
    1982:	f8 94       	cli
    1984:	de bf       	out	0x3e, r29	; 62
    1986:	0f be       	out	0x3f, r0	; 63
    1988:	cd bf       	out	0x3d, r28	; 61
    198a:	cf 91       	pop	r28
    198c:	df 91       	pop	r29
    198e:	08 95       	ret

00001990 <LCD_DISPLAY_INT_1>:


void LCD_DISPLAY_INT_1(int val)
{
    1990:	df 93       	push	r29
    1992:	cf 93       	push	r28
    1994:	0f 92       	push	r0
    1996:	0f 92       	push	r0
    1998:	cd b7       	in	r28, 0x3d	; 61
    199a:	de b7       	in	r29, 0x3e	; 62
    199c:	9a 83       	std	Y+2, r25	; 0x02
    199e:	89 83       	std	Y+1, r24	; 0x01


 lcd_print(1,1,val,4);
    19a0:	29 81       	ldd	r18, Y+1	; 0x01
    19a2:	3a 81       	ldd	r19, Y+2	; 0x02
    19a4:	81 e0       	ldi	r24, 0x01	; 1
    19a6:	61 e0       	ldi	r22, 0x01	; 1
    19a8:	a9 01       	movw	r20, r18
    19aa:	24 e0       	ldi	r18, 0x04	; 4
    19ac:	30 e0       	ldi	r19, 0x00	; 0
    19ae:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <lcd_print>

}
    19b2:	0f 90       	pop	r0
    19b4:	0f 90       	pop	r0
    19b6:	cf 91       	pop	r28
    19b8:	df 91       	pop	r29
    19ba:	08 95       	ret

000019bc <reverse>:

/* reverse: reverse string s in place */
void reverse(char s[])
{
    19bc:	df 93       	push	r29
    19be:	cf 93       	push	r28
    19c0:	cd b7       	in	r28, 0x3d	; 61
    19c2:	de b7       	in	r29, 0x3e	; 62
    19c4:	28 97       	sbiw	r28, 0x08	; 8
    19c6:	0f b6       	in	r0, 0x3f	; 63
    19c8:	f8 94       	cli
    19ca:	de bf       	out	0x3e, r29	; 62
    19cc:	0f be       	out	0x3f, r0	; 63
    19ce:	cd bf       	out	0x3d, r28	; 61
    19d0:	98 87       	std	Y+8, r25	; 0x08
    19d2:	8f 83       	std	Y+7, r24	; 0x07
    int c, i, j;
    for (i = 0, j = strlen(s)-1; i < j; i++, j--) {
    19d4:	1c 82       	std	Y+4, r1	; 0x04
    19d6:	1b 82       	std	Y+3, r1	; 0x03
    19d8:	8f 81       	ldd	r24, Y+7	; 0x07
    19da:	98 85       	ldd	r25, Y+8	; 0x08
    19dc:	0e 94 75 19 	call	0x32ea	; 0x32ea <strlen>
    19e0:	01 97       	sbiw	r24, 0x01	; 1
    19e2:	9a 83       	std	Y+2, r25	; 0x02
    19e4:	89 83       	std	Y+1, r24	; 0x01
    19e6:	2f c0       	rjmp	.+94     	; 0x1a46 <reverse+0x8a>
        c = s[i];
    19e8:	2b 81       	ldd	r18, Y+3	; 0x03
    19ea:	3c 81       	ldd	r19, Y+4	; 0x04
    19ec:	8f 81       	ldd	r24, Y+7	; 0x07
    19ee:	98 85       	ldd	r25, Y+8	; 0x08
    19f0:	fc 01       	movw	r30, r24
    19f2:	e2 0f       	add	r30, r18
    19f4:	f3 1f       	adc	r31, r19
    19f6:	80 81       	ld	r24, Z
    19f8:	88 2f       	mov	r24, r24
    19fa:	90 e0       	ldi	r25, 0x00	; 0
    19fc:	9e 83       	std	Y+6, r25	; 0x06
    19fe:	8d 83       	std	Y+5, r24	; 0x05
        s[i] = s[j];
    1a00:	2b 81       	ldd	r18, Y+3	; 0x03
    1a02:	3c 81       	ldd	r19, Y+4	; 0x04
    1a04:	8f 81       	ldd	r24, Y+7	; 0x07
    1a06:	98 85       	ldd	r25, Y+8	; 0x08
    1a08:	dc 01       	movw	r26, r24
    1a0a:	a2 0f       	add	r26, r18
    1a0c:	b3 1f       	adc	r27, r19
    1a0e:	29 81       	ldd	r18, Y+1	; 0x01
    1a10:	3a 81       	ldd	r19, Y+2	; 0x02
    1a12:	8f 81       	ldd	r24, Y+7	; 0x07
    1a14:	98 85       	ldd	r25, Y+8	; 0x08
    1a16:	fc 01       	movw	r30, r24
    1a18:	e2 0f       	add	r30, r18
    1a1a:	f3 1f       	adc	r31, r19
    1a1c:	80 81       	ld	r24, Z
    1a1e:	8c 93       	st	X, r24
        s[j] = c;
    1a20:	29 81       	ldd	r18, Y+1	; 0x01
    1a22:	3a 81       	ldd	r19, Y+2	; 0x02
    1a24:	8f 81       	ldd	r24, Y+7	; 0x07
    1a26:	98 85       	ldd	r25, Y+8	; 0x08
    1a28:	fc 01       	movw	r30, r24
    1a2a:	e2 0f       	add	r30, r18
    1a2c:	f3 1f       	adc	r31, r19
    1a2e:	8d 81       	ldd	r24, Y+5	; 0x05
    1a30:	80 83       	st	Z, r24

/* reverse: reverse string s in place */
void reverse(char s[])
{
    int c, i, j;
    for (i = 0, j = strlen(s)-1; i < j; i++, j--) {
    1a32:	8b 81       	ldd	r24, Y+3	; 0x03
    1a34:	9c 81       	ldd	r25, Y+4	; 0x04
    1a36:	01 96       	adiw	r24, 0x01	; 1
    1a38:	9c 83       	std	Y+4, r25	; 0x04
    1a3a:	8b 83       	std	Y+3, r24	; 0x03
    1a3c:	89 81       	ldd	r24, Y+1	; 0x01
    1a3e:	9a 81       	ldd	r25, Y+2	; 0x02
    1a40:	01 97       	sbiw	r24, 0x01	; 1
    1a42:	9a 83       	std	Y+2, r25	; 0x02
    1a44:	89 83       	std	Y+1, r24	; 0x01
    1a46:	2b 81       	ldd	r18, Y+3	; 0x03
    1a48:	3c 81       	ldd	r19, Y+4	; 0x04
    1a4a:	89 81       	ldd	r24, Y+1	; 0x01
    1a4c:	9a 81       	ldd	r25, Y+2	; 0x02
    1a4e:	28 17       	cp	r18, r24
    1a50:	39 07       	cpc	r19, r25
    1a52:	54 f2       	brlt	.-108    	; 0x19e8 <reverse+0x2c>
        c = s[i];
        s[i] = s[j];
        s[j] = c;
    }
}
    1a54:	28 96       	adiw	r28, 0x08	; 8
    1a56:	0f b6       	in	r0, 0x3f	; 63
    1a58:	f8 94       	cli
    1a5a:	de bf       	out	0x3e, r29	; 62
    1a5c:	0f be       	out	0x3f, r0	; 63
    1a5e:	cd bf       	out	0x3d, r28	; 61
    1a60:	cf 91       	pop	r28
    1a62:	df 91       	pop	r29
    1a64:	08 95       	ret

00001a66 <itoa1>:
void itoa1(int n, char s[])
{
    1a66:	df 93       	push	r29
    1a68:	cf 93       	push	r28
    1a6a:	cd b7       	in	r28, 0x3d	; 61
    1a6c:	de b7       	in	r29, 0x3e	; 62
    1a6e:	28 97       	sbiw	r28, 0x08	; 8
    1a70:	0f b6       	in	r0, 0x3f	; 63
    1a72:	f8 94       	cli
    1a74:	de bf       	out	0x3e, r29	; 62
    1a76:	0f be       	out	0x3f, r0	; 63
    1a78:	cd bf       	out	0x3d, r28	; 61
    1a7a:	9e 83       	std	Y+6, r25	; 0x06
    1a7c:	8d 83       	std	Y+5, r24	; 0x05
    1a7e:	78 87       	std	Y+8, r23	; 0x08
    1a80:	6f 83       	std	Y+7, r22	; 0x07
    int i, sign;
    if ((sign = n) < 0) /* record sign */
    1a82:	8d 81       	ldd	r24, Y+5	; 0x05
    1a84:	9e 81       	ldd	r25, Y+6	; 0x06
    1a86:	9a 83       	std	Y+2, r25	; 0x02
    1a88:	89 83       	std	Y+1, r24	; 0x01
    1a8a:	89 81       	ldd	r24, Y+1	; 0x01
    1a8c:	9a 81       	ldd	r25, Y+2	; 0x02
    1a8e:	99 23       	and	r25, r25
    1a90:	3c f4       	brge	.+14     	; 0x1aa0 <itoa1+0x3a>
         n = -n;          /* make n positive */
    1a92:	8d 81       	ldd	r24, Y+5	; 0x05
    1a94:	9e 81       	ldd	r25, Y+6	; 0x06
    1a96:	90 95       	com	r25
    1a98:	81 95       	neg	r24
    1a9a:	9f 4f       	sbci	r25, 0xFF	; 255
    1a9c:	9e 83       	std	Y+6, r25	; 0x06
    1a9e:	8d 83       	std	Y+5, r24	; 0x05
    i = 0;
    1aa0:	1c 82       	std	Y+4, r1	; 0x04
    1aa2:	1b 82       	std	Y+3, r1	; 0x03
    do {       /* generate digits in reverse order */
         s[i++] = n % 10 + '0'; /* get next digit */
    1aa4:	2b 81       	ldd	r18, Y+3	; 0x03
    1aa6:	3c 81       	ldd	r19, Y+4	; 0x04
    1aa8:	8f 81       	ldd	r24, Y+7	; 0x07
    1aaa:	98 85       	ldd	r25, Y+8	; 0x08
    1aac:	fc 01       	movw	r30, r24
    1aae:	e2 0f       	add	r30, r18
    1ab0:	f3 1f       	adc	r31, r19
    1ab2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ab4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ab6:	2a e0       	ldi	r18, 0x0A	; 10
    1ab8:	30 e0       	ldi	r19, 0x00	; 0
    1aba:	b9 01       	movw	r22, r18
    1abc:	0e 94 92 19 	call	0x3324	; 0x3324 <__divmodhi4>
    1ac0:	80 5d       	subi	r24, 0xD0	; 208
    1ac2:	80 83       	st	Z, r24
    1ac4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ac6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ac8:	01 96       	adiw	r24, 0x01	; 1
    1aca:	9c 83       	std	Y+4, r25	; 0x04
    1acc:	8b 83       	std	Y+3, r24	; 0x03
    } while ((n /= 10) > 0);     /* delete it */
    1ace:	8d 81       	ldd	r24, Y+5	; 0x05
    1ad0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ad2:	2a e0       	ldi	r18, 0x0A	; 10
    1ad4:	30 e0       	ldi	r19, 0x00	; 0
    1ad6:	b9 01       	movw	r22, r18
    1ad8:	0e 94 92 19 	call	0x3324	; 0x3324 <__divmodhi4>
    1adc:	cb 01       	movw	r24, r22
    1ade:	9e 83       	std	Y+6, r25	; 0x06
    1ae0:	8d 83       	std	Y+5, r24	; 0x05
    1ae2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ae4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ae6:	18 16       	cp	r1, r24
    1ae8:	19 06       	cpc	r1, r25
    1aea:	e4 f2       	brlt	.-72     	; 0x1aa4 <itoa1+0x3e>
    if (sign < 0)
    1aec:	89 81       	ldd	r24, Y+1	; 0x01
    1aee:	9a 81       	ldd	r25, Y+2	; 0x02
    1af0:	99 23       	and	r25, r25
    1af2:	74 f4       	brge	.+28     	; 0x1b10 <itoa1+0xaa>
         s[i++] = '-';
    1af4:	2b 81       	ldd	r18, Y+3	; 0x03
    1af6:	3c 81       	ldd	r19, Y+4	; 0x04
    1af8:	8f 81       	ldd	r24, Y+7	; 0x07
    1afa:	98 85       	ldd	r25, Y+8	; 0x08
    1afc:	fc 01       	movw	r30, r24
    1afe:	e2 0f       	add	r30, r18
    1b00:	f3 1f       	adc	r31, r19
    1b02:	8d e2       	ldi	r24, 0x2D	; 45
    1b04:	80 83       	st	Z, r24
    1b06:	8b 81       	ldd	r24, Y+3	; 0x03
    1b08:	9c 81       	ldd	r25, Y+4	; 0x04
    1b0a:	01 96       	adiw	r24, 0x01	; 1
    1b0c:	9c 83       	std	Y+4, r25	; 0x04
    1b0e:	8b 83       	std	Y+3, r24	; 0x03
    s[i] = '\0';
    1b10:	2b 81       	ldd	r18, Y+3	; 0x03
    1b12:	3c 81       	ldd	r19, Y+4	; 0x04
    1b14:	8f 81       	ldd	r24, Y+7	; 0x07
    1b16:	98 85       	ldd	r25, Y+8	; 0x08
    1b18:	fc 01       	movw	r30, r24
    1b1a:	e2 0f       	add	r30, r18
    1b1c:	f3 1f       	adc	r31, r19
    1b1e:	10 82       	st	Z, r1
    reverse(s);
    1b20:	8f 81       	ldd	r24, Y+7	; 0x07
    1b22:	98 85       	ldd	r25, Y+8	; 0x08
    1b24:	0e 94 de 0c 	call	0x19bc	; 0x19bc <reverse>
}
    1b28:	28 96       	adiw	r28, 0x08	; 8
    1b2a:	0f b6       	in	r0, 0x3f	; 63
    1b2c:	f8 94       	cli
    1b2e:	de bf       	out	0x3e, r29	; 62
    1b30:	0f be       	out	0x3f, r0	; 63
    1b32:	cd bf       	out	0x3d, r28	; 61
    1b34:	cf 91       	pop	r28
    1b36:	df 91       	pop	r29
    1b38:	08 95       	ret

00001b3a <LCD_DISPLAY_INT_2>:

}*/
	

void LCD_DISPLAY_INT_2(int val)
{	
    1b3a:	df 93       	push	r29
    1b3c:	cf 93       	push	r28
    1b3e:	0f 92       	push	r0
    1b40:	0f 92       	push	r0
    1b42:	cd b7       	in	r28, 0x3d	; 61
    1b44:	de b7       	in	r29, 0x3e	; 62
    1b46:	9a 83       	std	Y+2, r25	; 0x02
    1b48:	89 83       	std	Y+1, r24	; 0x01


lcd_print(2,1,val,4);
    1b4a:	29 81       	ldd	r18, Y+1	; 0x01
    1b4c:	3a 81       	ldd	r19, Y+2	; 0x02
    1b4e:	82 e0       	ldi	r24, 0x02	; 2
    1b50:	61 e0       	ldi	r22, 0x01	; 1
    1b52:	a9 01       	movw	r20, r18
    1b54:	24 e0       	ldi	r18, 0x04	; 4
    1b56:	30 e0       	ldi	r19, 0x00	; 0
    1b58:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <lcd_print>

}
    1b5c:	0f 90       	pop	r0
    1b5e:	0f 90       	pop	r0
    1b60:	cf 91       	pop	r28
    1b62:	df 91       	pop	r29
    1b64:	08 95       	ret

00001b66 <init_buzzer>:

// BUZZER Functions

/*****Function to Initialize PORTS*****/
void init_buzzer()
{
    1b66:	df 93       	push	r29
    1b68:	cf 93       	push	r28
    1b6a:	cd b7       	in	r28, 0x3d	; 61
    1b6c:	de b7       	in	r29, 0x3e	; 62
	DDRC = DDRC | 0x08;				//Setting PORTC pin3 as outpt
    1b6e:	a7 e2       	ldi	r26, 0x27	; 39
    1b70:	b0 e0       	ldi	r27, 0x00	; 0
    1b72:	e7 e2       	ldi	r30, 0x27	; 39
    1b74:	f0 e0       	ldi	r31, 0x00	; 0
    1b76:	80 81       	ld	r24, Z
    1b78:	88 60       	ori	r24, 0x08	; 8
    1b7a:	8c 93       	st	X, r24
	PORTC = 0x00;				//Initialize Values of PORTC to 0.
    1b7c:	e8 e2       	ldi	r30, 0x28	; 40
    1b7e:	f0 e0       	ldi	r31, 0x00	; 0
    1b80:	10 82       	st	Z, r1
}
    1b82:	cf 91       	pop	r28
    1b84:	df 91       	pop	r29
    1b86:	08 95       	ret

00001b88 <buzzer_delay>:

/***** Buzzer Delay Function*****/
void buzzer_delay()
{
    1b88:	df 93       	push	r29
    1b8a:	cf 93       	push	r28
    1b8c:	cd b7       	in	r28, 0x3d	; 61
    1b8e:	de b7       	in	r29, 0x3e	; 62
    1b90:	6a 97       	sbiw	r28, 0x1a	; 26
    1b92:	0f b6       	in	r0, 0x3f	; 63
    1b94:	f8 94       	cli
    1b96:	de bf       	out	0x3e, r29	; 62
    1b98:	0f be       	out	0x3f, r0	; 63
    1b9a:	cd bf       	out	0x3d, r28	; 61
	unsigned int i;
	for(i=0; i<10;i++)
    1b9c:	1a 8e       	std	Y+26, r1	; 0x1a
    1b9e:	19 8e       	std	Y+25, r1	; 0x19
    1ba0:	c3 c0       	rjmp	.+390    	; 0x1d28 <buzzer_delay+0x1a0>
    1ba2:	80 e0       	ldi	r24, 0x00	; 0
    1ba4:	90 e0       	ldi	r25, 0x00	; 0
    1ba6:	a8 ec       	ldi	r26, 0xC8	; 200
    1ba8:	b2 e4       	ldi	r27, 0x42	; 66
    1baa:	8d 8b       	std	Y+21, r24	; 0x15
    1bac:	9e 8b       	std	Y+22, r25	; 0x16
    1bae:	af 8b       	std	Y+23, r26	; 0x17
    1bb0:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1bb2:	6d 89       	ldd	r22, Y+21	; 0x15
    1bb4:	7e 89       	ldd	r23, Y+22	; 0x16
    1bb6:	8f 89       	ldd	r24, Y+23	; 0x17
    1bb8:	98 8d       	ldd	r25, Y+24	; 0x18
    1bba:	2a ef       	ldi	r18, 0xFA	; 250
    1bbc:	3d ee       	ldi	r19, 0xED	; 237
    1bbe:	4b e6       	ldi	r20, 0x6B	; 107
    1bc0:	50 e4       	ldi	r21, 0x40	; 64
    1bc2:	0e 94 1f 14 	call	0x283e	; 0x283e <__mulsf3>
    1bc6:	dc 01       	movw	r26, r24
    1bc8:	cb 01       	movw	r24, r22
    1bca:	89 8b       	std	Y+17, r24	; 0x11
    1bcc:	9a 8b       	std	Y+18, r25	; 0x12
    1bce:	ab 8b       	std	Y+19, r26	; 0x13
    1bd0:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1bd2:	69 89       	ldd	r22, Y+17	; 0x11
    1bd4:	7a 89       	ldd	r23, Y+18	; 0x12
    1bd6:	8b 89       	ldd	r24, Y+19	; 0x13
    1bd8:	9c 89       	ldd	r25, Y+20	; 0x14
    1bda:	20 e0       	ldi	r18, 0x00	; 0
    1bdc:	30 e0       	ldi	r19, 0x00	; 0
    1bde:	40 e8       	ldi	r20, 0x80	; 128
    1be0:	5f e3       	ldi	r21, 0x3F	; 63
    1be2:	0e 94 25 16 	call	0x2c4a	; 0x2c4a <__ltsf2>
    1be6:	88 23       	and	r24, r24
    1be8:	1c f4       	brge	.+6      	; 0x1bf0 <buzzer_delay+0x68>
		__ticks = 1;
    1bea:	81 e0       	ldi	r24, 0x01	; 1
    1bec:	88 8b       	std	Y+16, r24	; 0x10
    1bee:	91 c0       	rjmp	.+290    	; 0x1d12 <buzzer_delay+0x18a>
	else if (__tmp > 255)
    1bf0:	69 89       	ldd	r22, Y+17	; 0x11
    1bf2:	7a 89       	ldd	r23, Y+18	; 0x12
    1bf4:	8b 89       	ldd	r24, Y+19	; 0x13
    1bf6:	9c 89       	ldd	r25, Y+20	; 0x14
    1bf8:	20 e0       	ldi	r18, 0x00	; 0
    1bfa:	30 e0       	ldi	r19, 0x00	; 0
    1bfc:	4f e7       	ldi	r20, 0x7F	; 127
    1bfe:	53 e4       	ldi	r21, 0x43	; 67
    1c00:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <__gtsf2>
    1c04:	18 16       	cp	r1, r24
    1c06:	0c f0       	brlt	.+2      	; 0x1c0a <buzzer_delay+0x82>
    1c08:	7b c0       	rjmp	.+246    	; 0x1d00 <buzzer_delay+0x178>
	{
		_delay_ms(__us / 1000.0);
    1c0a:	6d 89       	ldd	r22, Y+21	; 0x15
    1c0c:	7e 89       	ldd	r23, Y+22	; 0x16
    1c0e:	8f 89       	ldd	r24, Y+23	; 0x17
    1c10:	98 8d       	ldd	r25, Y+24	; 0x18
    1c12:	20 e0       	ldi	r18, 0x00	; 0
    1c14:	30 e0       	ldi	r19, 0x00	; 0
    1c16:	4a e7       	ldi	r20, 0x7A	; 122
    1c18:	54 e4       	ldi	r21, 0x44	; 68
    1c1a:	0e 94 19 15 	call	0x2a32	; 0x2a32 <__divsf3>
    1c1e:	dc 01       	movw	r26, r24
    1c20:	cb 01       	movw	r24, r22
    1c22:	8c 87       	std	Y+12, r24	; 0x0c
    1c24:	9d 87       	std	Y+13, r25	; 0x0d
    1c26:	ae 87       	std	Y+14, r26	; 0x0e
    1c28:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c2a:	6c 85       	ldd	r22, Y+12	; 0x0c
    1c2c:	7d 85       	ldd	r23, Y+13	; 0x0d
    1c2e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1c30:	9f 85       	ldd	r25, Y+15	; 0x0f
    1c32:	2d ec       	ldi	r18, 0xCD	; 205
    1c34:	3c ec       	ldi	r19, 0xCC	; 204
    1c36:	4c e2       	ldi	r20, 0x2C	; 44
    1c38:	55 e4       	ldi	r21, 0x45	; 69
    1c3a:	0e 94 1f 14 	call	0x283e	; 0x283e <__mulsf3>
    1c3e:	dc 01       	movw	r26, r24
    1c40:	cb 01       	movw	r24, r22
    1c42:	88 87       	std	Y+8, r24	; 0x08
    1c44:	99 87       	std	Y+9, r25	; 0x09
    1c46:	aa 87       	std	Y+10, r26	; 0x0a
    1c48:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1c4a:	68 85       	ldd	r22, Y+8	; 0x08
    1c4c:	79 85       	ldd	r23, Y+9	; 0x09
    1c4e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c50:	9b 85       	ldd	r25, Y+11	; 0x0b
    1c52:	20 e0       	ldi	r18, 0x00	; 0
    1c54:	30 e0       	ldi	r19, 0x00	; 0
    1c56:	40 e8       	ldi	r20, 0x80	; 128
    1c58:	5f e3       	ldi	r21, 0x3F	; 63
    1c5a:	0e 94 25 16 	call	0x2c4a	; 0x2c4a <__ltsf2>
    1c5e:	88 23       	and	r24, r24
    1c60:	2c f4       	brge	.+10     	; 0x1c6c <buzzer_delay+0xe4>
		__ticks = 1;
    1c62:	81 e0       	ldi	r24, 0x01	; 1
    1c64:	90 e0       	ldi	r25, 0x00	; 0
    1c66:	9f 83       	std	Y+7, r25	; 0x07
    1c68:	8e 83       	std	Y+6, r24	; 0x06
    1c6a:	3f c0       	rjmp	.+126    	; 0x1cea <buzzer_delay+0x162>
	else if (__tmp > 65535)
    1c6c:	68 85       	ldd	r22, Y+8	; 0x08
    1c6e:	79 85       	ldd	r23, Y+9	; 0x09
    1c70:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c72:	9b 85       	ldd	r25, Y+11	; 0x0b
    1c74:	20 e0       	ldi	r18, 0x00	; 0
    1c76:	3f ef       	ldi	r19, 0xFF	; 255
    1c78:	4f e7       	ldi	r20, 0x7F	; 127
    1c7a:	57 e4       	ldi	r21, 0x47	; 71
    1c7c:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <__gtsf2>
    1c80:	18 16       	cp	r1, r24
    1c82:	4c f5       	brge	.+82     	; 0x1cd6 <buzzer_delay+0x14e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c84:	6c 85       	ldd	r22, Y+12	; 0x0c
    1c86:	7d 85       	ldd	r23, Y+13	; 0x0d
    1c88:	8e 85       	ldd	r24, Y+14	; 0x0e
    1c8a:	9f 85       	ldd	r25, Y+15	; 0x0f
    1c8c:	20 e0       	ldi	r18, 0x00	; 0
    1c8e:	30 e0       	ldi	r19, 0x00	; 0
    1c90:	40 e2       	ldi	r20, 0x20	; 32
    1c92:	51 e4       	ldi	r21, 0x41	; 65
    1c94:	0e 94 1f 14 	call	0x283e	; 0x283e <__mulsf3>
    1c98:	dc 01       	movw	r26, r24
    1c9a:	cb 01       	movw	r24, r22
    1c9c:	bc 01       	movw	r22, r24
    1c9e:	cd 01       	movw	r24, r26
    1ca0:	0e 94 49 12 	call	0x2492	; 0x2492 <__fixunssfsi>
    1ca4:	dc 01       	movw	r26, r24
    1ca6:	cb 01       	movw	r24, r22
    1ca8:	9f 83       	std	Y+7, r25	; 0x07
    1caa:	8e 83       	std	Y+6, r24	; 0x06
    1cac:	0f c0       	rjmp	.+30     	; 0x1ccc <buzzer_delay+0x144>
    1cae:	84 e1       	ldi	r24, 0x14	; 20
    1cb0:	91 e0       	ldi	r25, 0x01	; 1
    1cb2:	9d 83       	std	Y+5, r25	; 0x05
    1cb4:	8c 83       	std	Y+4, r24	; 0x04
    1cb6:	8c 81       	ldd	r24, Y+4	; 0x04
    1cb8:	9d 81       	ldd	r25, Y+5	; 0x05
    1cba:	01 97       	sbiw	r24, 0x01	; 1
    1cbc:	f1 f7       	brne	.-4      	; 0x1cba <buzzer_delay+0x132>
    1cbe:	9d 83       	std	Y+5, r25	; 0x05
    1cc0:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cc2:	8e 81       	ldd	r24, Y+6	; 0x06
    1cc4:	9f 81       	ldd	r25, Y+7	; 0x07
    1cc6:	01 97       	sbiw	r24, 0x01	; 1
    1cc8:	9f 83       	std	Y+7, r25	; 0x07
    1cca:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ccc:	8e 81       	ldd	r24, Y+6	; 0x06
    1cce:	9f 81       	ldd	r25, Y+7	; 0x07
    1cd0:	00 97       	sbiw	r24, 0x00	; 0
    1cd2:	69 f7       	brne	.-38     	; 0x1cae <buzzer_delay+0x126>
    1cd4:	24 c0       	rjmp	.+72     	; 0x1d1e <buzzer_delay+0x196>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cd6:	68 85       	ldd	r22, Y+8	; 0x08
    1cd8:	79 85       	ldd	r23, Y+9	; 0x09
    1cda:	8a 85       	ldd	r24, Y+10	; 0x0a
    1cdc:	9b 85       	ldd	r25, Y+11	; 0x0b
    1cde:	0e 94 49 12 	call	0x2492	; 0x2492 <__fixunssfsi>
    1ce2:	dc 01       	movw	r26, r24
    1ce4:	cb 01       	movw	r24, r22
    1ce6:	9f 83       	std	Y+7, r25	; 0x07
    1ce8:	8e 83       	std	Y+6, r24	; 0x06
    1cea:	8e 81       	ldd	r24, Y+6	; 0x06
    1cec:	9f 81       	ldd	r25, Y+7	; 0x07
    1cee:	9b 83       	std	Y+3, r25	; 0x03
    1cf0:	8a 83       	std	Y+2, r24	; 0x02
    1cf2:	8a 81       	ldd	r24, Y+2	; 0x02
    1cf4:	9b 81       	ldd	r25, Y+3	; 0x03
    1cf6:	01 97       	sbiw	r24, 0x01	; 1
    1cf8:	f1 f7       	brne	.-4      	; 0x1cf6 <buzzer_delay+0x16e>
    1cfa:	9b 83       	std	Y+3, r25	; 0x03
    1cfc:	8a 83       	std	Y+2, r24	; 0x02
    1cfe:	0f c0       	rjmp	.+30     	; 0x1d1e <buzzer_delay+0x196>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1d00:	69 89       	ldd	r22, Y+17	; 0x11
    1d02:	7a 89       	ldd	r23, Y+18	; 0x12
    1d04:	8b 89       	ldd	r24, Y+19	; 0x13
    1d06:	9c 89       	ldd	r25, Y+20	; 0x14
    1d08:	0e 94 49 12 	call	0x2492	; 0x2492 <__fixunssfsi>
    1d0c:	dc 01       	movw	r26, r24
    1d0e:	cb 01       	movw	r24, r22
    1d10:	88 8b       	std	Y+16, r24	; 0x10
    1d12:	88 89       	ldd	r24, Y+16	; 0x10
    1d14:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1d16:	89 81       	ldd	r24, Y+1	; 0x01
    1d18:	8a 95       	dec	r24
    1d1a:	f1 f7       	brne	.-4      	; 0x1d18 <buzzer_delay+0x190>
    1d1c:	89 83       	std	Y+1, r24	; 0x01
    1d1e:	89 8d       	ldd	r24, Y+25	; 0x19
    1d20:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1d22:	01 96       	adiw	r24, 0x01	; 1
    1d24:	9a 8f       	std	Y+26, r25	; 0x1a
    1d26:	89 8f       	std	Y+25, r24	; 0x19
    1d28:	89 8d       	ldd	r24, Y+25	; 0x19
    1d2a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1d2c:	8a 30       	cpi	r24, 0x0A	; 10
    1d2e:	91 05       	cpc	r25, r1
    1d30:	08 f4       	brcc	.+2      	; 0x1d34 <buzzer_delay+0x1ac>
    1d32:	37 cf       	rjmp	.-402    	; 0x1ba2 <buzzer_delay+0x1a>
	{
		_delay_us(100);
	}
}
    1d34:	6a 96       	adiw	r28, 0x1a	; 26
    1d36:	0f b6       	in	r0, 0x3f	; 63
    1d38:	f8 94       	cli
    1d3a:	de bf       	out	0x3e, r29	; 62
    1d3c:	0f be       	out	0x3f, r0	; 63
    1d3e:	cd bf       	out	0x3d, r28	; 61
    1d40:	cf 91       	pop	r28
    1d42:	df 91       	pop	r29
    1d44:	08 95       	ret

00001d46 <BUZZER_ON>:

void BUZZER_ON()
{
    1d46:	df 93       	push	r29
    1d48:	cf 93       	push	r28
    1d4a:	00 d0       	rcall	.+0      	; 0x1d4c <BUZZER_ON+0x6>
    1d4c:	cd b7       	in	r28, 0x3d	; 61
    1d4e:	de b7       	in	r29, 0x3e	; 62

int i=0; 
    1d50:	1b 82       	std	Y+3, r1	; 0x03
    1d52:	1a 82       	std	Y+2, r1	; 0x02
   unsigned char port_C_copy;
   port_C_copy = PORTC;
    1d54:	e8 e2       	ldi	r30, 0x28	; 40
    1d56:	f0 e0       	ldi	r31, 0x00	; 0
    1d58:	80 81       	ld	r24, Z
    1d5a:	89 83       	std	Y+1, r24	; 0x01
   port_C_copy = port_C_copy | 0x08;
    1d5c:	89 81       	ldd	r24, Y+1	; 0x01
    1d5e:	88 60       	ori	r24, 0x08	; 8
    1d60:	89 83       	std	Y+1, r24	; 0x01
   PORTC = port_C_copy;	
    1d62:	e8 e2       	ldi	r30, 0x28	; 40
    1d64:	f0 e0       	ldi	r31, 0x00	; 0
    1d66:	89 81       	ldd	r24, Y+1	; 0x01
    1d68:	80 83       	st	Z, r24
   //for(i=0;i<10;i++)
	//tick_timer();
	buzzer_delay();
    1d6a:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <buzzer_delay>
   port_C_copy = PORTC;
    1d6e:	e8 e2       	ldi	r30, 0x28	; 40
    1d70:	f0 e0       	ldi	r31, 0x00	; 0
    1d72:	80 81       	ld	r24, Z
    1d74:	89 83       	std	Y+1, r24	; 0x01
   port_C_copy = port_C_copy & 0xF7;
    1d76:	89 81       	ldd	r24, Y+1	; 0x01
    1d78:	87 7f       	andi	r24, 0xF7	; 247
    1d7a:	89 83       	std	Y+1, r24	; 0x01
   PORTC = port_C_copy;	
    1d7c:	e8 e2       	ldi	r30, 0x28	; 40
    1d7e:	f0 e0       	ldi	r31, 0x00	; 0
    1d80:	89 81       	ldd	r24, Y+1	; 0x01
    1d82:	80 83       	st	Z, r24

//PORTC = 0x08;			//Set pin3 to turn the "buzzer ON"
//buzzer_delay();			//delay


}
    1d84:	0f 90       	pop	r0
    1d86:	0f 90       	pop	r0
    1d88:	0f 90       	pop	r0
    1d8a:	cf 91       	pop	r28
    1d8c:	df 91       	pop	r29
    1d8e:	08 95       	ret

00001d90 <BUZZER_OFF>:


void BUZZER_OFF()
{
    1d90:	df 93       	push	r29
    1d92:	cf 93       	push	r28
    1d94:	cd b7       	in	r28, 0x3d	; 61
    1d96:	de b7       	in	r29, 0x3e	; 62

PORTC = 0x00;			//Clear pin3 to turn the "buzzer OFF"
    1d98:	e8 e2       	ldi	r30, 0x28	; 40
    1d9a:	f0 e0       	ldi	r31, 0x00	; 0
    1d9c:	10 82       	st	Z, r1
buzzer_delay();			//delay
    1d9e:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <buzzer_delay>

}
    1da2:	cf 91       	pop	r28
    1da4:	df 91       	pop	r29
    1da6:	08 95       	ret

00001da8 <init_dist_measure>:
#include "buzzer.h"


//initialise the ports used for distance measurment ISR
init_dist_measure()
{
    1da8:	df 93       	push	r29
    1daa:	cf 93       	push	r28
    1dac:	0f 92       	push	r0
    1dae:	0f 92       	push	r0
    1db0:	cd b7       	in	r28, 0x3d	; 61
    1db2:	de b7       	in	r29, 0x3e	; 62
	DDRE = 0x00;
    1db4:	ed e2       	ldi	r30, 0x2D	; 45
    1db6:	f0 e0       	ldi	r31, 0x00	; 0
    1db8:	10 82       	st	Z, r1
	PORTE = PORTE | 0x30;
    1dba:	ae e2       	ldi	r26, 0x2E	; 46
    1dbc:	b0 e0       	ldi	r27, 0x00	; 0
    1dbe:	ee e2       	ldi	r30, 0x2E	; 46
    1dc0:	f0 e0       	ldi	r31, 0x00	; 0
    1dc2:	80 81       	ld	r24, Z
    1dc4:	80 63       	ori	r24, 0x30	; 48
    1dc6:	8c 93       	st	X, r24
}
    1dc8:	0f 90       	pop	r0
    1dca:	0f 90       	pop	r0
    1dcc:	cf 91       	pop	r28
    1dce:	df 91       	pop	r29
    1dd0:	08 95       	ret

00001dd2 <uart0_init>:

//init uart 0 for zegbee
void uart0_init(void)
{
    1dd2:	df 93       	push	r29
    1dd4:	cf 93       	push	r28
    1dd6:	cd b7       	in	r28, 0x3d	; 61
    1dd8:	de b7       	in	r29, 0x3e	; 62
UCSR0B = 0x00; //disable while setting baud rate
    1dda:	e1 ec       	ldi	r30, 0xC1	; 193
    1ddc:	f0 e0       	ldi	r31, 0x00	; 0
    1dde:	10 82       	st	Z, r1
UCSR0A = 0x00;
    1de0:	e0 ec       	ldi	r30, 0xC0	; 192
    1de2:	f0 e0       	ldi	r31, 0x00	; 0
    1de4:	10 82       	st	Z, r1
UCSR0C = 0x06;
    1de6:	e2 ec       	ldi	r30, 0xC2	; 194
    1de8:	f0 e0       	ldi	r31, 0x00	; 0
    1dea:	86 e0       	ldi	r24, 0x06	; 6
    1dec:	80 83       	st	Z, r24
UBRR0L = 0x47; //set baud rate lo set to 9600
    1dee:	e4 ec       	ldi	r30, 0xC4	; 196
    1df0:	f0 e0       	ldi	r31, 0x00	; 0
    1df2:	87 e4       	ldi	r24, 0x47	; 71
    1df4:	80 83       	st	Z, r24
UBRR0H = 0x00; //set baud rate hi
    1df6:	e5 ec       	ldi	r30, 0xC5	; 197
    1df8:	f0 e0       	ldi	r31, 0x00	; 0
    1dfa:	10 82       	st	Z, r1
UCSR0B = 0x90;	//98
    1dfc:	e1 ec       	ldi	r30, 0xC1	; 193
    1dfe:	f0 e0       	ldi	r31, 0x00	; 0
    1e00:	80 e9       	ldi	r24, 0x90	; 144
    1e02:	80 83       	st	Z, r24

}
    1e04:	cf 91       	pop	r28
    1e06:	df 91       	pop	r29
    1e08:	08 95       	ret

00001e0a <init_devices>:

//Function to initialize ports
void init_devices()
{
    1e0a:	df 93       	push	r29
    1e0c:	cf 93       	push	r28
    1e0e:	cd b7       	in	r28, 0x3d	; 61
    1e10:	de b7       	in	r29, 0x3e	; 62
 cli(); //Clears the global interrupts
    1e12:	f8 94       	cli
 motion_pin_config();
    1e14:	0e 94 d6 00 	call	0x1ac	; 0x1ac <motion_pin_config>
 port_init();
    1e18:	0e 94 fd 01 	call	0x3fa	; 0x3fa <port_init>
 init_adc();
    1e1c:	0e 94 06 02 	call	0x40c	; 0x40c <init_adc>
 timer5_init();
    1e20:	0e 94 72 01 	call	0x2e4	; 0x2e4 <timer5_init>
 init_lcd();
    1e24:	0e 94 0a 03 	call	0x614	; 0x614 <init_lcd>
 lcd_init();
    1e28:	0e 94 33 08 	call	0x1066	; 0x1066 <lcd_init>
 lcd_set_4bit();
    1e2c:	0e 94 34 03 	call	0x668	; 0x668 <lcd_set_4bit>

 init_buzzer();
    1e30:	0e 94 b3 0d 	call	0x1b66	; 0x1b66 <init_buzzer>
 uart0_init();
    1e34:	0e 94 e9 0e 	call	0x1dd2	; 0x1dd2 <uart0_init>
 sei(); //Enables the global interrupts
    1e38:	78 94       	sei
}
    1e3a:	cf 91       	pop	r28
    1e3c:	df 91       	pop	r29
    1e3e:	08 95       	ret

00001e40 <__vector_5>:
unsigned int prevState = 0; 	//1 - white, 0 - black

unsigned int sendOnce = 0;		//1 - send when stoping, 0 - already sent

ISR(INT4_vect)
{
    1e40:	1f 92       	push	r1
    1e42:	0f 92       	push	r0
    1e44:	0f b6       	in	r0, 0x3f	; 63
    1e46:	0f 92       	push	r0
    1e48:	11 24       	eor	r1, r1
    1e4a:	2f 93       	push	r18
    1e4c:	3f 93       	push	r19
    1e4e:	8f 93       	push	r24
    1e50:	9f 93       	push	r25
    1e52:	df 93       	push	r29
    1e54:	cf 93       	push	r28
    1e56:	cd b7       	in	r28, 0x3d	; 61
    1e58:	de b7       	in	r29, 0x3e	; 62
	ShaftCountLeft++; //increment left shaft position count
    1e5a:	80 91 1f 03 	lds	r24, 0x031F
    1e5e:	90 91 20 03 	lds	r25, 0x0320
    1e62:	01 96       	adiw	r24, 0x01	; 1
    1e64:	90 93 20 03 	sts	0x0320, r25
    1e68:	80 93 1f 03 	sts	0x031F, r24
	if(ShaftCountLeft > ShaftCountMax)
    1e6c:	20 91 1f 03 	lds	r18, 0x031F
    1e70:	30 91 20 03 	lds	r19, 0x0320
    1e74:	80 91 0a 02 	lds	r24, 0x020A
    1e78:	90 91 0b 02 	lds	r25, 0x020B
    1e7c:	82 17       	cp	r24, r18
    1e7e:	93 07       	cpc	r25, r19
    1e80:	30 f4       	brcc	.+12     	; 0x1e8e <__vector_5+0x4e>
	{
		completeBlack = 1;
    1e82:	81 e0       	ldi	r24, 0x01	; 1
    1e84:	90 e0       	ldi	r25, 0x00	; 0
    1e86:	90 93 1e 03 	sts	0x031E, r25
    1e8a:	80 93 1d 03 	sts	0x031D, r24
	}
}
    1e8e:	cf 91       	pop	r28
    1e90:	df 91       	pop	r29
    1e92:	9f 91       	pop	r25
    1e94:	8f 91       	pop	r24
    1e96:	3f 91       	pop	r19
    1e98:	2f 91       	pop	r18
    1e9a:	0f 90       	pop	r0
    1e9c:	0f be       	out	0x3f, r0	; 63
    1e9e:	0f 90       	pop	r0
    1ea0:	1f 90       	pop	r1
    1ea2:	18 95       	reti

00001ea4 <__vector_6>:
ISR(INT5_vect)
{
    1ea4:	1f 92       	push	r1
    1ea6:	0f 92       	push	r0
    1ea8:	0f b6       	in	r0, 0x3f	; 63
    1eaa:	0f 92       	push	r0
    1eac:	11 24       	eor	r1, r1
    1eae:	2f 93       	push	r18
    1eb0:	3f 93       	push	r19
    1eb2:	8f 93       	push	r24
    1eb4:	9f 93       	push	r25
    1eb6:	df 93       	push	r29
    1eb8:	cf 93       	push	r28
    1eba:	cd b7       	in	r28, 0x3d	; 61
    1ebc:	de b7       	in	r29, 0x3e	; 62
	ShaftCountRight++; //increment right shaft position count
    1ebe:	80 91 21 03 	lds	r24, 0x0321
    1ec2:	90 91 22 03 	lds	r25, 0x0322
    1ec6:	01 96       	adiw	r24, 0x01	; 1
    1ec8:	90 93 22 03 	sts	0x0322, r25
    1ecc:	80 93 21 03 	sts	0x0321, r24
	if(ShaftCountRight > ShaftCountMax)
    1ed0:	20 91 21 03 	lds	r18, 0x0321
    1ed4:	30 91 22 03 	lds	r19, 0x0322
    1ed8:	80 91 0a 02 	lds	r24, 0x020A
    1edc:	90 91 0b 02 	lds	r25, 0x020B
    1ee0:	82 17       	cp	r24, r18
    1ee2:	93 07       	cpc	r25, r19
    1ee4:	30 f4       	brcc	.+12     	; 0x1ef2 <__vector_6+0x4e>
	{
		completeBlack = 1;
    1ee6:	81 e0       	ldi	r24, 0x01	; 1
    1ee8:	90 e0       	ldi	r25, 0x00	; 0
    1eea:	90 93 1e 03 	sts	0x031E, r25
    1eee:	80 93 1d 03 	sts	0x031D, r24
	}
}
    1ef2:	cf 91       	pop	r28
    1ef4:	df 91       	pop	r29
    1ef6:	9f 91       	pop	r25
    1ef8:	8f 91       	pop	r24
    1efa:	3f 91       	pop	r19
    1efc:	2f 91       	pop	r18
    1efe:	0f 90       	pop	r0
    1f00:	0f be       	out	0x3f, r0	; 63
    1f02:	0f 90       	pop	r0
    1f04:	1f 90       	pop	r1
    1f06:	18 95       	reti

00001f08 <__vector_25>:

SIGNAL(SIG_USART0_RECV) // ISR for receive complete interrupt
{
    1f08:	1f 92       	push	r1
    1f0a:	0f 92       	push	r0
    1f0c:	0f b6       	in	r0, 0x3f	; 63
    1f0e:	0f 92       	push	r0
    1f10:	00 90 5b 00 	lds	r0, 0x005B
    1f14:	0f 92       	push	r0
    1f16:	11 24       	eor	r1, r1
    1f18:	2f 93       	push	r18
    1f1a:	3f 93       	push	r19
    1f1c:	4f 93       	push	r20
    1f1e:	5f 93       	push	r21
    1f20:	6f 93       	push	r22
    1f22:	7f 93       	push	r23
    1f24:	8f 93       	push	r24
    1f26:	9f 93       	push	r25
    1f28:	af 93       	push	r26
    1f2a:	bf 93       	push	r27
    1f2c:	ef 93       	push	r30
    1f2e:	ff 93       	push	r31
    1f30:	df 93       	push	r29
    1f32:	cf 93       	push	r28
    1f34:	cd b7       	in	r28, 0x3d	; 61
    1f36:	de b7       	in	r29, 0x3e	; 62
	command = UDR0; //making copy of data from UDR0 in 'data' variable
    1f38:	e6 ec       	ldi	r30, 0xC6	; 198
    1f3a:	f0 e0       	ldi	r31, 0x00	; 0
    1f3c:	80 81       	ld	r24, Z
    1f3e:	80 93 1a 03 	sts	0x031A, r24
	//LCD_DISPLAY_INT_1(4);
	if(command == 0x38) //ASCII value of 8
    1f42:	80 91 1a 03 	lds	r24, 0x031A
    1f46:	88 33       	cpi	r24, 0x38	; 56
    1f48:	71 f4       	brne	.+28     	; 0x1f66 <__vector_25+0x5e>
		{
			BUZZER_ON();
    1f4a:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <BUZZER_ON>
			prevState = 1;
    1f4e:	81 e0       	ldi	r24, 0x01	; 1
    1f50:	90 e0       	ldi	r25, 0x00	; 0
    1f52:	90 93 28 03 	sts	0x0328, r25
    1f56:	80 93 27 03 	sts	0x0327, r24
			sendOnce = 1;
    1f5a:	81 e0       	ldi	r24, 0x01	; 1
    1f5c:	90 e0       	ldi	r25, 0x00	; 0
    1f5e:	90 93 2a 03 	sts	0x032A, r25
    1f62:	80 93 29 03 	sts	0x0329, r24
			//UCSR0B = UCSR0B | 0xbf;
		} 

}
    1f66:	cf 91       	pop	r28
    1f68:	df 91       	pop	r29
    1f6a:	ff 91       	pop	r31
    1f6c:	ef 91       	pop	r30
    1f6e:	bf 91       	pop	r27
    1f70:	af 91       	pop	r26
    1f72:	9f 91       	pop	r25
    1f74:	8f 91       	pop	r24
    1f76:	7f 91       	pop	r23
    1f78:	6f 91       	pop	r22
    1f7a:	5f 91       	pop	r21
    1f7c:	4f 91       	pop	r20
    1f7e:	3f 91       	pop	r19
    1f80:	2f 91       	pop	r18
    1f82:	0f 90       	pop	r0
    1f84:	00 92 5b 00 	sts	0x005B, r0
    1f88:	0f 90       	pop	r0
    1f8a:	0f be       	out	0x3f, r0	; 63
    1f8c:	0f 90       	pop	r0
    1f8e:	1f 90       	pop	r1
    1f90:	18 95       	reti

00001f92 <main>:

	

void main(void)
{
    1f92:	df 93       	push	r29
    1f94:	cf 93       	push	r28
    1f96:	cd b7       	in	r28, 0x3d	; 61
    1f98:	de b7       	in	r29, 0x3e	; 62
	init_devices();	//defined in firebird_winavr.h.  It initialize all necessary ports for LCD, Buzzer, Motion control and IR sensor.
    1f9a:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <init_devices>
	position = 0;
    1f9e:	10 92 19 03 	sts	0x0319, r1
    1fa2:	10 92 18 03 	sts	0x0318, r1
	init_dist_measure();
    1fa6:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <init_dist_measure>

	UCSR0B = UCSR0B | 0x10; //set bit4 = rx enables
    1faa:	a1 ec       	ldi	r26, 0xC1	; 193
    1fac:	b0 e0       	ldi	r27, 0x00	; 0
    1fae:	e1 ec       	ldi	r30, 0xC1	; 193
    1fb0:	f0 e0       	ldi	r31, 0x00	; 0
    1fb2:	80 81       	ld	r24, Z
    1fb4:	80 61       	ori	r24, 0x10	; 16
    1fb6:	8c 93       	st	X, r24
	UCSR0B = UCSR0B | 0x08; //set bit3 = tx enable
    1fb8:	a1 ec       	ldi	r26, 0xC1	; 193
    1fba:	b0 e0       	ldi	r27, 0x00	; 0
    1fbc:	e1 ec       	ldi	r30, 0xC1	; 193
    1fbe:	f0 e0       	ldi	r31, 0x00	; 0
    1fc0:	80 81       	ld	r24, Z
    1fc2:	88 60       	ori	r24, 0x08	; 8
    1fc4:	8c 93       	st	X, r24
	UCSR0B = UCSR0B | 0x80; 	//bit-7 enable rx-complet interrupt
    1fc6:	a1 ec       	ldi	r26, 0xC1	; 193
    1fc8:	b0 e0       	ldi	r27, 0x00	; 0
    1fca:	e1 ec       	ldi	r30, 0xC1	; 193
    1fcc:	f0 e0       	ldi	r31, 0x00	; 0
    1fce:	80 81       	ld	r24, Z
    1fd0:	80 68       	ori	r24, 0x80	; 128
    1fd2:	8c 93       	st	X, r24


	while(1)
	{
		RIGHT_WHITELINE_VALUE = LIGHT_RIGHT;	//LIGHT_RIGHT is a macro defines in firebird_winavr.h which returns the right whiteline sensor value.
    1fd4:	81 e0       	ldi	r24, 0x01	; 1
    1fd6:	0e 94 1f 02 	call	0x43e	; 0x43e <ADC_Conversion>
    1fda:	88 2f       	mov	r24, r24
    1fdc:	90 e0       	ldi	r25, 0x00	; 0
    1fde:	90 93 3b 03 	sts	0x033B, r25
    1fe2:	80 93 3a 03 	sts	0x033A, r24
		MIDDLE_WHITELINE_VALUE = LIGHT_MIDDLE;	// Similar
    1fe6:	82 e0       	ldi	r24, 0x02	; 2
    1fe8:	0e 94 1f 02 	call	0x43e	; 0x43e <ADC_Conversion>
    1fec:	88 2f       	mov	r24, r24
    1fee:	90 e0       	ldi	r25, 0x00	; 0
    1ff0:	90 93 33 03 	sts	0x0333, r25
    1ff4:	80 93 32 03 	sts	0x0332, r24
		LEFT_WHITELINE_VALUE = LIGHT_LEFT;	// Similar
    1ff8:	83 e0       	ldi	r24, 0x03	; 3
    1ffa:	0e 94 1f 02 	call	0x43e	; 0x43e <ADC_Conversion>
    1ffe:	88 2f       	mov	r24, r24
    2000:	90 e0       	ldi	r25, 0x00	; 0
    2002:	90 93 39 03 	sts	0x0339, r25
    2006:	80 93 38 03 	sts	0x0338, r24
		FRONT_IR_VALUE = FRONT_IR;		// Similar
    200a:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <front_dist_mm>
    200e:	90 93 2e 03 	sts	0x032E, r25
    2012:	80 93 2d 03 	sts	0x032D, r24


	//	LCD_DISPLAY_INT_1(FRONT_IR_VALUE);	// Displays IR sensor value on first line of LCD

		LCD_DISPLAY_INT_1(position);
    2016:	80 91 18 03 	lds	r24, 0x0318
    201a:	90 91 19 03 	lds	r25, 0x0319
    201e:	0e 94 c8 0c 	call	0x1990	; 0x1990 <LCD_DISPLAY_INT_1>
		}
		else
		{
			BUZZER_OFF();*/

			if(RIGHT_WHITELINE_VALUE < maxWhite && MIDDLE_WHITELINE_VALUE < maxWhite && LEFT_WHITELINE_VALUE < maxWhite && prevState == 1)
    2022:	20 91 3a 03 	lds	r18, 0x033A
    2026:	30 91 3b 03 	lds	r19, 0x033B
    202a:	80 91 02 02 	lds	r24, 0x0202
    202e:	90 91 03 02 	lds	r25, 0x0203
    2032:	28 17       	cp	r18, r24
    2034:	39 07       	cpc	r19, r25
    2036:	08 f0       	brcs	.+2      	; 0x203a <main+0xa8>
    2038:	4d c0       	rjmp	.+154    	; 0x20d4 <main+0x142>
    203a:	20 91 32 03 	lds	r18, 0x0332
    203e:	30 91 33 03 	lds	r19, 0x0333
    2042:	80 91 02 02 	lds	r24, 0x0202
    2046:	90 91 03 02 	lds	r25, 0x0203
    204a:	28 17       	cp	r18, r24
    204c:	39 07       	cpc	r19, r25
    204e:	08 f0       	brcs	.+2      	; 0x2052 <main+0xc0>
    2050:	41 c0       	rjmp	.+130    	; 0x20d4 <main+0x142>
    2052:	20 91 38 03 	lds	r18, 0x0338
    2056:	30 91 39 03 	lds	r19, 0x0339
    205a:	80 91 02 02 	lds	r24, 0x0202
    205e:	90 91 03 02 	lds	r25, 0x0203
    2062:	28 17       	cp	r18, r24
    2064:	39 07       	cpc	r19, r25
    2066:	b0 f5       	brcc	.+108    	; 0x20d4 <main+0x142>
    2068:	80 91 27 03 	lds	r24, 0x0327
    206c:	90 91 28 03 	lds	r25, 0x0328
    2070:	81 30       	cpi	r24, 0x01	; 1
    2072:	91 05       	cpc	r25, r1
    2074:	79 f5       	brne	.+94     	; 0x20d4 <main+0x142>
			{
				MOTOR_LEFT_SPEED(fastSpeed);
    2076:	80 91 04 02 	lds	r24, 0x0204
    207a:	90 91 05 02 	lds	r25, 0x0205
    207e:	0e 94 b6 01 	call	0x36c	; 0x36c <MOTOR_LEFT_SPEED>
				MOTOR_RIGHT_SPEED(fastSpeed);
    2082:	80 91 04 02 	lds	r24, 0x0204
    2086:	90 91 05 02 	lds	r25, 0x0205
    208a:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <MOTOR_RIGHT_SPEED>
				MOVE_FWD();
    208e:	0e 94 18 01 	call	0x230	; 0x230 <MOVE_FWD>
				LCD_DISPLAY_INT_2(1);
    2092:	81 e0       	ldi	r24, 0x01	; 1
    2094:	90 e0       	ldi	r25, 0x00	; 0
    2096:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <LCD_DISPLAY_INT_2>
				
				startBlack = 1;
    209a:	81 e0       	ldi	r24, 0x01	; 1
    209c:	90 e0       	ldi	r25, 0x00	; 0
    209e:	90 93 1c 03 	sts	0x031C, r25
    20a2:	80 93 1b 03 	sts	0x031B, r24
				prevState = 1;
    20a6:	81 e0       	ldi	r24, 0x01	; 1
    20a8:	90 e0       	ldi	r25, 0x00	; 0
    20aa:	90 93 28 03 	sts	0x0328, r25
    20ae:	80 93 27 03 	sts	0x0327, r24
				prevLeftSpeed = fastSpeed;
    20b2:	80 91 04 02 	lds	r24, 0x0204
    20b6:	90 91 05 02 	lds	r25, 0x0205
    20ba:	90 93 24 03 	sts	0x0324, r25
    20be:	80 93 23 03 	sts	0x0323, r24
				prevRightSpeed = fastSpeed;
    20c2:	80 91 04 02 	lds	r24, 0x0204
    20c6:	90 91 05 02 	lds	r25, 0x0205
    20ca:	90 93 26 03 	sts	0x0326, r25
    20ce:	80 93 25 03 	sts	0x0325, r24
    20d2:	80 cf       	rjmp	.-256    	; 0x1fd4 <main+0x42>
			}
			else
			{
				if(RIGHT_WHITELINE_VALUE < maxWhite && MIDDLE_WHITELINE_VALUE < maxWhite  && prevState == 1)
    20d4:	20 91 3a 03 	lds	r18, 0x033A
    20d8:	30 91 3b 03 	lds	r19, 0x033B
    20dc:	80 91 02 02 	lds	r24, 0x0202
    20e0:	90 91 03 02 	lds	r25, 0x0203
    20e4:	28 17       	cp	r18, r24
    20e6:	39 07       	cpc	r19, r25
    20e8:	08 f0       	brcs	.+2      	; 0x20ec <main+0x15a>
    20ea:	41 c0       	rjmp	.+130    	; 0x216e <main+0x1dc>
    20ec:	20 91 32 03 	lds	r18, 0x0332
    20f0:	30 91 33 03 	lds	r19, 0x0333
    20f4:	80 91 02 02 	lds	r24, 0x0202
    20f8:	90 91 03 02 	lds	r25, 0x0203
    20fc:	28 17       	cp	r18, r24
    20fe:	39 07       	cpc	r19, r25
    2100:	b0 f5       	brcc	.+108    	; 0x216e <main+0x1dc>
    2102:	80 91 27 03 	lds	r24, 0x0327
    2106:	90 91 28 03 	lds	r25, 0x0328
    210a:	81 30       	cpi	r24, 0x01	; 1
    210c:	91 05       	cpc	r25, r1
    210e:	79 f5       	brne	.+94     	; 0x216e <main+0x1dc>
				{
					MOTOR_LEFT_SPEED(fastSpeed);
    2110:	80 91 04 02 	lds	r24, 0x0204
    2114:	90 91 05 02 	lds	r25, 0x0205
    2118:	0e 94 b6 01 	call	0x36c	; 0x36c <MOTOR_LEFT_SPEED>
					MOTOR_RIGHT_SPEED(mediumSpeed);
    211c:	80 91 06 02 	lds	r24, 0x0206
    2120:	90 91 07 02 	lds	r25, 0x0207
    2124:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <MOTOR_RIGHT_SPEED>
					MOVE_FWD();
    2128:	0e 94 18 01 	call	0x230	; 0x230 <MOVE_FWD>
					LCD_DISPLAY_INT_2(2);
    212c:	82 e0       	ldi	r24, 0x02	; 2
    212e:	90 e0       	ldi	r25, 0x00	; 0
    2130:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <LCD_DISPLAY_INT_2>

					startBlack = 1;
    2134:	81 e0       	ldi	r24, 0x01	; 1
    2136:	90 e0       	ldi	r25, 0x00	; 0
    2138:	90 93 1c 03 	sts	0x031C, r25
    213c:	80 93 1b 03 	sts	0x031B, r24
					prevState = 1;
    2140:	81 e0       	ldi	r24, 0x01	; 1
    2142:	90 e0       	ldi	r25, 0x00	; 0
    2144:	90 93 28 03 	sts	0x0328, r25
    2148:	80 93 27 03 	sts	0x0327, r24
					prevLeftSpeed = fastSpeed;
    214c:	80 91 04 02 	lds	r24, 0x0204
    2150:	90 91 05 02 	lds	r25, 0x0205
    2154:	90 93 24 03 	sts	0x0324, r25
    2158:	80 93 23 03 	sts	0x0323, r24
					prevRightSpeed = mediumSpeed;
    215c:	80 91 06 02 	lds	r24, 0x0206
    2160:	90 91 07 02 	lds	r25, 0x0207
    2164:	90 93 26 03 	sts	0x0326, r25
    2168:	80 93 25 03 	sts	0x0325, r24
    216c:	33 cf       	rjmp	.-410    	; 0x1fd4 <main+0x42>
				}
				else
				{
					if(MIDDLE_WHITELINE_VALUE < maxWhite && LEFT_WHITELINE_VALUE < maxWhite  && prevState == 1)
    216e:	20 91 32 03 	lds	r18, 0x0332
    2172:	30 91 33 03 	lds	r19, 0x0333
    2176:	80 91 02 02 	lds	r24, 0x0202
    217a:	90 91 03 02 	lds	r25, 0x0203
    217e:	28 17       	cp	r18, r24
    2180:	39 07       	cpc	r19, r25
    2182:	08 f0       	brcs	.+2      	; 0x2186 <main+0x1f4>
    2184:	41 c0       	rjmp	.+130    	; 0x2208 <__stack+0x9>
    2186:	20 91 38 03 	lds	r18, 0x0338
    218a:	30 91 39 03 	lds	r19, 0x0339
    218e:	80 91 02 02 	lds	r24, 0x0202
    2192:	90 91 03 02 	lds	r25, 0x0203
    2196:	28 17       	cp	r18, r24
    2198:	39 07       	cpc	r19, r25
    219a:	b0 f5       	brcc	.+108    	; 0x2208 <__stack+0x9>
    219c:	80 91 27 03 	lds	r24, 0x0327
    21a0:	90 91 28 03 	lds	r25, 0x0328
    21a4:	81 30       	cpi	r24, 0x01	; 1
    21a6:	91 05       	cpc	r25, r1
    21a8:	79 f5       	brne	.+94     	; 0x2208 <__stack+0x9>
					{
						MOTOR_LEFT_SPEED(mediumSpeed);
    21aa:	80 91 06 02 	lds	r24, 0x0206
    21ae:	90 91 07 02 	lds	r25, 0x0207
    21b2:	0e 94 b6 01 	call	0x36c	; 0x36c <MOTOR_LEFT_SPEED>
						MOTOR_RIGHT_SPEED(fastSpeed);
    21b6:	80 91 04 02 	lds	r24, 0x0204
    21ba:	90 91 05 02 	lds	r25, 0x0205
    21be:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <MOTOR_RIGHT_SPEED>
						MOVE_FWD();
    21c2:	0e 94 18 01 	call	0x230	; 0x230 <MOVE_FWD>
						LCD_DISPLAY_INT_2(3);
    21c6:	83 e0       	ldi	r24, 0x03	; 3
    21c8:	90 e0       	ldi	r25, 0x00	; 0
    21ca:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <LCD_DISPLAY_INT_2>

						startBlack = 1;
    21ce:	81 e0       	ldi	r24, 0x01	; 1
    21d0:	90 e0       	ldi	r25, 0x00	; 0
    21d2:	90 93 1c 03 	sts	0x031C, r25
    21d6:	80 93 1b 03 	sts	0x031B, r24
						prevState = 1;
    21da:	81 e0       	ldi	r24, 0x01	; 1
    21dc:	90 e0       	ldi	r25, 0x00	; 0
    21de:	90 93 28 03 	sts	0x0328, r25
    21e2:	80 93 27 03 	sts	0x0327, r24
						prevLeftSpeed = mediumSpeed;
    21e6:	80 91 06 02 	lds	r24, 0x0206
    21ea:	90 91 07 02 	lds	r25, 0x0207
    21ee:	90 93 24 03 	sts	0x0324, r25
    21f2:	80 93 23 03 	sts	0x0323, r24
						prevRightSpeed = fastSpeed;
    21f6:	80 91 04 02 	lds	r24, 0x0204
    21fa:	90 91 05 02 	lds	r25, 0x0205
    21fe:	90 93 26 03 	sts	0x0326, r25
    2202:	80 93 25 03 	sts	0x0325, r24
    2206:	e6 ce       	rjmp	.-564    	; 0x1fd4 <main+0x42>
					}
					else
					{
						if(RIGHT_WHITELINE_VALUE < maxWhite  && prevState == 1)
    2208:	20 91 3a 03 	lds	r18, 0x033A
    220c:	30 91 3b 03 	lds	r19, 0x033B
    2210:	80 91 02 02 	lds	r24, 0x0202
    2214:	90 91 03 02 	lds	r25, 0x0203
    2218:	28 17       	cp	r18, r24
    221a:	39 07       	cpc	r19, r25
    221c:	b0 f5       	brcc	.+108    	; 0x228a <__stack+0x8b>
    221e:	80 91 27 03 	lds	r24, 0x0327
    2222:	90 91 28 03 	lds	r25, 0x0328
    2226:	81 30       	cpi	r24, 0x01	; 1
    2228:	91 05       	cpc	r25, r1
    222a:	79 f5       	brne	.+94     	; 0x228a <__stack+0x8b>
						{
							MOTOR_LEFT_SPEED(fastSpeed);
    222c:	80 91 04 02 	lds	r24, 0x0204
    2230:	90 91 05 02 	lds	r25, 0x0205
    2234:	0e 94 b6 01 	call	0x36c	; 0x36c <MOTOR_LEFT_SPEED>
							MOTOR_RIGHT_SPEED(slowSpeed);
    2238:	80 91 08 02 	lds	r24, 0x0208
    223c:	90 91 09 02 	lds	r25, 0x0209
    2240:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <MOTOR_RIGHT_SPEED>
							MOVE_FWD();
    2244:	0e 94 18 01 	call	0x230	; 0x230 <MOVE_FWD>
							LCD_DISPLAY_INT_2(4);
    2248:	84 e0       	ldi	r24, 0x04	; 4
    224a:	90 e0       	ldi	r25, 0x00	; 0
    224c:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <LCD_DISPLAY_INT_2>

							startBlack = 1;
    2250:	81 e0       	ldi	r24, 0x01	; 1
    2252:	90 e0       	ldi	r25, 0x00	; 0
    2254:	90 93 1c 03 	sts	0x031C, r25
    2258:	80 93 1b 03 	sts	0x031B, r24
							prevState = 1;
    225c:	81 e0       	ldi	r24, 0x01	; 1
    225e:	90 e0       	ldi	r25, 0x00	; 0
    2260:	90 93 28 03 	sts	0x0328, r25
    2264:	80 93 27 03 	sts	0x0327, r24
							prevLeftSpeed = fastSpeed;
    2268:	80 91 04 02 	lds	r24, 0x0204
    226c:	90 91 05 02 	lds	r25, 0x0205
    2270:	90 93 24 03 	sts	0x0324, r25
    2274:	80 93 23 03 	sts	0x0323, r24
							prevRightSpeed = slowSpeed;
    2278:	80 91 08 02 	lds	r24, 0x0208
    227c:	90 91 09 02 	lds	r25, 0x0209
    2280:	90 93 26 03 	sts	0x0326, r25
    2284:	80 93 25 03 	sts	0x0325, r24
    2288:	a5 ce       	rjmp	.-694    	; 0x1fd4 <main+0x42>
						}
						else
						{
							if(LEFT_WHITELINE_VALUE < maxWhite  && prevState == 1)
    228a:	20 91 38 03 	lds	r18, 0x0338
    228e:	30 91 39 03 	lds	r19, 0x0339
    2292:	80 91 02 02 	lds	r24, 0x0202
    2296:	90 91 03 02 	lds	r25, 0x0203
    229a:	28 17       	cp	r18, r24
    229c:	39 07       	cpc	r19, r25
    229e:	b0 f5       	brcc	.+108    	; 0x230c <__stack+0x10d>
    22a0:	80 91 27 03 	lds	r24, 0x0327
    22a4:	90 91 28 03 	lds	r25, 0x0328
    22a8:	81 30       	cpi	r24, 0x01	; 1
    22aa:	91 05       	cpc	r25, r1
    22ac:	79 f5       	brne	.+94     	; 0x230c <__stack+0x10d>
							{
								MOTOR_LEFT_SPEED(slowSpeed);
    22ae:	80 91 08 02 	lds	r24, 0x0208
    22b2:	90 91 09 02 	lds	r25, 0x0209
    22b6:	0e 94 b6 01 	call	0x36c	; 0x36c <MOTOR_LEFT_SPEED>
								MOTOR_RIGHT_SPEED(fastSpeed);
    22ba:	80 91 04 02 	lds	r24, 0x0204
    22be:	90 91 05 02 	lds	r25, 0x0205
    22c2:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <MOTOR_RIGHT_SPEED>
								MOVE_FWD();
    22c6:	0e 94 18 01 	call	0x230	; 0x230 <MOVE_FWD>
								LCD_DISPLAY_INT_2(5);
    22ca:	85 e0       	ldi	r24, 0x05	; 5
    22cc:	90 e0       	ldi	r25, 0x00	; 0
    22ce:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <LCD_DISPLAY_INT_2>

								startBlack = 1;
    22d2:	81 e0       	ldi	r24, 0x01	; 1
    22d4:	90 e0       	ldi	r25, 0x00	; 0
    22d6:	90 93 1c 03 	sts	0x031C, r25
    22da:	80 93 1b 03 	sts	0x031B, r24
								prevState = 1;
    22de:	81 e0       	ldi	r24, 0x01	; 1
    22e0:	90 e0       	ldi	r25, 0x00	; 0
    22e2:	90 93 28 03 	sts	0x0328, r25
    22e6:	80 93 27 03 	sts	0x0327, r24
								prevLeftSpeed = slowSpeed;
    22ea:	80 91 08 02 	lds	r24, 0x0208
    22ee:	90 91 09 02 	lds	r25, 0x0209
    22f2:	90 93 24 03 	sts	0x0324, r25
    22f6:	80 93 23 03 	sts	0x0323, r24
								prevRightSpeed = fastSpeed;
    22fa:	80 91 04 02 	lds	r24, 0x0204
    22fe:	90 91 05 02 	lds	r25, 0x0205
    2302:	90 93 26 03 	sts	0x0326, r25
    2306:	80 93 25 03 	sts	0x0325, r24
    230a:	64 ce       	rjmp	.-824    	; 0x1fd4 <main+0x42>
							}
							else
							{
								if(MIDDLE_WHITELINE_VALUE < maxWhite  && prevState == 1)
    230c:	20 91 32 03 	lds	r18, 0x0332
    2310:	30 91 33 03 	lds	r19, 0x0333
    2314:	80 91 02 02 	lds	r24, 0x0202
    2318:	90 91 03 02 	lds	r25, 0x0203
    231c:	28 17       	cp	r18, r24
    231e:	39 07       	cpc	r19, r25
    2320:	b0 f5       	brcc	.+108    	; 0x238e <__stack+0x18f>
    2322:	80 91 27 03 	lds	r24, 0x0327
    2326:	90 91 28 03 	lds	r25, 0x0328
    232a:	81 30       	cpi	r24, 0x01	; 1
    232c:	91 05       	cpc	r25, r1
    232e:	79 f5       	brne	.+94     	; 0x238e <__stack+0x18f>
								{
									
									MOTOR_LEFT_SPEED(fastSpeed);
    2330:	80 91 04 02 	lds	r24, 0x0204
    2334:	90 91 05 02 	lds	r25, 0x0205
    2338:	0e 94 b6 01 	call	0x36c	; 0x36c <MOTOR_LEFT_SPEED>
									MOTOR_RIGHT_SPEED(fastSpeed);
    233c:	80 91 04 02 	lds	r24, 0x0204
    2340:	90 91 05 02 	lds	r25, 0x0205
    2344:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <MOTOR_RIGHT_SPEED>
									MOVE_FWD();
    2348:	0e 94 18 01 	call	0x230	; 0x230 <MOVE_FWD>
									LCD_DISPLAY_INT_2(6);
    234c:	86 e0       	ldi	r24, 0x06	; 6
    234e:	90 e0       	ldi	r25, 0x00	; 0
    2350:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <LCD_DISPLAY_INT_2>

									startBlack = 1;
    2354:	81 e0       	ldi	r24, 0x01	; 1
    2356:	90 e0       	ldi	r25, 0x00	; 0
    2358:	90 93 1c 03 	sts	0x031C, r25
    235c:	80 93 1b 03 	sts	0x031B, r24
									prevState = 1;
    2360:	81 e0       	ldi	r24, 0x01	; 1
    2362:	90 e0       	ldi	r25, 0x00	; 0
    2364:	90 93 28 03 	sts	0x0328, r25
    2368:	80 93 27 03 	sts	0x0327, r24
									prevLeftSpeed = fastSpeed;
    236c:	80 91 04 02 	lds	r24, 0x0204
    2370:	90 91 05 02 	lds	r25, 0x0205
    2374:	90 93 24 03 	sts	0x0324, r25
    2378:	80 93 23 03 	sts	0x0323, r24
									prevRightSpeed = fastSpeed;
    237c:	80 91 04 02 	lds	r24, 0x0204
    2380:	90 91 05 02 	lds	r25, 0x0205
    2384:	90 93 26 03 	sts	0x0326, r25
    2388:	80 93 25 03 	sts	0x0325, r24
    238c:	23 ce       	rjmp	.-954    	; 0x1fd4 <main+0x42>
								}
								else		// Here we need to increment the position counter, capture an image, transmit the image to centralized server along with position counter and move the robot to some precise distance so that it will cross the Black mark and proceed further.
								{
									
									if(startBlack ==1)
    238e:	80 91 1b 03 	lds	r24, 0x031B
    2392:	90 91 1c 03 	lds	r25, 0x031C
    2396:	81 30       	cpi	r24, 0x01	; 1
    2398:	91 05       	cpc	r25, r1
    239a:	f1 f4       	brne	.+60     	; 0x23d8 <__stack+0x1d9>
									{
										position++;
    239c:	80 91 18 03 	lds	r24, 0x0318
    23a0:	90 91 19 03 	lds	r25, 0x0319
    23a4:	01 96       	adiw	r24, 0x01	; 1
    23a6:	90 93 19 03 	sts	0x0319, r25
    23aa:	80 93 18 03 	sts	0x0318, r24
										startBlack = 0;
    23ae:	10 92 1c 03 	sts	0x031C, r1
    23b2:	10 92 1b 03 	sts	0x031B, r1
										completeBlack = 0;
    23b6:	10 92 1e 03 	sts	0x031E, r1
    23ba:	10 92 1d 03 	sts	0x031D, r1
										
										//start shaft counter by enabling inturupt 4 and 5
										ShaftCountLeft = 0;
    23be:	10 92 20 03 	sts	0x0320, r1
    23c2:	10 92 1f 03 	sts	0x031F, r1
										ShaftCountRight = 0;
    23c6:	10 92 22 03 	sts	0x0322, r1
    23ca:	10 92 21 03 	sts	0x0321, r1

										prevState = 0;	//set prev state to black
    23ce:	10 92 28 03 	sts	0x0328, r1
    23d2:	10 92 27 03 	sts	0x0327, r1
    23d6:	58 c0       	rjmp	.+176    	; 0x2488 <__stack+0x289>
									}
									else if(completeBlack == 1)		//last stop
    23d8:	80 91 1d 03 	lds	r24, 0x031D
    23dc:	90 91 1e 03 	lds	r25, 0x031E
    23e0:	81 30       	cpi	r24, 0x01	; 1
    23e2:	91 05       	cpc	r25, r1
    23e4:	79 f4       	brne	.+30     	; 0x2404 <__stack+0x205>
									{
										MOTOR_LEFT_SPEED(0);
    23e6:	80 e0       	ldi	r24, 0x00	; 0
    23e8:	90 e0       	ldi	r25, 0x00	; 0
    23ea:	0e 94 b6 01 	call	0x36c	; 0x36c <MOTOR_LEFT_SPEED>
										MOTOR_RIGHT_SPEED(0);
    23ee:	80 e0       	ldi	r24, 0x00	; 0
    23f0:	90 e0       	ldi	r25, 0x00	; 0
    23f2:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <MOTOR_RIGHT_SPEED>
										 
										position = 99;//only for test
    23f6:	83 e6       	ldi	r24, 0x63	; 99
    23f8:	90 e0       	ldi	r25, 0x00	; 0
    23fa:	90 93 19 03 	sts	0x0319, r25
    23fe:	80 93 18 03 	sts	0x0318, r24
    2402:	42 c0       	rjmp	.+132    	; 0x2488 <__stack+0x289>
									}
									//if prevstate is black and u detect white line stop
									else if(prevState == 0 && (RIGHT_WHITELINE_VALUE < maxWhite || MIDDLE_WHITELINE_VALUE < maxWhite || LEFT_WHITELINE_VALUE < maxWhite))
    2404:	80 91 27 03 	lds	r24, 0x0327
    2408:	90 91 28 03 	lds	r25, 0x0328
    240c:	00 97       	sbiw	r24, 0x00	; 0
    240e:	e1 f5       	brne	.+120    	; 0x2488 <__stack+0x289>
    2410:	20 91 3a 03 	lds	r18, 0x033A
    2414:	30 91 3b 03 	lds	r19, 0x033B
    2418:	80 91 02 02 	lds	r24, 0x0202
    241c:	90 91 03 02 	lds	r25, 0x0203
    2420:	28 17       	cp	r18, r24
    2422:	39 07       	cpc	r19, r25
    2424:	b0 f0       	brcs	.+44     	; 0x2452 <__stack+0x253>
    2426:	20 91 32 03 	lds	r18, 0x0332
    242a:	30 91 33 03 	lds	r19, 0x0333
    242e:	80 91 02 02 	lds	r24, 0x0202
    2432:	90 91 03 02 	lds	r25, 0x0203
    2436:	28 17       	cp	r18, r24
    2438:	39 07       	cpc	r19, r25
    243a:	58 f0       	brcs	.+22     	; 0x2452 <__stack+0x253>
    243c:	20 91 38 03 	lds	r18, 0x0338
    2440:	30 91 39 03 	lds	r19, 0x0339
    2444:	80 91 02 02 	lds	r24, 0x0202
    2448:	90 91 03 02 	lds	r25, 0x0203
    244c:	28 17       	cp	r18, r24
    244e:	39 07       	cpc	r19, r25
    2450:	d8 f4       	brcc	.+54     	; 0x2488 <__stack+0x289>
									{
										MOTOR_LEFT_SPEED(0);
    2452:	80 e0       	ldi	r24, 0x00	; 0
    2454:	90 e0       	ldi	r25, 0x00	; 0
    2456:	0e 94 b6 01 	call	0x36c	; 0x36c <MOTOR_LEFT_SPEED>
										MOTOR_RIGHT_SPEED(0);
    245a:	80 e0       	ldi	r24, 0x00	; 0
    245c:	90 e0       	ldi	r25, 0x00	; 0
    245e:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <MOTOR_RIGHT_SPEED>

										
										//stop and wait for 'continue scouting command from server (for testing use button)
										if(sendOnce == 1)
    2462:	80 91 29 03 	lds	r24, 0x0329
    2466:	90 91 2a 03 	lds	r25, 0x032A
    246a:	81 30       	cpi	r24, 0x01	; 1
    246c:	91 05       	cpc	r25, r1
    246e:	61 f4       	brne	.+24     	; 0x2488 <__stack+0x289>
										{
											UDR0 = (0x0f & position);	//sending position count
    2470:	e6 ec       	ldi	r30, 0xC6	; 198
    2472:	f0 e0       	ldi	r31, 0x00	; 0
    2474:	80 91 18 03 	lds	r24, 0x0318
    2478:	90 91 19 03 	lds	r25, 0x0319
    247c:	8f 70       	andi	r24, 0x0F	; 15
    247e:	80 83       	st	Z, r24
										//	UCSR0B = UCSR0B | 0x08; //set bit3 = tx enable
											//UDR0 = 0x0D;			// 'CR' signifies the terminator in matlab
										//	UCSR0B = UCSR0B | 0x08; //set bit3 = tx enable
											sendOnce = 0;
    2480:	10 92 2a 03 	sts	0x032A, r1
    2484:	10 92 29 03 	sts	0x0329, r1
										
										//BUZZER_ON();
										
										//disable inturupt 4  and 5
									}
									LCD_DISPLAY_INT_2(7);
    2488:	87 e0       	ldi	r24, 0x07	; 7
    248a:	90 e0       	ldi	r25, 0x00	; 0
    248c:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <LCD_DISPLAY_INT_2>
    2490:	a1 cd       	rjmp	.-1214   	; 0x1fd4 <main+0x42>

00002492 <__fixunssfsi>:
    2492:	ef 92       	push	r14
    2494:	ff 92       	push	r15
    2496:	0f 93       	push	r16
    2498:	1f 93       	push	r17
    249a:	7b 01       	movw	r14, r22
    249c:	8c 01       	movw	r16, r24
    249e:	20 e0       	ldi	r18, 0x00	; 0
    24a0:	30 e0       	ldi	r19, 0x00	; 0
    24a2:	40 e0       	ldi	r20, 0x00	; 0
    24a4:	5f e4       	ldi	r21, 0x4F	; 79
    24a6:	0e 94 f5 15 	call	0x2bea	; 0x2bea <__gesf2>
    24aa:	88 23       	and	r24, r24
    24ac:	8c f0       	brlt	.+34     	; 0x24d0 <__fixunssfsi+0x3e>
    24ae:	c8 01       	movw	r24, r16
    24b0:	b7 01       	movw	r22, r14
    24b2:	20 e0       	ldi	r18, 0x00	; 0
    24b4:	30 e0       	ldi	r19, 0x00	; 0
    24b6:	40 e0       	ldi	r20, 0x00	; 0
    24b8:	5f e4       	ldi	r21, 0x4F	; 79
    24ba:	0e 94 c1 13 	call	0x2782	; 0x2782 <__subsf3>
    24be:	0e 94 b3 16 	call	0x2d66	; 0x2d66 <__fixsfsi>
    24c2:	9b 01       	movw	r18, r22
    24c4:	ac 01       	movw	r20, r24
    24c6:	20 50       	subi	r18, 0x00	; 0
    24c8:	30 40       	sbci	r19, 0x00	; 0
    24ca:	40 40       	sbci	r20, 0x00	; 0
    24cc:	50 48       	sbci	r21, 0x80	; 128
    24ce:	06 c0       	rjmp	.+12     	; 0x24dc <__fixunssfsi+0x4a>
    24d0:	c8 01       	movw	r24, r16
    24d2:	b7 01       	movw	r22, r14
    24d4:	0e 94 b3 16 	call	0x2d66	; 0x2d66 <__fixsfsi>
    24d8:	9b 01       	movw	r18, r22
    24da:	ac 01       	movw	r20, r24
    24dc:	b9 01       	movw	r22, r18
    24de:	ca 01       	movw	r24, r20
    24e0:	1f 91       	pop	r17
    24e2:	0f 91       	pop	r16
    24e4:	ff 90       	pop	r15
    24e6:	ef 90       	pop	r14
    24e8:	08 95       	ret

000024ea <_fpadd_parts>:
    24ea:	a0 e0       	ldi	r26, 0x00	; 0
    24ec:	b0 e0       	ldi	r27, 0x00	; 0
    24ee:	eb e7       	ldi	r30, 0x7B	; 123
    24f0:	f2 e1       	ldi	r31, 0x12	; 18
    24f2:	0c 94 a5 19 	jmp	0x334a	; 0x334a <__prologue_saves__>
    24f6:	dc 01       	movw	r26, r24
    24f8:	2b 01       	movw	r4, r22
    24fa:	fa 01       	movw	r30, r20
    24fc:	9c 91       	ld	r25, X
    24fe:	92 30       	cpi	r25, 0x02	; 2
    2500:	08 f4       	brcc	.+2      	; 0x2504 <_fpadd_parts+0x1a>
    2502:	39 c1       	rjmp	.+626    	; 0x2776 <_fpadd_parts+0x28c>
    2504:	eb 01       	movw	r28, r22
    2506:	88 81       	ld	r24, Y
    2508:	82 30       	cpi	r24, 0x02	; 2
    250a:	08 f4       	brcc	.+2      	; 0x250e <_fpadd_parts+0x24>
    250c:	33 c1       	rjmp	.+614    	; 0x2774 <_fpadd_parts+0x28a>
    250e:	94 30       	cpi	r25, 0x04	; 4
    2510:	69 f4       	brne	.+26     	; 0x252c <_fpadd_parts+0x42>
    2512:	84 30       	cpi	r24, 0x04	; 4
    2514:	09 f0       	breq	.+2      	; 0x2518 <_fpadd_parts+0x2e>
    2516:	2f c1       	rjmp	.+606    	; 0x2776 <_fpadd_parts+0x28c>
    2518:	11 96       	adiw	r26, 0x01	; 1
    251a:	9c 91       	ld	r25, X
    251c:	11 97       	sbiw	r26, 0x01	; 1
    251e:	89 81       	ldd	r24, Y+1	; 0x01
    2520:	98 17       	cp	r25, r24
    2522:	09 f4       	brne	.+2      	; 0x2526 <_fpadd_parts+0x3c>
    2524:	28 c1       	rjmp	.+592    	; 0x2776 <_fpadd_parts+0x28c>
    2526:	ac e0       	ldi	r26, 0x0C	; 12
    2528:	b2 e0       	ldi	r27, 0x02	; 2
    252a:	25 c1       	rjmp	.+586    	; 0x2776 <_fpadd_parts+0x28c>
    252c:	84 30       	cpi	r24, 0x04	; 4
    252e:	09 f4       	brne	.+2      	; 0x2532 <_fpadd_parts+0x48>
    2530:	21 c1       	rjmp	.+578    	; 0x2774 <_fpadd_parts+0x28a>
    2532:	82 30       	cpi	r24, 0x02	; 2
    2534:	a9 f4       	brne	.+42     	; 0x2560 <_fpadd_parts+0x76>
    2536:	92 30       	cpi	r25, 0x02	; 2
    2538:	09 f0       	breq	.+2      	; 0x253c <_fpadd_parts+0x52>
    253a:	1d c1       	rjmp	.+570    	; 0x2776 <_fpadd_parts+0x28c>
    253c:	9a 01       	movw	r18, r20
    253e:	ad 01       	movw	r20, r26
    2540:	88 e0       	ldi	r24, 0x08	; 8
    2542:	ea 01       	movw	r28, r20
    2544:	09 90       	ld	r0, Y+
    2546:	ae 01       	movw	r20, r28
    2548:	e9 01       	movw	r28, r18
    254a:	09 92       	st	Y+, r0
    254c:	9e 01       	movw	r18, r28
    254e:	81 50       	subi	r24, 0x01	; 1
    2550:	c1 f7       	brne	.-16     	; 0x2542 <_fpadd_parts+0x58>
    2552:	e2 01       	movw	r28, r4
    2554:	89 81       	ldd	r24, Y+1	; 0x01
    2556:	11 96       	adiw	r26, 0x01	; 1
    2558:	9c 91       	ld	r25, X
    255a:	89 23       	and	r24, r25
    255c:	81 83       	std	Z+1, r24	; 0x01
    255e:	08 c1       	rjmp	.+528    	; 0x2770 <_fpadd_parts+0x286>
    2560:	92 30       	cpi	r25, 0x02	; 2
    2562:	09 f4       	brne	.+2      	; 0x2566 <_fpadd_parts+0x7c>
    2564:	07 c1       	rjmp	.+526    	; 0x2774 <_fpadd_parts+0x28a>
    2566:	12 96       	adiw	r26, 0x02	; 2
    2568:	2d 90       	ld	r2, X+
    256a:	3c 90       	ld	r3, X
    256c:	13 97       	sbiw	r26, 0x03	; 3
    256e:	eb 01       	movw	r28, r22
    2570:	8a 81       	ldd	r24, Y+2	; 0x02
    2572:	9b 81       	ldd	r25, Y+3	; 0x03
    2574:	14 96       	adiw	r26, 0x04	; 4
    2576:	ad 90       	ld	r10, X+
    2578:	bd 90       	ld	r11, X+
    257a:	cd 90       	ld	r12, X+
    257c:	dc 90       	ld	r13, X
    257e:	17 97       	sbiw	r26, 0x07	; 7
    2580:	ec 80       	ldd	r14, Y+4	; 0x04
    2582:	fd 80       	ldd	r15, Y+5	; 0x05
    2584:	0e 81       	ldd	r16, Y+6	; 0x06
    2586:	1f 81       	ldd	r17, Y+7	; 0x07
    2588:	91 01       	movw	r18, r2
    258a:	28 1b       	sub	r18, r24
    258c:	39 0b       	sbc	r19, r25
    258e:	b9 01       	movw	r22, r18
    2590:	37 ff       	sbrs	r19, 7
    2592:	04 c0       	rjmp	.+8      	; 0x259c <_fpadd_parts+0xb2>
    2594:	66 27       	eor	r22, r22
    2596:	77 27       	eor	r23, r23
    2598:	62 1b       	sub	r22, r18
    259a:	73 0b       	sbc	r23, r19
    259c:	60 32       	cpi	r22, 0x20	; 32
    259e:	71 05       	cpc	r23, r1
    25a0:	0c f0       	brlt	.+2      	; 0x25a4 <_fpadd_parts+0xba>
    25a2:	61 c0       	rjmp	.+194    	; 0x2666 <_fpadd_parts+0x17c>
    25a4:	12 16       	cp	r1, r18
    25a6:	13 06       	cpc	r1, r19
    25a8:	6c f5       	brge	.+90     	; 0x2604 <_fpadd_parts+0x11a>
    25aa:	37 01       	movw	r6, r14
    25ac:	48 01       	movw	r8, r16
    25ae:	06 2e       	mov	r0, r22
    25b0:	04 c0       	rjmp	.+8      	; 0x25ba <_fpadd_parts+0xd0>
    25b2:	96 94       	lsr	r9
    25b4:	87 94       	ror	r8
    25b6:	77 94       	ror	r7
    25b8:	67 94       	ror	r6
    25ba:	0a 94       	dec	r0
    25bc:	d2 f7       	brpl	.-12     	; 0x25b2 <_fpadd_parts+0xc8>
    25be:	21 e0       	ldi	r18, 0x01	; 1
    25c0:	30 e0       	ldi	r19, 0x00	; 0
    25c2:	40 e0       	ldi	r20, 0x00	; 0
    25c4:	50 e0       	ldi	r21, 0x00	; 0
    25c6:	04 c0       	rjmp	.+8      	; 0x25d0 <_fpadd_parts+0xe6>
    25c8:	22 0f       	add	r18, r18
    25ca:	33 1f       	adc	r19, r19
    25cc:	44 1f       	adc	r20, r20
    25ce:	55 1f       	adc	r21, r21
    25d0:	6a 95       	dec	r22
    25d2:	d2 f7       	brpl	.-12     	; 0x25c8 <_fpadd_parts+0xde>
    25d4:	21 50       	subi	r18, 0x01	; 1
    25d6:	30 40       	sbci	r19, 0x00	; 0
    25d8:	40 40       	sbci	r20, 0x00	; 0
    25da:	50 40       	sbci	r21, 0x00	; 0
    25dc:	2e 21       	and	r18, r14
    25de:	3f 21       	and	r19, r15
    25e0:	40 23       	and	r20, r16
    25e2:	51 23       	and	r21, r17
    25e4:	21 15       	cp	r18, r1
    25e6:	31 05       	cpc	r19, r1
    25e8:	41 05       	cpc	r20, r1
    25ea:	51 05       	cpc	r21, r1
    25ec:	21 f0       	breq	.+8      	; 0x25f6 <_fpadd_parts+0x10c>
    25ee:	21 e0       	ldi	r18, 0x01	; 1
    25f0:	30 e0       	ldi	r19, 0x00	; 0
    25f2:	40 e0       	ldi	r20, 0x00	; 0
    25f4:	50 e0       	ldi	r21, 0x00	; 0
    25f6:	79 01       	movw	r14, r18
    25f8:	8a 01       	movw	r16, r20
    25fa:	e6 28       	or	r14, r6
    25fc:	f7 28       	or	r15, r7
    25fe:	08 29       	or	r16, r8
    2600:	19 29       	or	r17, r9
    2602:	3c c0       	rjmp	.+120    	; 0x267c <_fpadd_parts+0x192>
    2604:	23 2b       	or	r18, r19
    2606:	d1 f1       	breq	.+116    	; 0x267c <_fpadd_parts+0x192>
    2608:	26 0e       	add	r2, r22
    260a:	37 1e       	adc	r3, r23
    260c:	35 01       	movw	r6, r10
    260e:	46 01       	movw	r8, r12
    2610:	06 2e       	mov	r0, r22
    2612:	04 c0       	rjmp	.+8      	; 0x261c <_fpadd_parts+0x132>
    2614:	96 94       	lsr	r9
    2616:	87 94       	ror	r8
    2618:	77 94       	ror	r7
    261a:	67 94       	ror	r6
    261c:	0a 94       	dec	r0
    261e:	d2 f7       	brpl	.-12     	; 0x2614 <_fpadd_parts+0x12a>
    2620:	21 e0       	ldi	r18, 0x01	; 1
    2622:	30 e0       	ldi	r19, 0x00	; 0
    2624:	40 e0       	ldi	r20, 0x00	; 0
    2626:	50 e0       	ldi	r21, 0x00	; 0
    2628:	04 c0       	rjmp	.+8      	; 0x2632 <_fpadd_parts+0x148>
    262a:	22 0f       	add	r18, r18
    262c:	33 1f       	adc	r19, r19
    262e:	44 1f       	adc	r20, r20
    2630:	55 1f       	adc	r21, r21
    2632:	6a 95       	dec	r22
    2634:	d2 f7       	brpl	.-12     	; 0x262a <_fpadd_parts+0x140>
    2636:	21 50       	subi	r18, 0x01	; 1
    2638:	30 40       	sbci	r19, 0x00	; 0
    263a:	40 40       	sbci	r20, 0x00	; 0
    263c:	50 40       	sbci	r21, 0x00	; 0
    263e:	2a 21       	and	r18, r10
    2640:	3b 21       	and	r19, r11
    2642:	4c 21       	and	r20, r12
    2644:	5d 21       	and	r21, r13
    2646:	21 15       	cp	r18, r1
    2648:	31 05       	cpc	r19, r1
    264a:	41 05       	cpc	r20, r1
    264c:	51 05       	cpc	r21, r1
    264e:	21 f0       	breq	.+8      	; 0x2658 <_fpadd_parts+0x16e>
    2650:	21 e0       	ldi	r18, 0x01	; 1
    2652:	30 e0       	ldi	r19, 0x00	; 0
    2654:	40 e0       	ldi	r20, 0x00	; 0
    2656:	50 e0       	ldi	r21, 0x00	; 0
    2658:	59 01       	movw	r10, r18
    265a:	6a 01       	movw	r12, r20
    265c:	a6 28       	or	r10, r6
    265e:	b7 28       	or	r11, r7
    2660:	c8 28       	or	r12, r8
    2662:	d9 28       	or	r13, r9
    2664:	0b c0       	rjmp	.+22     	; 0x267c <_fpadd_parts+0x192>
    2666:	82 15       	cp	r24, r2
    2668:	93 05       	cpc	r25, r3
    266a:	2c f0       	brlt	.+10     	; 0x2676 <_fpadd_parts+0x18c>
    266c:	1c 01       	movw	r2, r24
    266e:	aa 24       	eor	r10, r10
    2670:	bb 24       	eor	r11, r11
    2672:	65 01       	movw	r12, r10
    2674:	03 c0       	rjmp	.+6      	; 0x267c <_fpadd_parts+0x192>
    2676:	ee 24       	eor	r14, r14
    2678:	ff 24       	eor	r15, r15
    267a:	87 01       	movw	r16, r14
    267c:	11 96       	adiw	r26, 0x01	; 1
    267e:	9c 91       	ld	r25, X
    2680:	d2 01       	movw	r26, r4
    2682:	11 96       	adiw	r26, 0x01	; 1
    2684:	8c 91       	ld	r24, X
    2686:	98 17       	cp	r25, r24
    2688:	09 f4       	brne	.+2      	; 0x268c <_fpadd_parts+0x1a2>
    268a:	45 c0       	rjmp	.+138    	; 0x2716 <_fpadd_parts+0x22c>
    268c:	99 23       	and	r25, r25
    268e:	39 f0       	breq	.+14     	; 0x269e <_fpadd_parts+0x1b4>
    2690:	a8 01       	movw	r20, r16
    2692:	97 01       	movw	r18, r14
    2694:	2a 19       	sub	r18, r10
    2696:	3b 09       	sbc	r19, r11
    2698:	4c 09       	sbc	r20, r12
    269a:	5d 09       	sbc	r21, r13
    269c:	06 c0       	rjmp	.+12     	; 0x26aa <_fpadd_parts+0x1c0>
    269e:	a6 01       	movw	r20, r12
    26a0:	95 01       	movw	r18, r10
    26a2:	2e 19       	sub	r18, r14
    26a4:	3f 09       	sbc	r19, r15
    26a6:	40 0b       	sbc	r20, r16
    26a8:	51 0b       	sbc	r21, r17
    26aa:	57 fd       	sbrc	r21, 7
    26ac:	08 c0       	rjmp	.+16     	; 0x26be <_fpadd_parts+0x1d4>
    26ae:	11 82       	std	Z+1, r1	; 0x01
    26b0:	33 82       	std	Z+3, r3	; 0x03
    26b2:	22 82       	std	Z+2, r2	; 0x02
    26b4:	24 83       	std	Z+4, r18	; 0x04
    26b6:	35 83       	std	Z+5, r19	; 0x05
    26b8:	46 83       	std	Z+6, r20	; 0x06
    26ba:	57 83       	std	Z+7, r21	; 0x07
    26bc:	1d c0       	rjmp	.+58     	; 0x26f8 <_fpadd_parts+0x20e>
    26be:	81 e0       	ldi	r24, 0x01	; 1
    26c0:	81 83       	std	Z+1, r24	; 0x01
    26c2:	33 82       	std	Z+3, r3	; 0x03
    26c4:	22 82       	std	Z+2, r2	; 0x02
    26c6:	88 27       	eor	r24, r24
    26c8:	99 27       	eor	r25, r25
    26ca:	dc 01       	movw	r26, r24
    26cc:	82 1b       	sub	r24, r18
    26ce:	93 0b       	sbc	r25, r19
    26d0:	a4 0b       	sbc	r26, r20
    26d2:	b5 0b       	sbc	r27, r21
    26d4:	84 83       	std	Z+4, r24	; 0x04
    26d6:	95 83       	std	Z+5, r25	; 0x05
    26d8:	a6 83       	std	Z+6, r26	; 0x06
    26da:	b7 83       	std	Z+7, r27	; 0x07
    26dc:	0d c0       	rjmp	.+26     	; 0x26f8 <_fpadd_parts+0x20e>
    26de:	22 0f       	add	r18, r18
    26e0:	33 1f       	adc	r19, r19
    26e2:	44 1f       	adc	r20, r20
    26e4:	55 1f       	adc	r21, r21
    26e6:	24 83       	std	Z+4, r18	; 0x04
    26e8:	35 83       	std	Z+5, r19	; 0x05
    26ea:	46 83       	std	Z+6, r20	; 0x06
    26ec:	57 83       	std	Z+7, r21	; 0x07
    26ee:	82 81       	ldd	r24, Z+2	; 0x02
    26f0:	93 81       	ldd	r25, Z+3	; 0x03
    26f2:	01 97       	sbiw	r24, 0x01	; 1
    26f4:	93 83       	std	Z+3, r25	; 0x03
    26f6:	82 83       	std	Z+2, r24	; 0x02
    26f8:	24 81       	ldd	r18, Z+4	; 0x04
    26fa:	35 81       	ldd	r19, Z+5	; 0x05
    26fc:	46 81       	ldd	r20, Z+6	; 0x06
    26fe:	57 81       	ldd	r21, Z+7	; 0x07
    2700:	da 01       	movw	r26, r20
    2702:	c9 01       	movw	r24, r18
    2704:	01 97       	sbiw	r24, 0x01	; 1
    2706:	a1 09       	sbc	r26, r1
    2708:	b1 09       	sbc	r27, r1
    270a:	8f 5f       	subi	r24, 0xFF	; 255
    270c:	9f 4f       	sbci	r25, 0xFF	; 255
    270e:	af 4f       	sbci	r26, 0xFF	; 255
    2710:	bf 43       	sbci	r27, 0x3F	; 63
    2712:	28 f3       	brcs	.-54     	; 0x26de <_fpadd_parts+0x1f4>
    2714:	0b c0       	rjmp	.+22     	; 0x272c <_fpadd_parts+0x242>
    2716:	91 83       	std	Z+1, r25	; 0x01
    2718:	33 82       	std	Z+3, r3	; 0x03
    271a:	22 82       	std	Z+2, r2	; 0x02
    271c:	ea 0c       	add	r14, r10
    271e:	fb 1c       	adc	r15, r11
    2720:	0c 1d       	adc	r16, r12
    2722:	1d 1d       	adc	r17, r13
    2724:	e4 82       	std	Z+4, r14	; 0x04
    2726:	f5 82       	std	Z+5, r15	; 0x05
    2728:	06 83       	std	Z+6, r16	; 0x06
    272a:	17 83       	std	Z+7, r17	; 0x07
    272c:	83 e0       	ldi	r24, 0x03	; 3
    272e:	80 83       	st	Z, r24
    2730:	24 81       	ldd	r18, Z+4	; 0x04
    2732:	35 81       	ldd	r19, Z+5	; 0x05
    2734:	46 81       	ldd	r20, Z+6	; 0x06
    2736:	57 81       	ldd	r21, Z+7	; 0x07
    2738:	57 ff       	sbrs	r21, 7
    273a:	1a c0       	rjmp	.+52     	; 0x2770 <_fpadd_parts+0x286>
    273c:	c9 01       	movw	r24, r18
    273e:	aa 27       	eor	r26, r26
    2740:	97 fd       	sbrc	r25, 7
    2742:	a0 95       	com	r26
    2744:	ba 2f       	mov	r27, r26
    2746:	81 70       	andi	r24, 0x01	; 1
    2748:	90 70       	andi	r25, 0x00	; 0
    274a:	a0 70       	andi	r26, 0x00	; 0
    274c:	b0 70       	andi	r27, 0x00	; 0
    274e:	56 95       	lsr	r21
    2750:	47 95       	ror	r20
    2752:	37 95       	ror	r19
    2754:	27 95       	ror	r18
    2756:	82 2b       	or	r24, r18
    2758:	93 2b       	or	r25, r19
    275a:	a4 2b       	or	r26, r20
    275c:	b5 2b       	or	r27, r21
    275e:	84 83       	std	Z+4, r24	; 0x04
    2760:	95 83       	std	Z+5, r25	; 0x05
    2762:	a6 83       	std	Z+6, r26	; 0x06
    2764:	b7 83       	std	Z+7, r27	; 0x07
    2766:	82 81       	ldd	r24, Z+2	; 0x02
    2768:	93 81       	ldd	r25, Z+3	; 0x03
    276a:	01 96       	adiw	r24, 0x01	; 1
    276c:	93 83       	std	Z+3, r25	; 0x03
    276e:	82 83       	std	Z+2, r24	; 0x02
    2770:	df 01       	movw	r26, r30
    2772:	01 c0       	rjmp	.+2      	; 0x2776 <_fpadd_parts+0x28c>
    2774:	d2 01       	movw	r26, r4
    2776:	cd 01       	movw	r24, r26
    2778:	cd b7       	in	r28, 0x3d	; 61
    277a:	de b7       	in	r29, 0x3e	; 62
    277c:	e2 e1       	ldi	r30, 0x12	; 18
    277e:	0c 94 c1 19 	jmp	0x3382	; 0x3382 <__epilogue_restores__>

00002782 <__subsf3>:
    2782:	a0 e2       	ldi	r26, 0x20	; 32
    2784:	b0 e0       	ldi	r27, 0x00	; 0
    2786:	e7 ec       	ldi	r30, 0xC7	; 199
    2788:	f3 e1       	ldi	r31, 0x13	; 19
    278a:	0c 94 b1 19 	jmp	0x3362	; 0x3362 <__prologue_saves__+0x18>
    278e:	69 83       	std	Y+1, r22	; 0x01
    2790:	7a 83       	std	Y+2, r23	; 0x02
    2792:	8b 83       	std	Y+3, r24	; 0x03
    2794:	9c 83       	std	Y+4, r25	; 0x04
    2796:	2d 83       	std	Y+5, r18	; 0x05
    2798:	3e 83       	std	Y+6, r19	; 0x06
    279a:	4f 83       	std	Y+7, r20	; 0x07
    279c:	58 87       	std	Y+8, r21	; 0x08
    279e:	e9 e0       	ldi	r30, 0x09	; 9
    27a0:	ee 2e       	mov	r14, r30
    27a2:	f1 2c       	mov	r15, r1
    27a4:	ec 0e       	add	r14, r28
    27a6:	fd 1e       	adc	r15, r29
    27a8:	ce 01       	movw	r24, r28
    27aa:	01 96       	adiw	r24, 0x01	; 1
    27ac:	b7 01       	movw	r22, r14
    27ae:	0e 94 a4 18 	call	0x3148	; 0x3148 <__unpack_f>
    27b2:	8e 01       	movw	r16, r28
    27b4:	0f 5e       	subi	r16, 0xEF	; 239
    27b6:	1f 4f       	sbci	r17, 0xFF	; 255
    27b8:	ce 01       	movw	r24, r28
    27ba:	05 96       	adiw	r24, 0x05	; 5
    27bc:	b8 01       	movw	r22, r16
    27be:	0e 94 a4 18 	call	0x3148	; 0x3148 <__unpack_f>
    27c2:	8a 89       	ldd	r24, Y+18	; 0x12
    27c4:	91 e0       	ldi	r25, 0x01	; 1
    27c6:	89 27       	eor	r24, r25
    27c8:	8a 8b       	std	Y+18, r24	; 0x12
    27ca:	c7 01       	movw	r24, r14
    27cc:	b8 01       	movw	r22, r16
    27ce:	ae 01       	movw	r20, r28
    27d0:	47 5e       	subi	r20, 0xE7	; 231
    27d2:	5f 4f       	sbci	r21, 0xFF	; 255
    27d4:	0e 94 75 12 	call	0x24ea	; 0x24ea <_fpadd_parts>
    27d8:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <__pack_f>
    27dc:	a0 96       	adiw	r28, 0x20	; 32
    27de:	e6 e0       	ldi	r30, 0x06	; 6
    27e0:	0c 94 cd 19 	jmp	0x339a	; 0x339a <__epilogue_restores__+0x18>

000027e4 <__addsf3>:
    27e4:	a0 e2       	ldi	r26, 0x20	; 32
    27e6:	b0 e0       	ldi	r27, 0x00	; 0
    27e8:	e8 ef       	ldi	r30, 0xF8	; 248
    27ea:	f3 e1       	ldi	r31, 0x13	; 19
    27ec:	0c 94 b1 19 	jmp	0x3362	; 0x3362 <__prologue_saves__+0x18>
    27f0:	69 83       	std	Y+1, r22	; 0x01
    27f2:	7a 83       	std	Y+2, r23	; 0x02
    27f4:	8b 83       	std	Y+3, r24	; 0x03
    27f6:	9c 83       	std	Y+4, r25	; 0x04
    27f8:	2d 83       	std	Y+5, r18	; 0x05
    27fa:	3e 83       	std	Y+6, r19	; 0x06
    27fc:	4f 83       	std	Y+7, r20	; 0x07
    27fe:	58 87       	std	Y+8, r21	; 0x08
    2800:	f9 e0       	ldi	r31, 0x09	; 9
    2802:	ef 2e       	mov	r14, r31
    2804:	f1 2c       	mov	r15, r1
    2806:	ec 0e       	add	r14, r28
    2808:	fd 1e       	adc	r15, r29
    280a:	ce 01       	movw	r24, r28
    280c:	01 96       	adiw	r24, 0x01	; 1
    280e:	b7 01       	movw	r22, r14
    2810:	0e 94 a4 18 	call	0x3148	; 0x3148 <__unpack_f>
    2814:	8e 01       	movw	r16, r28
    2816:	0f 5e       	subi	r16, 0xEF	; 239
    2818:	1f 4f       	sbci	r17, 0xFF	; 255
    281a:	ce 01       	movw	r24, r28
    281c:	05 96       	adiw	r24, 0x05	; 5
    281e:	b8 01       	movw	r22, r16
    2820:	0e 94 a4 18 	call	0x3148	; 0x3148 <__unpack_f>
    2824:	c7 01       	movw	r24, r14
    2826:	b8 01       	movw	r22, r16
    2828:	ae 01       	movw	r20, r28
    282a:	47 5e       	subi	r20, 0xE7	; 231
    282c:	5f 4f       	sbci	r21, 0xFF	; 255
    282e:	0e 94 75 12 	call	0x24ea	; 0x24ea <_fpadd_parts>
    2832:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <__pack_f>
    2836:	a0 96       	adiw	r28, 0x20	; 32
    2838:	e6 e0       	ldi	r30, 0x06	; 6
    283a:	0c 94 cd 19 	jmp	0x339a	; 0x339a <__epilogue_restores__+0x18>

0000283e <__mulsf3>:
    283e:	a0 e2       	ldi	r26, 0x20	; 32
    2840:	b0 e0       	ldi	r27, 0x00	; 0
    2842:	e5 e2       	ldi	r30, 0x25	; 37
    2844:	f4 e1       	ldi	r31, 0x14	; 20
    2846:	0c 94 a5 19 	jmp	0x334a	; 0x334a <__prologue_saves__>
    284a:	69 83       	std	Y+1, r22	; 0x01
    284c:	7a 83       	std	Y+2, r23	; 0x02
    284e:	8b 83       	std	Y+3, r24	; 0x03
    2850:	9c 83       	std	Y+4, r25	; 0x04
    2852:	2d 83       	std	Y+5, r18	; 0x05
    2854:	3e 83       	std	Y+6, r19	; 0x06
    2856:	4f 83       	std	Y+7, r20	; 0x07
    2858:	58 87       	std	Y+8, r21	; 0x08
    285a:	ce 01       	movw	r24, r28
    285c:	01 96       	adiw	r24, 0x01	; 1
    285e:	be 01       	movw	r22, r28
    2860:	67 5f       	subi	r22, 0xF7	; 247
    2862:	7f 4f       	sbci	r23, 0xFF	; 255
    2864:	0e 94 a4 18 	call	0x3148	; 0x3148 <__unpack_f>
    2868:	ce 01       	movw	r24, r28
    286a:	05 96       	adiw	r24, 0x05	; 5
    286c:	be 01       	movw	r22, r28
    286e:	6f 5e       	subi	r22, 0xEF	; 239
    2870:	7f 4f       	sbci	r23, 0xFF	; 255
    2872:	0e 94 a4 18 	call	0x3148	; 0x3148 <__unpack_f>
    2876:	99 85       	ldd	r25, Y+9	; 0x09
    2878:	92 30       	cpi	r25, 0x02	; 2
    287a:	88 f0       	brcs	.+34     	; 0x289e <__mulsf3+0x60>
    287c:	89 89       	ldd	r24, Y+17	; 0x11
    287e:	82 30       	cpi	r24, 0x02	; 2
    2880:	c8 f0       	brcs	.+50     	; 0x28b4 <__mulsf3+0x76>
    2882:	94 30       	cpi	r25, 0x04	; 4
    2884:	19 f4       	brne	.+6      	; 0x288c <__mulsf3+0x4e>
    2886:	82 30       	cpi	r24, 0x02	; 2
    2888:	51 f4       	brne	.+20     	; 0x289e <__mulsf3+0x60>
    288a:	04 c0       	rjmp	.+8      	; 0x2894 <__mulsf3+0x56>
    288c:	84 30       	cpi	r24, 0x04	; 4
    288e:	29 f4       	brne	.+10     	; 0x289a <__mulsf3+0x5c>
    2890:	92 30       	cpi	r25, 0x02	; 2
    2892:	81 f4       	brne	.+32     	; 0x28b4 <__mulsf3+0x76>
    2894:	8c e0       	ldi	r24, 0x0C	; 12
    2896:	92 e0       	ldi	r25, 0x02	; 2
    2898:	c6 c0       	rjmp	.+396    	; 0x2a26 <__mulsf3+0x1e8>
    289a:	92 30       	cpi	r25, 0x02	; 2
    289c:	49 f4       	brne	.+18     	; 0x28b0 <__mulsf3+0x72>
    289e:	20 e0       	ldi	r18, 0x00	; 0
    28a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    28a2:	8a 89       	ldd	r24, Y+18	; 0x12
    28a4:	98 13       	cpse	r25, r24
    28a6:	21 e0       	ldi	r18, 0x01	; 1
    28a8:	2a 87       	std	Y+10, r18	; 0x0a
    28aa:	ce 01       	movw	r24, r28
    28ac:	09 96       	adiw	r24, 0x09	; 9
    28ae:	bb c0       	rjmp	.+374    	; 0x2a26 <__mulsf3+0x1e8>
    28b0:	82 30       	cpi	r24, 0x02	; 2
    28b2:	49 f4       	brne	.+18     	; 0x28c6 <__mulsf3+0x88>
    28b4:	20 e0       	ldi	r18, 0x00	; 0
    28b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    28b8:	8a 89       	ldd	r24, Y+18	; 0x12
    28ba:	98 13       	cpse	r25, r24
    28bc:	21 e0       	ldi	r18, 0x01	; 1
    28be:	2a 8b       	std	Y+18, r18	; 0x12
    28c0:	ce 01       	movw	r24, r28
    28c2:	41 96       	adiw	r24, 0x11	; 17
    28c4:	b0 c0       	rjmp	.+352    	; 0x2a26 <__mulsf3+0x1e8>
    28c6:	2d 84       	ldd	r2, Y+13	; 0x0d
    28c8:	3e 84       	ldd	r3, Y+14	; 0x0e
    28ca:	4f 84       	ldd	r4, Y+15	; 0x0f
    28cc:	58 88       	ldd	r5, Y+16	; 0x10
    28ce:	6d 88       	ldd	r6, Y+21	; 0x15
    28d0:	7e 88       	ldd	r7, Y+22	; 0x16
    28d2:	8f 88       	ldd	r8, Y+23	; 0x17
    28d4:	98 8c       	ldd	r9, Y+24	; 0x18
    28d6:	ee 24       	eor	r14, r14
    28d8:	ff 24       	eor	r15, r15
    28da:	87 01       	movw	r16, r14
    28dc:	aa 24       	eor	r10, r10
    28de:	bb 24       	eor	r11, r11
    28e0:	65 01       	movw	r12, r10
    28e2:	40 e0       	ldi	r20, 0x00	; 0
    28e4:	50 e0       	ldi	r21, 0x00	; 0
    28e6:	60 e0       	ldi	r22, 0x00	; 0
    28e8:	70 e0       	ldi	r23, 0x00	; 0
    28ea:	e0 e0       	ldi	r30, 0x00	; 0
    28ec:	f0 e0       	ldi	r31, 0x00	; 0
    28ee:	c1 01       	movw	r24, r2
    28f0:	81 70       	andi	r24, 0x01	; 1
    28f2:	90 70       	andi	r25, 0x00	; 0
    28f4:	89 2b       	or	r24, r25
    28f6:	e9 f0       	breq	.+58     	; 0x2932 <__mulsf3+0xf4>
    28f8:	e6 0c       	add	r14, r6
    28fa:	f7 1c       	adc	r15, r7
    28fc:	08 1d       	adc	r16, r8
    28fe:	19 1d       	adc	r17, r9
    2900:	9a 01       	movw	r18, r20
    2902:	ab 01       	movw	r20, r22
    2904:	2a 0d       	add	r18, r10
    2906:	3b 1d       	adc	r19, r11
    2908:	4c 1d       	adc	r20, r12
    290a:	5d 1d       	adc	r21, r13
    290c:	80 e0       	ldi	r24, 0x00	; 0
    290e:	90 e0       	ldi	r25, 0x00	; 0
    2910:	a0 e0       	ldi	r26, 0x00	; 0
    2912:	b0 e0       	ldi	r27, 0x00	; 0
    2914:	e6 14       	cp	r14, r6
    2916:	f7 04       	cpc	r15, r7
    2918:	08 05       	cpc	r16, r8
    291a:	19 05       	cpc	r17, r9
    291c:	20 f4       	brcc	.+8      	; 0x2926 <__mulsf3+0xe8>
    291e:	81 e0       	ldi	r24, 0x01	; 1
    2920:	90 e0       	ldi	r25, 0x00	; 0
    2922:	a0 e0       	ldi	r26, 0x00	; 0
    2924:	b0 e0       	ldi	r27, 0x00	; 0
    2926:	ba 01       	movw	r22, r20
    2928:	a9 01       	movw	r20, r18
    292a:	48 0f       	add	r20, r24
    292c:	59 1f       	adc	r21, r25
    292e:	6a 1f       	adc	r22, r26
    2930:	7b 1f       	adc	r23, r27
    2932:	aa 0c       	add	r10, r10
    2934:	bb 1c       	adc	r11, r11
    2936:	cc 1c       	adc	r12, r12
    2938:	dd 1c       	adc	r13, r13
    293a:	97 fe       	sbrs	r9, 7
    293c:	08 c0       	rjmp	.+16     	; 0x294e <__mulsf3+0x110>
    293e:	81 e0       	ldi	r24, 0x01	; 1
    2940:	90 e0       	ldi	r25, 0x00	; 0
    2942:	a0 e0       	ldi	r26, 0x00	; 0
    2944:	b0 e0       	ldi	r27, 0x00	; 0
    2946:	a8 2a       	or	r10, r24
    2948:	b9 2a       	or	r11, r25
    294a:	ca 2a       	or	r12, r26
    294c:	db 2a       	or	r13, r27
    294e:	31 96       	adiw	r30, 0x01	; 1
    2950:	e0 32       	cpi	r30, 0x20	; 32
    2952:	f1 05       	cpc	r31, r1
    2954:	49 f0       	breq	.+18     	; 0x2968 <__mulsf3+0x12a>
    2956:	66 0c       	add	r6, r6
    2958:	77 1c       	adc	r7, r7
    295a:	88 1c       	adc	r8, r8
    295c:	99 1c       	adc	r9, r9
    295e:	56 94       	lsr	r5
    2960:	47 94       	ror	r4
    2962:	37 94       	ror	r3
    2964:	27 94       	ror	r2
    2966:	c3 cf       	rjmp	.-122    	; 0x28ee <__mulsf3+0xb0>
    2968:	fa 85       	ldd	r31, Y+10	; 0x0a
    296a:	ea 89       	ldd	r30, Y+18	; 0x12
    296c:	2b 89       	ldd	r18, Y+19	; 0x13
    296e:	3c 89       	ldd	r19, Y+20	; 0x14
    2970:	8b 85       	ldd	r24, Y+11	; 0x0b
    2972:	9c 85       	ldd	r25, Y+12	; 0x0c
    2974:	28 0f       	add	r18, r24
    2976:	39 1f       	adc	r19, r25
    2978:	2e 5f       	subi	r18, 0xFE	; 254
    297a:	3f 4f       	sbci	r19, 0xFF	; 255
    297c:	17 c0       	rjmp	.+46     	; 0x29ac <__mulsf3+0x16e>
    297e:	ca 01       	movw	r24, r20
    2980:	81 70       	andi	r24, 0x01	; 1
    2982:	90 70       	andi	r25, 0x00	; 0
    2984:	89 2b       	or	r24, r25
    2986:	61 f0       	breq	.+24     	; 0x29a0 <__mulsf3+0x162>
    2988:	16 95       	lsr	r17
    298a:	07 95       	ror	r16
    298c:	f7 94       	ror	r15
    298e:	e7 94       	ror	r14
    2990:	80 e0       	ldi	r24, 0x00	; 0
    2992:	90 e0       	ldi	r25, 0x00	; 0
    2994:	a0 e0       	ldi	r26, 0x00	; 0
    2996:	b0 e8       	ldi	r27, 0x80	; 128
    2998:	e8 2a       	or	r14, r24
    299a:	f9 2a       	or	r15, r25
    299c:	0a 2b       	or	r16, r26
    299e:	1b 2b       	or	r17, r27
    29a0:	76 95       	lsr	r23
    29a2:	67 95       	ror	r22
    29a4:	57 95       	ror	r21
    29a6:	47 95       	ror	r20
    29a8:	2f 5f       	subi	r18, 0xFF	; 255
    29aa:	3f 4f       	sbci	r19, 0xFF	; 255
    29ac:	77 fd       	sbrc	r23, 7
    29ae:	e7 cf       	rjmp	.-50     	; 0x297e <__mulsf3+0x140>
    29b0:	0c c0       	rjmp	.+24     	; 0x29ca <__mulsf3+0x18c>
    29b2:	44 0f       	add	r20, r20
    29b4:	55 1f       	adc	r21, r21
    29b6:	66 1f       	adc	r22, r22
    29b8:	77 1f       	adc	r23, r23
    29ba:	17 fd       	sbrc	r17, 7
    29bc:	41 60       	ori	r20, 0x01	; 1
    29be:	ee 0c       	add	r14, r14
    29c0:	ff 1c       	adc	r15, r15
    29c2:	00 1f       	adc	r16, r16
    29c4:	11 1f       	adc	r17, r17
    29c6:	21 50       	subi	r18, 0x01	; 1
    29c8:	30 40       	sbci	r19, 0x00	; 0
    29ca:	40 30       	cpi	r20, 0x00	; 0
    29cc:	90 e0       	ldi	r25, 0x00	; 0
    29ce:	59 07       	cpc	r21, r25
    29d0:	90 e0       	ldi	r25, 0x00	; 0
    29d2:	69 07       	cpc	r22, r25
    29d4:	90 e4       	ldi	r25, 0x40	; 64
    29d6:	79 07       	cpc	r23, r25
    29d8:	60 f3       	brcs	.-40     	; 0x29b2 <__mulsf3+0x174>
    29da:	2b 8f       	std	Y+27, r18	; 0x1b
    29dc:	3c 8f       	std	Y+28, r19	; 0x1c
    29de:	db 01       	movw	r26, r22
    29e0:	ca 01       	movw	r24, r20
    29e2:	8f 77       	andi	r24, 0x7F	; 127
    29e4:	90 70       	andi	r25, 0x00	; 0
    29e6:	a0 70       	andi	r26, 0x00	; 0
    29e8:	b0 70       	andi	r27, 0x00	; 0
    29ea:	80 34       	cpi	r24, 0x40	; 64
    29ec:	91 05       	cpc	r25, r1
    29ee:	a1 05       	cpc	r26, r1
    29f0:	b1 05       	cpc	r27, r1
    29f2:	61 f4       	brne	.+24     	; 0x2a0c <__mulsf3+0x1ce>
    29f4:	47 fd       	sbrc	r20, 7
    29f6:	0a c0       	rjmp	.+20     	; 0x2a0c <__mulsf3+0x1ce>
    29f8:	e1 14       	cp	r14, r1
    29fa:	f1 04       	cpc	r15, r1
    29fc:	01 05       	cpc	r16, r1
    29fe:	11 05       	cpc	r17, r1
    2a00:	29 f0       	breq	.+10     	; 0x2a0c <__mulsf3+0x1ce>
    2a02:	40 5c       	subi	r20, 0xC0	; 192
    2a04:	5f 4f       	sbci	r21, 0xFF	; 255
    2a06:	6f 4f       	sbci	r22, 0xFF	; 255
    2a08:	7f 4f       	sbci	r23, 0xFF	; 255
    2a0a:	40 78       	andi	r20, 0x80	; 128
    2a0c:	1a 8e       	std	Y+26, r1	; 0x1a
    2a0e:	fe 17       	cp	r31, r30
    2a10:	11 f0       	breq	.+4      	; 0x2a16 <__mulsf3+0x1d8>
    2a12:	81 e0       	ldi	r24, 0x01	; 1
    2a14:	8a 8f       	std	Y+26, r24	; 0x1a
    2a16:	4d 8f       	std	Y+29, r20	; 0x1d
    2a18:	5e 8f       	std	Y+30, r21	; 0x1e
    2a1a:	6f 8f       	std	Y+31, r22	; 0x1f
    2a1c:	78 a3       	std	Y+32, r23	; 0x20
    2a1e:	83 e0       	ldi	r24, 0x03	; 3
    2a20:	89 8f       	std	Y+25, r24	; 0x19
    2a22:	ce 01       	movw	r24, r28
    2a24:	49 96       	adiw	r24, 0x19	; 25
    2a26:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <__pack_f>
    2a2a:	a0 96       	adiw	r28, 0x20	; 32
    2a2c:	e2 e1       	ldi	r30, 0x12	; 18
    2a2e:	0c 94 c1 19 	jmp	0x3382	; 0x3382 <__epilogue_restores__>

00002a32 <__divsf3>:
    2a32:	a8 e1       	ldi	r26, 0x18	; 24
    2a34:	b0 e0       	ldi	r27, 0x00	; 0
    2a36:	ef e1       	ldi	r30, 0x1F	; 31
    2a38:	f5 e1       	ldi	r31, 0x15	; 21
    2a3a:	0c 94 ad 19 	jmp	0x335a	; 0x335a <__prologue_saves__+0x10>
    2a3e:	69 83       	std	Y+1, r22	; 0x01
    2a40:	7a 83       	std	Y+2, r23	; 0x02
    2a42:	8b 83       	std	Y+3, r24	; 0x03
    2a44:	9c 83       	std	Y+4, r25	; 0x04
    2a46:	2d 83       	std	Y+5, r18	; 0x05
    2a48:	3e 83       	std	Y+6, r19	; 0x06
    2a4a:	4f 83       	std	Y+7, r20	; 0x07
    2a4c:	58 87       	std	Y+8, r21	; 0x08
    2a4e:	b9 e0       	ldi	r27, 0x09	; 9
    2a50:	eb 2e       	mov	r14, r27
    2a52:	f1 2c       	mov	r15, r1
    2a54:	ec 0e       	add	r14, r28
    2a56:	fd 1e       	adc	r15, r29
    2a58:	ce 01       	movw	r24, r28
    2a5a:	01 96       	adiw	r24, 0x01	; 1
    2a5c:	b7 01       	movw	r22, r14
    2a5e:	0e 94 a4 18 	call	0x3148	; 0x3148 <__unpack_f>
    2a62:	8e 01       	movw	r16, r28
    2a64:	0f 5e       	subi	r16, 0xEF	; 239
    2a66:	1f 4f       	sbci	r17, 0xFF	; 255
    2a68:	ce 01       	movw	r24, r28
    2a6a:	05 96       	adiw	r24, 0x05	; 5
    2a6c:	b8 01       	movw	r22, r16
    2a6e:	0e 94 a4 18 	call	0x3148	; 0x3148 <__unpack_f>
    2a72:	29 85       	ldd	r18, Y+9	; 0x09
    2a74:	22 30       	cpi	r18, 0x02	; 2
    2a76:	08 f4       	brcc	.+2      	; 0x2a7a <__divsf3+0x48>
    2a78:	7e c0       	rjmp	.+252    	; 0x2b76 <__divsf3+0x144>
    2a7a:	39 89       	ldd	r19, Y+17	; 0x11
    2a7c:	32 30       	cpi	r19, 0x02	; 2
    2a7e:	10 f4       	brcc	.+4      	; 0x2a84 <__divsf3+0x52>
    2a80:	b8 01       	movw	r22, r16
    2a82:	7c c0       	rjmp	.+248    	; 0x2b7c <__divsf3+0x14a>
    2a84:	8a 85       	ldd	r24, Y+10	; 0x0a
    2a86:	9a 89       	ldd	r25, Y+18	; 0x12
    2a88:	89 27       	eor	r24, r25
    2a8a:	8a 87       	std	Y+10, r24	; 0x0a
    2a8c:	24 30       	cpi	r18, 0x04	; 4
    2a8e:	11 f0       	breq	.+4      	; 0x2a94 <__divsf3+0x62>
    2a90:	22 30       	cpi	r18, 0x02	; 2
    2a92:	31 f4       	brne	.+12     	; 0x2aa0 <__divsf3+0x6e>
    2a94:	23 17       	cp	r18, r19
    2a96:	09 f0       	breq	.+2      	; 0x2a9a <__divsf3+0x68>
    2a98:	6e c0       	rjmp	.+220    	; 0x2b76 <__divsf3+0x144>
    2a9a:	6c e0       	ldi	r22, 0x0C	; 12
    2a9c:	72 e0       	ldi	r23, 0x02	; 2
    2a9e:	6e c0       	rjmp	.+220    	; 0x2b7c <__divsf3+0x14a>
    2aa0:	34 30       	cpi	r19, 0x04	; 4
    2aa2:	39 f4       	brne	.+14     	; 0x2ab2 <__divsf3+0x80>
    2aa4:	1d 86       	std	Y+13, r1	; 0x0d
    2aa6:	1e 86       	std	Y+14, r1	; 0x0e
    2aa8:	1f 86       	std	Y+15, r1	; 0x0f
    2aaa:	18 8a       	std	Y+16, r1	; 0x10
    2aac:	1c 86       	std	Y+12, r1	; 0x0c
    2aae:	1b 86       	std	Y+11, r1	; 0x0b
    2ab0:	04 c0       	rjmp	.+8      	; 0x2aba <__divsf3+0x88>
    2ab2:	32 30       	cpi	r19, 0x02	; 2
    2ab4:	21 f4       	brne	.+8      	; 0x2abe <__divsf3+0x8c>
    2ab6:	84 e0       	ldi	r24, 0x04	; 4
    2ab8:	89 87       	std	Y+9, r24	; 0x09
    2aba:	b7 01       	movw	r22, r14
    2abc:	5f c0       	rjmp	.+190    	; 0x2b7c <__divsf3+0x14a>
    2abe:	2b 85       	ldd	r18, Y+11	; 0x0b
    2ac0:	3c 85       	ldd	r19, Y+12	; 0x0c
    2ac2:	8b 89       	ldd	r24, Y+19	; 0x13
    2ac4:	9c 89       	ldd	r25, Y+20	; 0x14
    2ac6:	28 1b       	sub	r18, r24
    2ac8:	39 0b       	sbc	r19, r25
    2aca:	3c 87       	std	Y+12, r19	; 0x0c
    2acc:	2b 87       	std	Y+11, r18	; 0x0b
    2ace:	ed 84       	ldd	r14, Y+13	; 0x0d
    2ad0:	fe 84       	ldd	r15, Y+14	; 0x0e
    2ad2:	0f 85       	ldd	r16, Y+15	; 0x0f
    2ad4:	18 89       	ldd	r17, Y+16	; 0x10
    2ad6:	ad 88       	ldd	r10, Y+21	; 0x15
    2ad8:	be 88       	ldd	r11, Y+22	; 0x16
    2ada:	cf 88       	ldd	r12, Y+23	; 0x17
    2adc:	d8 8c       	ldd	r13, Y+24	; 0x18
    2ade:	ea 14       	cp	r14, r10
    2ae0:	fb 04       	cpc	r15, r11
    2ae2:	0c 05       	cpc	r16, r12
    2ae4:	1d 05       	cpc	r17, r13
    2ae6:	40 f4       	brcc	.+16     	; 0x2af8 <__divsf3+0xc6>
    2ae8:	ee 0c       	add	r14, r14
    2aea:	ff 1c       	adc	r15, r15
    2aec:	00 1f       	adc	r16, r16
    2aee:	11 1f       	adc	r17, r17
    2af0:	21 50       	subi	r18, 0x01	; 1
    2af2:	30 40       	sbci	r19, 0x00	; 0
    2af4:	3c 87       	std	Y+12, r19	; 0x0c
    2af6:	2b 87       	std	Y+11, r18	; 0x0b
    2af8:	20 e0       	ldi	r18, 0x00	; 0
    2afa:	30 e0       	ldi	r19, 0x00	; 0
    2afc:	40 e0       	ldi	r20, 0x00	; 0
    2afe:	50 e0       	ldi	r21, 0x00	; 0
    2b00:	80 e0       	ldi	r24, 0x00	; 0
    2b02:	90 e0       	ldi	r25, 0x00	; 0
    2b04:	a0 e0       	ldi	r26, 0x00	; 0
    2b06:	b0 e4       	ldi	r27, 0x40	; 64
    2b08:	60 e0       	ldi	r22, 0x00	; 0
    2b0a:	70 e0       	ldi	r23, 0x00	; 0
    2b0c:	ea 14       	cp	r14, r10
    2b0e:	fb 04       	cpc	r15, r11
    2b10:	0c 05       	cpc	r16, r12
    2b12:	1d 05       	cpc	r17, r13
    2b14:	40 f0       	brcs	.+16     	; 0x2b26 <__divsf3+0xf4>
    2b16:	28 2b       	or	r18, r24
    2b18:	39 2b       	or	r19, r25
    2b1a:	4a 2b       	or	r20, r26
    2b1c:	5b 2b       	or	r21, r27
    2b1e:	ea 18       	sub	r14, r10
    2b20:	fb 08       	sbc	r15, r11
    2b22:	0c 09       	sbc	r16, r12
    2b24:	1d 09       	sbc	r17, r13
    2b26:	b6 95       	lsr	r27
    2b28:	a7 95       	ror	r26
    2b2a:	97 95       	ror	r25
    2b2c:	87 95       	ror	r24
    2b2e:	ee 0c       	add	r14, r14
    2b30:	ff 1c       	adc	r15, r15
    2b32:	00 1f       	adc	r16, r16
    2b34:	11 1f       	adc	r17, r17
    2b36:	6f 5f       	subi	r22, 0xFF	; 255
    2b38:	7f 4f       	sbci	r23, 0xFF	; 255
    2b3a:	6f 31       	cpi	r22, 0x1F	; 31
    2b3c:	71 05       	cpc	r23, r1
    2b3e:	31 f7       	brne	.-52     	; 0x2b0c <__divsf3+0xda>
    2b40:	da 01       	movw	r26, r20
    2b42:	c9 01       	movw	r24, r18
    2b44:	8f 77       	andi	r24, 0x7F	; 127
    2b46:	90 70       	andi	r25, 0x00	; 0
    2b48:	a0 70       	andi	r26, 0x00	; 0
    2b4a:	b0 70       	andi	r27, 0x00	; 0
    2b4c:	80 34       	cpi	r24, 0x40	; 64
    2b4e:	91 05       	cpc	r25, r1
    2b50:	a1 05       	cpc	r26, r1
    2b52:	b1 05       	cpc	r27, r1
    2b54:	61 f4       	brne	.+24     	; 0x2b6e <__divsf3+0x13c>
    2b56:	27 fd       	sbrc	r18, 7
    2b58:	0a c0       	rjmp	.+20     	; 0x2b6e <__divsf3+0x13c>
    2b5a:	e1 14       	cp	r14, r1
    2b5c:	f1 04       	cpc	r15, r1
    2b5e:	01 05       	cpc	r16, r1
    2b60:	11 05       	cpc	r17, r1
    2b62:	29 f0       	breq	.+10     	; 0x2b6e <__divsf3+0x13c>
    2b64:	20 5c       	subi	r18, 0xC0	; 192
    2b66:	3f 4f       	sbci	r19, 0xFF	; 255
    2b68:	4f 4f       	sbci	r20, 0xFF	; 255
    2b6a:	5f 4f       	sbci	r21, 0xFF	; 255
    2b6c:	20 78       	andi	r18, 0x80	; 128
    2b6e:	2d 87       	std	Y+13, r18	; 0x0d
    2b70:	3e 87       	std	Y+14, r19	; 0x0e
    2b72:	4f 87       	std	Y+15, r20	; 0x0f
    2b74:	58 8b       	std	Y+16, r21	; 0x10
    2b76:	be 01       	movw	r22, r28
    2b78:	67 5f       	subi	r22, 0xF7	; 247
    2b7a:	7f 4f       	sbci	r23, 0xFF	; 255
    2b7c:	cb 01       	movw	r24, r22
    2b7e:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <__pack_f>
    2b82:	68 96       	adiw	r28, 0x18	; 24
    2b84:	ea e0       	ldi	r30, 0x0A	; 10
    2b86:	0c 94 c9 19 	jmp	0x3392	; 0x3392 <__epilogue_restores__+0x10>

00002b8a <__gtsf2>:
    2b8a:	a8 e1       	ldi	r26, 0x18	; 24
    2b8c:	b0 e0       	ldi	r27, 0x00	; 0
    2b8e:	eb ec       	ldi	r30, 0xCB	; 203
    2b90:	f5 e1       	ldi	r31, 0x15	; 21
    2b92:	0c 94 b1 19 	jmp	0x3362	; 0x3362 <__prologue_saves__+0x18>
    2b96:	69 83       	std	Y+1, r22	; 0x01
    2b98:	7a 83       	std	Y+2, r23	; 0x02
    2b9a:	8b 83       	std	Y+3, r24	; 0x03
    2b9c:	9c 83       	std	Y+4, r25	; 0x04
    2b9e:	2d 83       	std	Y+5, r18	; 0x05
    2ba0:	3e 83       	std	Y+6, r19	; 0x06
    2ba2:	4f 83       	std	Y+7, r20	; 0x07
    2ba4:	58 87       	std	Y+8, r21	; 0x08
    2ba6:	89 e0       	ldi	r24, 0x09	; 9
    2ba8:	e8 2e       	mov	r14, r24
    2baa:	f1 2c       	mov	r15, r1
    2bac:	ec 0e       	add	r14, r28
    2bae:	fd 1e       	adc	r15, r29
    2bb0:	ce 01       	movw	r24, r28
    2bb2:	01 96       	adiw	r24, 0x01	; 1
    2bb4:	b7 01       	movw	r22, r14
    2bb6:	0e 94 a4 18 	call	0x3148	; 0x3148 <__unpack_f>
    2bba:	8e 01       	movw	r16, r28
    2bbc:	0f 5e       	subi	r16, 0xEF	; 239
    2bbe:	1f 4f       	sbci	r17, 0xFF	; 255
    2bc0:	ce 01       	movw	r24, r28
    2bc2:	05 96       	adiw	r24, 0x05	; 5
    2bc4:	b8 01       	movw	r22, r16
    2bc6:	0e 94 a4 18 	call	0x3148	; 0x3148 <__unpack_f>
    2bca:	89 85       	ldd	r24, Y+9	; 0x09
    2bcc:	82 30       	cpi	r24, 0x02	; 2
    2bce:	40 f0       	brcs	.+16     	; 0x2be0 <__gtsf2+0x56>
    2bd0:	89 89       	ldd	r24, Y+17	; 0x11
    2bd2:	82 30       	cpi	r24, 0x02	; 2
    2bd4:	28 f0       	brcs	.+10     	; 0x2be0 <__gtsf2+0x56>
    2bd6:	c7 01       	movw	r24, r14
    2bd8:	b8 01       	movw	r22, r16
    2bda:	0e 94 1c 19 	call	0x3238	; 0x3238 <__fpcmp_parts_f>
    2bde:	01 c0       	rjmp	.+2      	; 0x2be2 <__gtsf2+0x58>
    2be0:	8f ef       	ldi	r24, 0xFF	; 255
    2be2:	68 96       	adiw	r28, 0x18	; 24
    2be4:	e6 e0       	ldi	r30, 0x06	; 6
    2be6:	0c 94 cd 19 	jmp	0x339a	; 0x339a <__epilogue_restores__+0x18>

00002bea <__gesf2>:
    2bea:	a8 e1       	ldi	r26, 0x18	; 24
    2bec:	b0 e0       	ldi	r27, 0x00	; 0
    2bee:	eb ef       	ldi	r30, 0xFB	; 251
    2bf0:	f5 e1       	ldi	r31, 0x15	; 21
    2bf2:	0c 94 b1 19 	jmp	0x3362	; 0x3362 <__prologue_saves__+0x18>
    2bf6:	69 83       	std	Y+1, r22	; 0x01
    2bf8:	7a 83       	std	Y+2, r23	; 0x02
    2bfa:	8b 83       	std	Y+3, r24	; 0x03
    2bfc:	9c 83       	std	Y+4, r25	; 0x04
    2bfe:	2d 83       	std	Y+5, r18	; 0x05
    2c00:	3e 83       	std	Y+6, r19	; 0x06
    2c02:	4f 83       	std	Y+7, r20	; 0x07
    2c04:	58 87       	std	Y+8, r21	; 0x08
    2c06:	89 e0       	ldi	r24, 0x09	; 9
    2c08:	e8 2e       	mov	r14, r24
    2c0a:	f1 2c       	mov	r15, r1
    2c0c:	ec 0e       	add	r14, r28
    2c0e:	fd 1e       	adc	r15, r29
    2c10:	ce 01       	movw	r24, r28
    2c12:	01 96       	adiw	r24, 0x01	; 1
    2c14:	b7 01       	movw	r22, r14
    2c16:	0e 94 a4 18 	call	0x3148	; 0x3148 <__unpack_f>
    2c1a:	8e 01       	movw	r16, r28
    2c1c:	0f 5e       	subi	r16, 0xEF	; 239
    2c1e:	1f 4f       	sbci	r17, 0xFF	; 255
    2c20:	ce 01       	movw	r24, r28
    2c22:	05 96       	adiw	r24, 0x05	; 5
    2c24:	b8 01       	movw	r22, r16
    2c26:	0e 94 a4 18 	call	0x3148	; 0x3148 <__unpack_f>
    2c2a:	89 85       	ldd	r24, Y+9	; 0x09
    2c2c:	82 30       	cpi	r24, 0x02	; 2
    2c2e:	40 f0       	brcs	.+16     	; 0x2c40 <__gesf2+0x56>
    2c30:	89 89       	ldd	r24, Y+17	; 0x11
    2c32:	82 30       	cpi	r24, 0x02	; 2
    2c34:	28 f0       	brcs	.+10     	; 0x2c40 <__gesf2+0x56>
    2c36:	c7 01       	movw	r24, r14
    2c38:	b8 01       	movw	r22, r16
    2c3a:	0e 94 1c 19 	call	0x3238	; 0x3238 <__fpcmp_parts_f>
    2c3e:	01 c0       	rjmp	.+2      	; 0x2c42 <__gesf2+0x58>
    2c40:	8f ef       	ldi	r24, 0xFF	; 255
    2c42:	68 96       	adiw	r28, 0x18	; 24
    2c44:	e6 e0       	ldi	r30, 0x06	; 6
    2c46:	0c 94 cd 19 	jmp	0x339a	; 0x339a <__epilogue_restores__+0x18>

00002c4a <__ltsf2>:
    2c4a:	a8 e1       	ldi	r26, 0x18	; 24
    2c4c:	b0 e0       	ldi	r27, 0x00	; 0
    2c4e:	eb e2       	ldi	r30, 0x2B	; 43
    2c50:	f6 e1       	ldi	r31, 0x16	; 22
    2c52:	0c 94 b1 19 	jmp	0x3362	; 0x3362 <__prologue_saves__+0x18>
    2c56:	69 83       	std	Y+1, r22	; 0x01
    2c58:	7a 83       	std	Y+2, r23	; 0x02
    2c5a:	8b 83       	std	Y+3, r24	; 0x03
    2c5c:	9c 83       	std	Y+4, r25	; 0x04
    2c5e:	2d 83       	std	Y+5, r18	; 0x05
    2c60:	3e 83       	std	Y+6, r19	; 0x06
    2c62:	4f 83       	std	Y+7, r20	; 0x07
    2c64:	58 87       	std	Y+8, r21	; 0x08
    2c66:	89 e0       	ldi	r24, 0x09	; 9
    2c68:	e8 2e       	mov	r14, r24
    2c6a:	f1 2c       	mov	r15, r1
    2c6c:	ec 0e       	add	r14, r28
    2c6e:	fd 1e       	adc	r15, r29
    2c70:	ce 01       	movw	r24, r28
    2c72:	01 96       	adiw	r24, 0x01	; 1
    2c74:	b7 01       	movw	r22, r14
    2c76:	0e 94 a4 18 	call	0x3148	; 0x3148 <__unpack_f>
    2c7a:	8e 01       	movw	r16, r28
    2c7c:	0f 5e       	subi	r16, 0xEF	; 239
    2c7e:	1f 4f       	sbci	r17, 0xFF	; 255
    2c80:	ce 01       	movw	r24, r28
    2c82:	05 96       	adiw	r24, 0x05	; 5
    2c84:	b8 01       	movw	r22, r16
    2c86:	0e 94 a4 18 	call	0x3148	; 0x3148 <__unpack_f>
    2c8a:	89 85       	ldd	r24, Y+9	; 0x09
    2c8c:	82 30       	cpi	r24, 0x02	; 2
    2c8e:	40 f0       	brcs	.+16     	; 0x2ca0 <__ltsf2+0x56>
    2c90:	89 89       	ldd	r24, Y+17	; 0x11
    2c92:	82 30       	cpi	r24, 0x02	; 2
    2c94:	28 f0       	brcs	.+10     	; 0x2ca0 <__ltsf2+0x56>
    2c96:	c7 01       	movw	r24, r14
    2c98:	b8 01       	movw	r22, r16
    2c9a:	0e 94 1c 19 	call	0x3238	; 0x3238 <__fpcmp_parts_f>
    2c9e:	01 c0       	rjmp	.+2      	; 0x2ca2 <__ltsf2+0x58>
    2ca0:	81 e0       	ldi	r24, 0x01	; 1
    2ca2:	68 96       	adiw	r28, 0x18	; 24
    2ca4:	e6 e0       	ldi	r30, 0x06	; 6
    2ca6:	0c 94 cd 19 	jmp	0x339a	; 0x339a <__epilogue_restores__+0x18>

00002caa <__floatsisf>:
    2caa:	a8 e0       	ldi	r26, 0x08	; 8
    2cac:	b0 e0       	ldi	r27, 0x00	; 0
    2cae:	eb e5       	ldi	r30, 0x5B	; 91
    2cb0:	f6 e1       	ldi	r31, 0x16	; 22
    2cb2:	0c 94 ae 19 	jmp	0x335c	; 0x335c <__prologue_saves__+0x12>
    2cb6:	9b 01       	movw	r18, r22
    2cb8:	ac 01       	movw	r20, r24
    2cba:	83 e0       	ldi	r24, 0x03	; 3
    2cbc:	89 83       	std	Y+1, r24	; 0x01
    2cbe:	da 01       	movw	r26, r20
    2cc0:	c9 01       	movw	r24, r18
    2cc2:	88 27       	eor	r24, r24
    2cc4:	b7 fd       	sbrc	r27, 7
    2cc6:	83 95       	inc	r24
    2cc8:	99 27       	eor	r25, r25
    2cca:	aa 27       	eor	r26, r26
    2ccc:	bb 27       	eor	r27, r27
    2cce:	b8 2e       	mov	r11, r24
    2cd0:	21 15       	cp	r18, r1
    2cd2:	31 05       	cpc	r19, r1
    2cd4:	41 05       	cpc	r20, r1
    2cd6:	51 05       	cpc	r21, r1
    2cd8:	19 f4       	brne	.+6      	; 0x2ce0 <__floatsisf+0x36>
    2cda:	82 e0       	ldi	r24, 0x02	; 2
    2cdc:	89 83       	std	Y+1, r24	; 0x01
    2cde:	3a c0       	rjmp	.+116    	; 0x2d54 <__floatsisf+0xaa>
    2ce0:	88 23       	and	r24, r24
    2ce2:	a9 f0       	breq	.+42     	; 0x2d0e <__floatsisf+0x64>
    2ce4:	20 30       	cpi	r18, 0x00	; 0
    2ce6:	80 e0       	ldi	r24, 0x00	; 0
    2ce8:	38 07       	cpc	r19, r24
    2cea:	80 e0       	ldi	r24, 0x00	; 0
    2cec:	48 07       	cpc	r20, r24
    2cee:	80 e8       	ldi	r24, 0x80	; 128
    2cf0:	58 07       	cpc	r21, r24
    2cf2:	29 f4       	brne	.+10     	; 0x2cfe <__floatsisf+0x54>
    2cf4:	60 e0       	ldi	r22, 0x00	; 0
    2cf6:	70 e0       	ldi	r23, 0x00	; 0
    2cf8:	80 e0       	ldi	r24, 0x00	; 0
    2cfa:	9f ec       	ldi	r25, 0xCF	; 207
    2cfc:	30 c0       	rjmp	.+96     	; 0x2d5e <__floatsisf+0xb4>
    2cfe:	ee 24       	eor	r14, r14
    2d00:	ff 24       	eor	r15, r15
    2d02:	87 01       	movw	r16, r14
    2d04:	e2 1a       	sub	r14, r18
    2d06:	f3 0a       	sbc	r15, r19
    2d08:	04 0b       	sbc	r16, r20
    2d0a:	15 0b       	sbc	r17, r21
    2d0c:	02 c0       	rjmp	.+4      	; 0x2d12 <__floatsisf+0x68>
    2d0e:	79 01       	movw	r14, r18
    2d10:	8a 01       	movw	r16, r20
    2d12:	8e e1       	ldi	r24, 0x1E	; 30
    2d14:	c8 2e       	mov	r12, r24
    2d16:	d1 2c       	mov	r13, r1
    2d18:	dc 82       	std	Y+4, r13	; 0x04
    2d1a:	cb 82       	std	Y+3, r12	; 0x03
    2d1c:	ed 82       	std	Y+5, r14	; 0x05
    2d1e:	fe 82       	std	Y+6, r15	; 0x06
    2d20:	0f 83       	std	Y+7, r16	; 0x07
    2d22:	18 87       	std	Y+8, r17	; 0x08
    2d24:	c8 01       	movw	r24, r16
    2d26:	b7 01       	movw	r22, r14
    2d28:	0e 94 80 17 	call	0x2f00	; 0x2f00 <__clzsi2>
    2d2c:	01 97       	sbiw	r24, 0x01	; 1
    2d2e:	18 16       	cp	r1, r24
    2d30:	19 06       	cpc	r1, r25
    2d32:	84 f4       	brge	.+32     	; 0x2d54 <__floatsisf+0xaa>
    2d34:	08 2e       	mov	r0, r24
    2d36:	04 c0       	rjmp	.+8      	; 0x2d40 <__floatsisf+0x96>
    2d38:	ee 0c       	add	r14, r14
    2d3a:	ff 1c       	adc	r15, r15
    2d3c:	00 1f       	adc	r16, r16
    2d3e:	11 1f       	adc	r17, r17
    2d40:	0a 94       	dec	r0
    2d42:	d2 f7       	brpl	.-12     	; 0x2d38 <__floatsisf+0x8e>
    2d44:	ed 82       	std	Y+5, r14	; 0x05
    2d46:	fe 82       	std	Y+6, r15	; 0x06
    2d48:	0f 83       	std	Y+7, r16	; 0x07
    2d4a:	18 87       	std	Y+8, r17	; 0x08
    2d4c:	c8 1a       	sub	r12, r24
    2d4e:	d9 0a       	sbc	r13, r25
    2d50:	dc 82       	std	Y+4, r13	; 0x04
    2d52:	cb 82       	std	Y+3, r12	; 0x03
    2d54:	ba 82       	std	Y+2, r11	; 0x02
    2d56:	ce 01       	movw	r24, r28
    2d58:	01 96       	adiw	r24, 0x01	; 1
    2d5a:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <__pack_f>
    2d5e:	28 96       	adiw	r28, 0x08	; 8
    2d60:	e9 e0       	ldi	r30, 0x09	; 9
    2d62:	0c 94 ca 19 	jmp	0x3394	; 0x3394 <__epilogue_restores__+0x12>

00002d66 <__fixsfsi>:
    2d66:	ac e0       	ldi	r26, 0x0C	; 12
    2d68:	b0 e0       	ldi	r27, 0x00	; 0
    2d6a:	e9 eb       	ldi	r30, 0xB9	; 185
    2d6c:	f6 e1       	ldi	r31, 0x16	; 22
    2d6e:	0c 94 b5 19 	jmp	0x336a	; 0x336a <__prologue_saves__+0x20>
    2d72:	69 83       	std	Y+1, r22	; 0x01
    2d74:	7a 83       	std	Y+2, r23	; 0x02
    2d76:	8b 83       	std	Y+3, r24	; 0x03
    2d78:	9c 83       	std	Y+4, r25	; 0x04
    2d7a:	ce 01       	movw	r24, r28
    2d7c:	01 96       	adiw	r24, 0x01	; 1
    2d7e:	be 01       	movw	r22, r28
    2d80:	6b 5f       	subi	r22, 0xFB	; 251
    2d82:	7f 4f       	sbci	r23, 0xFF	; 255
    2d84:	0e 94 a4 18 	call	0x3148	; 0x3148 <__unpack_f>
    2d88:	8d 81       	ldd	r24, Y+5	; 0x05
    2d8a:	82 30       	cpi	r24, 0x02	; 2
    2d8c:	61 f1       	breq	.+88     	; 0x2de6 <__fixsfsi+0x80>
    2d8e:	82 30       	cpi	r24, 0x02	; 2
    2d90:	50 f1       	brcs	.+84     	; 0x2de6 <__fixsfsi+0x80>
    2d92:	84 30       	cpi	r24, 0x04	; 4
    2d94:	21 f4       	brne	.+8      	; 0x2d9e <__fixsfsi+0x38>
    2d96:	8e 81       	ldd	r24, Y+6	; 0x06
    2d98:	88 23       	and	r24, r24
    2d9a:	51 f1       	breq	.+84     	; 0x2df0 <__fixsfsi+0x8a>
    2d9c:	2e c0       	rjmp	.+92     	; 0x2dfa <__fixsfsi+0x94>
    2d9e:	2f 81       	ldd	r18, Y+7	; 0x07
    2da0:	38 85       	ldd	r19, Y+8	; 0x08
    2da2:	37 fd       	sbrc	r19, 7
    2da4:	20 c0       	rjmp	.+64     	; 0x2de6 <__fixsfsi+0x80>
    2da6:	6e 81       	ldd	r22, Y+6	; 0x06
    2da8:	2f 31       	cpi	r18, 0x1F	; 31
    2daa:	31 05       	cpc	r19, r1
    2dac:	1c f0       	brlt	.+6      	; 0x2db4 <__fixsfsi+0x4e>
    2dae:	66 23       	and	r22, r22
    2db0:	f9 f0       	breq	.+62     	; 0x2df0 <__fixsfsi+0x8a>
    2db2:	23 c0       	rjmp	.+70     	; 0x2dfa <__fixsfsi+0x94>
    2db4:	8e e1       	ldi	r24, 0x1E	; 30
    2db6:	90 e0       	ldi	r25, 0x00	; 0
    2db8:	82 1b       	sub	r24, r18
    2dba:	93 0b       	sbc	r25, r19
    2dbc:	29 85       	ldd	r18, Y+9	; 0x09
    2dbe:	3a 85       	ldd	r19, Y+10	; 0x0a
    2dc0:	4b 85       	ldd	r20, Y+11	; 0x0b
    2dc2:	5c 85       	ldd	r21, Y+12	; 0x0c
    2dc4:	04 c0       	rjmp	.+8      	; 0x2dce <__fixsfsi+0x68>
    2dc6:	56 95       	lsr	r21
    2dc8:	47 95       	ror	r20
    2dca:	37 95       	ror	r19
    2dcc:	27 95       	ror	r18
    2dce:	8a 95       	dec	r24
    2dd0:	d2 f7       	brpl	.-12     	; 0x2dc6 <__fixsfsi+0x60>
    2dd2:	66 23       	and	r22, r22
    2dd4:	b1 f0       	breq	.+44     	; 0x2e02 <__fixsfsi+0x9c>
    2dd6:	50 95       	com	r21
    2dd8:	40 95       	com	r20
    2dda:	30 95       	com	r19
    2ddc:	21 95       	neg	r18
    2dde:	3f 4f       	sbci	r19, 0xFF	; 255
    2de0:	4f 4f       	sbci	r20, 0xFF	; 255
    2de2:	5f 4f       	sbci	r21, 0xFF	; 255
    2de4:	0e c0       	rjmp	.+28     	; 0x2e02 <__fixsfsi+0x9c>
    2de6:	20 e0       	ldi	r18, 0x00	; 0
    2de8:	30 e0       	ldi	r19, 0x00	; 0
    2dea:	40 e0       	ldi	r20, 0x00	; 0
    2dec:	50 e0       	ldi	r21, 0x00	; 0
    2dee:	09 c0       	rjmp	.+18     	; 0x2e02 <__fixsfsi+0x9c>
    2df0:	2f ef       	ldi	r18, 0xFF	; 255
    2df2:	3f ef       	ldi	r19, 0xFF	; 255
    2df4:	4f ef       	ldi	r20, 0xFF	; 255
    2df6:	5f e7       	ldi	r21, 0x7F	; 127
    2df8:	04 c0       	rjmp	.+8      	; 0x2e02 <__fixsfsi+0x9c>
    2dfa:	20 e0       	ldi	r18, 0x00	; 0
    2dfc:	30 e0       	ldi	r19, 0x00	; 0
    2dfe:	40 e0       	ldi	r20, 0x00	; 0
    2e00:	50 e8       	ldi	r21, 0x80	; 128
    2e02:	b9 01       	movw	r22, r18
    2e04:	ca 01       	movw	r24, r20
    2e06:	2c 96       	adiw	r28, 0x0c	; 12
    2e08:	e2 e0       	ldi	r30, 0x02	; 2
    2e0a:	0c 94 d1 19 	jmp	0x33a2	; 0x33a2 <__epilogue_restores__+0x20>

00002e0e <__floatunsisf>:
    2e0e:	a8 e0       	ldi	r26, 0x08	; 8
    2e10:	b0 e0       	ldi	r27, 0x00	; 0
    2e12:	ed e0       	ldi	r30, 0x0D	; 13
    2e14:	f7 e1       	ldi	r31, 0x17	; 23
    2e16:	0c 94 ad 19 	jmp	0x335a	; 0x335a <__prologue_saves__+0x10>
    2e1a:	7b 01       	movw	r14, r22
    2e1c:	8c 01       	movw	r16, r24
    2e1e:	61 15       	cp	r22, r1
    2e20:	71 05       	cpc	r23, r1
    2e22:	81 05       	cpc	r24, r1
    2e24:	91 05       	cpc	r25, r1
    2e26:	19 f4       	brne	.+6      	; 0x2e2e <__floatunsisf+0x20>
    2e28:	82 e0       	ldi	r24, 0x02	; 2
    2e2a:	89 83       	std	Y+1, r24	; 0x01
    2e2c:	60 c0       	rjmp	.+192    	; 0x2eee <__floatunsisf+0xe0>
    2e2e:	83 e0       	ldi	r24, 0x03	; 3
    2e30:	89 83       	std	Y+1, r24	; 0x01
    2e32:	8e e1       	ldi	r24, 0x1E	; 30
    2e34:	c8 2e       	mov	r12, r24
    2e36:	d1 2c       	mov	r13, r1
    2e38:	dc 82       	std	Y+4, r13	; 0x04
    2e3a:	cb 82       	std	Y+3, r12	; 0x03
    2e3c:	ed 82       	std	Y+5, r14	; 0x05
    2e3e:	fe 82       	std	Y+6, r15	; 0x06
    2e40:	0f 83       	std	Y+7, r16	; 0x07
    2e42:	18 87       	std	Y+8, r17	; 0x08
    2e44:	c8 01       	movw	r24, r16
    2e46:	b7 01       	movw	r22, r14
    2e48:	0e 94 80 17 	call	0x2f00	; 0x2f00 <__clzsi2>
    2e4c:	fc 01       	movw	r30, r24
    2e4e:	31 97       	sbiw	r30, 0x01	; 1
    2e50:	f7 ff       	sbrs	r31, 7
    2e52:	3b c0       	rjmp	.+118    	; 0x2eca <__floatunsisf+0xbc>
    2e54:	22 27       	eor	r18, r18
    2e56:	33 27       	eor	r19, r19
    2e58:	2e 1b       	sub	r18, r30
    2e5a:	3f 0b       	sbc	r19, r31
    2e5c:	57 01       	movw	r10, r14
    2e5e:	68 01       	movw	r12, r16
    2e60:	02 2e       	mov	r0, r18
    2e62:	04 c0       	rjmp	.+8      	; 0x2e6c <__floatunsisf+0x5e>
    2e64:	d6 94       	lsr	r13
    2e66:	c7 94       	ror	r12
    2e68:	b7 94       	ror	r11
    2e6a:	a7 94       	ror	r10
    2e6c:	0a 94       	dec	r0
    2e6e:	d2 f7       	brpl	.-12     	; 0x2e64 <__floatunsisf+0x56>
    2e70:	40 e0       	ldi	r20, 0x00	; 0
    2e72:	50 e0       	ldi	r21, 0x00	; 0
    2e74:	60 e0       	ldi	r22, 0x00	; 0
    2e76:	70 e0       	ldi	r23, 0x00	; 0
    2e78:	81 e0       	ldi	r24, 0x01	; 1
    2e7a:	90 e0       	ldi	r25, 0x00	; 0
    2e7c:	a0 e0       	ldi	r26, 0x00	; 0
    2e7e:	b0 e0       	ldi	r27, 0x00	; 0
    2e80:	04 c0       	rjmp	.+8      	; 0x2e8a <__floatunsisf+0x7c>
    2e82:	88 0f       	add	r24, r24
    2e84:	99 1f       	adc	r25, r25
    2e86:	aa 1f       	adc	r26, r26
    2e88:	bb 1f       	adc	r27, r27
    2e8a:	2a 95       	dec	r18
    2e8c:	d2 f7       	brpl	.-12     	; 0x2e82 <__floatunsisf+0x74>
    2e8e:	01 97       	sbiw	r24, 0x01	; 1
    2e90:	a1 09       	sbc	r26, r1
    2e92:	b1 09       	sbc	r27, r1
    2e94:	8e 21       	and	r24, r14
    2e96:	9f 21       	and	r25, r15
    2e98:	a0 23       	and	r26, r16
    2e9a:	b1 23       	and	r27, r17
    2e9c:	00 97       	sbiw	r24, 0x00	; 0
    2e9e:	a1 05       	cpc	r26, r1
    2ea0:	b1 05       	cpc	r27, r1
    2ea2:	21 f0       	breq	.+8      	; 0x2eac <__floatunsisf+0x9e>
    2ea4:	41 e0       	ldi	r20, 0x01	; 1
    2ea6:	50 e0       	ldi	r21, 0x00	; 0
    2ea8:	60 e0       	ldi	r22, 0x00	; 0
    2eaa:	70 e0       	ldi	r23, 0x00	; 0
    2eac:	4a 29       	or	r20, r10
    2eae:	5b 29       	or	r21, r11
    2eb0:	6c 29       	or	r22, r12
    2eb2:	7d 29       	or	r23, r13
    2eb4:	4d 83       	std	Y+5, r20	; 0x05
    2eb6:	5e 83       	std	Y+6, r21	; 0x06
    2eb8:	6f 83       	std	Y+7, r22	; 0x07
    2eba:	78 87       	std	Y+8, r23	; 0x08
    2ebc:	8e e1       	ldi	r24, 0x1E	; 30
    2ebe:	90 e0       	ldi	r25, 0x00	; 0
    2ec0:	8e 1b       	sub	r24, r30
    2ec2:	9f 0b       	sbc	r25, r31
    2ec4:	9c 83       	std	Y+4, r25	; 0x04
    2ec6:	8b 83       	std	Y+3, r24	; 0x03
    2ec8:	12 c0       	rjmp	.+36     	; 0x2eee <__floatunsisf+0xe0>
    2eca:	30 97       	sbiw	r30, 0x00	; 0
    2ecc:	81 f0       	breq	.+32     	; 0x2eee <__floatunsisf+0xe0>
    2ece:	0e 2e       	mov	r0, r30
    2ed0:	04 c0       	rjmp	.+8      	; 0x2eda <__floatunsisf+0xcc>
    2ed2:	ee 0c       	add	r14, r14
    2ed4:	ff 1c       	adc	r15, r15
    2ed6:	00 1f       	adc	r16, r16
    2ed8:	11 1f       	adc	r17, r17
    2eda:	0a 94       	dec	r0
    2edc:	d2 f7       	brpl	.-12     	; 0x2ed2 <__floatunsisf+0xc4>
    2ede:	ed 82       	std	Y+5, r14	; 0x05
    2ee0:	fe 82       	std	Y+6, r15	; 0x06
    2ee2:	0f 83       	std	Y+7, r16	; 0x07
    2ee4:	18 87       	std	Y+8, r17	; 0x08
    2ee6:	ce 1a       	sub	r12, r30
    2ee8:	df 0a       	sbc	r13, r31
    2eea:	dc 82       	std	Y+4, r13	; 0x04
    2eec:	cb 82       	std	Y+3, r12	; 0x03
    2eee:	1a 82       	std	Y+2, r1	; 0x02
    2ef0:	ce 01       	movw	r24, r28
    2ef2:	01 96       	adiw	r24, 0x01	; 1
    2ef4:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <__pack_f>
    2ef8:	28 96       	adiw	r28, 0x08	; 8
    2efa:	ea e0       	ldi	r30, 0x0A	; 10
    2efc:	0c 94 c9 19 	jmp	0x3392	; 0x3392 <__epilogue_restores__+0x10>

00002f00 <__clzsi2>:
    2f00:	ef 92       	push	r14
    2f02:	ff 92       	push	r15
    2f04:	0f 93       	push	r16
    2f06:	1f 93       	push	r17
    2f08:	7b 01       	movw	r14, r22
    2f0a:	8c 01       	movw	r16, r24
    2f0c:	80 e0       	ldi	r24, 0x00	; 0
    2f0e:	e8 16       	cp	r14, r24
    2f10:	80 e0       	ldi	r24, 0x00	; 0
    2f12:	f8 06       	cpc	r15, r24
    2f14:	81 e0       	ldi	r24, 0x01	; 1
    2f16:	08 07       	cpc	r16, r24
    2f18:	80 e0       	ldi	r24, 0x00	; 0
    2f1a:	18 07       	cpc	r17, r24
    2f1c:	88 f4       	brcc	.+34     	; 0x2f40 <__clzsi2+0x40>
    2f1e:	8f ef       	ldi	r24, 0xFF	; 255
    2f20:	e8 16       	cp	r14, r24
    2f22:	f1 04       	cpc	r15, r1
    2f24:	01 05       	cpc	r16, r1
    2f26:	11 05       	cpc	r17, r1
    2f28:	31 f0       	breq	.+12     	; 0x2f36 <__clzsi2+0x36>
    2f2a:	28 f0       	brcs	.+10     	; 0x2f36 <__clzsi2+0x36>
    2f2c:	88 e0       	ldi	r24, 0x08	; 8
    2f2e:	90 e0       	ldi	r25, 0x00	; 0
    2f30:	a0 e0       	ldi	r26, 0x00	; 0
    2f32:	b0 e0       	ldi	r27, 0x00	; 0
    2f34:	17 c0       	rjmp	.+46     	; 0x2f64 <__clzsi2+0x64>
    2f36:	80 e0       	ldi	r24, 0x00	; 0
    2f38:	90 e0       	ldi	r25, 0x00	; 0
    2f3a:	a0 e0       	ldi	r26, 0x00	; 0
    2f3c:	b0 e0       	ldi	r27, 0x00	; 0
    2f3e:	12 c0       	rjmp	.+36     	; 0x2f64 <__clzsi2+0x64>
    2f40:	80 e0       	ldi	r24, 0x00	; 0
    2f42:	e8 16       	cp	r14, r24
    2f44:	80 e0       	ldi	r24, 0x00	; 0
    2f46:	f8 06       	cpc	r15, r24
    2f48:	80 e0       	ldi	r24, 0x00	; 0
    2f4a:	08 07       	cpc	r16, r24
    2f4c:	81 e0       	ldi	r24, 0x01	; 1
    2f4e:	18 07       	cpc	r17, r24
    2f50:	28 f0       	brcs	.+10     	; 0x2f5c <__clzsi2+0x5c>
    2f52:	88 e1       	ldi	r24, 0x18	; 24
    2f54:	90 e0       	ldi	r25, 0x00	; 0
    2f56:	a0 e0       	ldi	r26, 0x00	; 0
    2f58:	b0 e0       	ldi	r27, 0x00	; 0
    2f5a:	04 c0       	rjmp	.+8      	; 0x2f64 <__clzsi2+0x64>
    2f5c:	80 e1       	ldi	r24, 0x10	; 16
    2f5e:	90 e0       	ldi	r25, 0x00	; 0
    2f60:	a0 e0       	ldi	r26, 0x00	; 0
    2f62:	b0 e0       	ldi	r27, 0x00	; 0
    2f64:	20 e2       	ldi	r18, 0x20	; 32
    2f66:	30 e0       	ldi	r19, 0x00	; 0
    2f68:	40 e0       	ldi	r20, 0x00	; 0
    2f6a:	50 e0       	ldi	r21, 0x00	; 0
    2f6c:	28 1b       	sub	r18, r24
    2f6e:	39 0b       	sbc	r19, r25
    2f70:	4a 0b       	sbc	r20, r26
    2f72:	5b 0b       	sbc	r21, r27
    2f74:	04 c0       	rjmp	.+8      	; 0x2f7e <__clzsi2+0x7e>
    2f76:	16 95       	lsr	r17
    2f78:	07 95       	ror	r16
    2f7a:	f7 94       	ror	r15
    2f7c:	e7 94       	ror	r14
    2f7e:	8a 95       	dec	r24
    2f80:	d2 f7       	brpl	.-12     	; 0x2f76 <__clzsi2+0x76>
    2f82:	f7 01       	movw	r30, r14
    2f84:	ec 5e       	subi	r30, 0xEC	; 236
    2f86:	fd 4f       	sbci	r31, 0xFD	; 253
    2f88:	80 81       	ld	r24, Z
    2f8a:	28 1b       	sub	r18, r24
    2f8c:	31 09       	sbc	r19, r1
    2f8e:	41 09       	sbc	r20, r1
    2f90:	51 09       	sbc	r21, r1
    2f92:	c9 01       	movw	r24, r18
    2f94:	1f 91       	pop	r17
    2f96:	0f 91       	pop	r16
    2f98:	ff 90       	pop	r15
    2f9a:	ef 90       	pop	r14
    2f9c:	08 95       	ret

00002f9e <__pack_f>:
    2f9e:	df 92       	push	r13
    2fa0:	ef 92       	push	r14
    2fa2:	ff 92       	push	r15
    2fa4:	0f 93       	push	r16
    2fa6:	1f 93       	push	r17
    2fa8:	fc 01       	movw	r30, r24
    2faa:	e4 80       	ldd	r14, Z+4	; 0x04
    2fac:	f5 80       	ldd	r15, Z+5	; 0x05
    2fae:	06 81       	ldd	r16, Z+6	; 0x06
    2fb0:	17 81       	ldd	r17, Z+7	; 0x07
    2fb2:	d1 80       	ldd	r13, Z+1	; 0x01
    2fb4:	80 81       	ld	r24, Z
    2fb6:	82 30       	cpi	r24, 0x02	; 2
    2fb8:	48 f4       	brcc	.+18     	; 0x2fcc <__pack_f+0x2e>
    2fba:	80 e0       	ldi	r24, 0x00	; 0
    2fbc:	90 e0       	ldi	r25, 0x00	; 0
    2fbe:	a0 e1       	ldi	r26, 0x10	; 16
    2fc0:	b0 e0       	ldi	r27, 0x00	; 0
    2fc2:	e8 2a       	or	r14, r24
    2fc4:	f9 2a       	or	r15, r25
    2fc6:	0a 2b       	or	r16, r26
    2fc8:	1b 2b       	or	r17, r27
    2fca:	a5 c0       	rjmp	.+330    	; 0x3116 <__pack_f+0x178>
    2fcc:	84 30       	cpi	r24, 0x04	; 4
    2fce:	09 f4       	brne	.+2      	; 0x2fd2 <__pack_f+0x34>
    2fd0:	9f c0       	rjmp	.+318    	; 0x3110 <__pack_f+0x172>
    2fd2:	82 30       	cpi	r24, 0x02	; 2
    2fd4:	21 f4       	brne	.+8      	; 0x2fde <__pack_f+0x40>
    2fd6:	ee 24       	eor	r14, r14
    2fd8:	ff 24       	eor	r15, r15
    2fda:	87 01       	movw	r16, r14
    2fdc:	05 c0       	rjmp	.+10     	; 0x2fe8 <__pack_f+0x4a>
    2fde:	e1 14       	cp	r14, r1
    2fe0:	f1 04       	cpc	r15, r1
    2fe2:	01 05       	cpc	r16, r1
    2fe4:	11 05       	cpc	r17, r1
    2fe6:	19 f4       	brne	.+6      	; 0x2fee <__pack_f+0x50>
    2fe8:	e0 e0       	ldi	r30, 0x00	; 0
    2fea:	f0 e0       	ldi	r31, 0x00	; 0
    2fec:	96 c0       	rjmp	.+300    	; 0x311a <__pack_f+0x17c>
    2fee:	62 81       	ldd	r22, Z+2	; 0x02
    2ff0:	73 81       	ldd	r23, Z+3	; 0x03
    2ff2:	9f ef       	ldi	r25, 0xFF	; 255
    2ff4:	62 38       	cpi	r22, 0x82	; 130
    2ff6:	79 07       	cpc	r23, r25
    2ff8:	0c f0       	brlt	.+2      	; 0x2ffc <__pack_f+0x5e>
    2ffa:	5b c0       	rjmp	.+182    	; 0x30b2 <__pack_f+0x114>
    2ffc:	22 e8       	ldi	r18, 0x82	; 130
    2ffe:	3f ef       	ldi	r19, 0xFF	; 255
    3000:	26 1b       	sub	r18, r22
    3002:	37 0b       	sbc	r19, r23
    3004:	2a 31       	cpi	r18, 0x1A	; 26
    3006:	31 05       	cpc	r19, r1
    3008:	2c f0       	brlt	.+10     	; 0x3014 <__pack_f+0x76>
    300a:	20 e0       	ldi	r18, 0x00	; 0
    300c:	30 e0       	ldi	r19, 0x00	; 0
    300e:	40 e0       	ldi	r20, 0x00	; 0
    3010:	50 e0       	ldi	r21, 0x00	; 0
    3012:	2a c0       	rjmp	.+84     	; 0x3068 <__pack_f+0xca>
    3014:	b8 01       	movw	r22, r16
    3016:	a7 01       	movw	r20, r14
    3018:	02 2e       	mov	r0, r18
    301a:	04 c0       	rjmp	.+8      	; 0x3024 <__pack_f+0x86>
    301c:	76 95       	lsr	r23
    301e:	67 95       	ror	r22
    3020:	57 95       	ror	r21
    3022:	47 95       	ror	r20
    3024:	0a 94       	dec	r0
    3026:	d2 f7       	brpl	.-12     	; 0x301c <__pack_f+0x7e>
    3028:	81 e0       	ldi	r24, 0x01	; 1
    302a:	90 e0       	ldi	r25, 0x00	; 0
    302c:	a0 e0       	ldi	r26, 0x00	; 0
    302e:	b0 e0       	ldi	r27, 0x00	; 0
    3030:	04 c0       	rjmp	.+8      	; 0x303a <__pack_f+0x9c>
    3032:	88 0f       	add	r24, r24
    3034:	99 1f       	adc	r25, r25
    3036:	aa 1f       	adc	r26, r26
    3038:	bb 1f       	adc	r27, r27
    303a:	2a 95       	dec	r18
    303c:	d2 f7       	brpl	.-12     	; 0x3032 <__pack_f+0x94>
    303e:	01 97       	sbiw	r24, 0x01	; 1
    3040:	a1 09       	sbc	r26, r1
    3042:	b1 09       	sbc	r27, r1
    3044:	8e 21       	and	r24, r14
    3046:	9f 21       	and	r25, r15
    3048:	a0 23       	and	r26, r16
    304a:	b1 23       	and	r27, r17
    304c:	00 97       	sbiw	r24, 0x00	; 0
    304e:	a1 05       	cpc	r26, r1
    3050:	b1 05       	cpc	r27, r1
    3052:	21 f0       	breq	.+8      	; 0x305c <__pack_f+0xbe>
    3054:	81 e0       	ldi	r24, 0x01	; 1
    3056:	90 e0       	ldi	r25, 0x00	; 0
    3058:	a0 e0       	ldi	r26, 0x00	; 0
    305a:	b0 e0       	ldi	r27, 0x00	; 0
    305c:	9a 01       	movw	r18, r20
    305e:	ab 01       	movw	r20, r22
    3060:	28 2b       	or	r18, r24
    3062:	39 2b       	or	r19, r25
    3064:	4a 2b       	or	r20, r26
    3066:	5b 2b       	or	r21, r27
    3068:	da 01       	movw	r26, r20
    306a:	c9 01       	movw	r24, r18
    306c:	8f 77       	andi	r24, 0x7F	; 127
    306e:	90 70       	andi	r25, 0x00	; 0
    3070:	a0 70       	andi	r26, 0x00	; 0
    3072:	b0 70       	andi	r27, 0x00	; 0
    3074:	80 34       	cpi	r24, 0x40	; 64
    3076:	91 05       	cpc	r25, r1
    3078:	a1 05       	cpc	r26, r1
    307a:	b1 05       	cpc	r27, r1
    307c:	39 f4       	brne	.+14     	; 0x308c <__pack_f+0xee>
    307e:	27 ff       	sbrs	r18, 7
    3080:	09 c0       	rjmp	.+18     	; 0x3094 <__pack_f+0xf6>
    3082:	20 5c       	subi	r18, 0xC0	; 192
    3084:	3f 4f       	sbci	r19, 0xFF	; 255
    3086:	4f 4f       	sbci	r20, 0xFF	; 255
    3088:	5f 4f       	sbci	r21, 0xFF	; 255
    308a:	04 c0       	rjmp	.+8      	; 0x3094 <__pack_f+0xf6>
    308c:	21 5c       	subi	r18, 0xC1	; 193
    308e:	3f 4f       	sbci	r19, 0xFF	; 255
    3090:	4f 4f       	sbci	r20, 0xFF	; 255
    3092:	5f 4f       	sbci	r21, 0xFF	; 255
    3094:	e0 e0       	ldi	r30, 0x00	; 0
    3096:	f0 e0       	ldi	r31, 0x00	; 0
    3098:	20 30       	cpi	r18, 0x00	; 0
    309a:	a0 e0       	ldi	r26, 0x00	; 0
    309c:	3a 07       	cpc	r19, r26
    309e:	a0 e0       	ldi	r26, 0x00	; 0
    30a0:	4a 07       	cpc	r20, r26
    30a2:	a0 e4       	ldi	r26, 0x40	; 64
    30a4:	5a 07       	cpc	r21, r26
    30a6:	10 f0       	brcs	.+4      	; 0x30ac <__pack_f+0x10e>
    30a8:	e1 e0       	ldi	r30, 0x01	; 1
    30aa:	f0 e0       	ldi	r31, 0x00	; 0
    30ac:	79 01       	movw	r14, r18
    30ae:	8a 01       	movw	r16, r20
    30b0:	27 c0       	rjmp	.+78     	; 0x3100 <__pack_f+0x162>
    30b2:	60 38       	cpi	r22, 0x80	; 128
    30b4:	71 05       	cpc	r23, r1
    30b6:	64 f5       	brge	.+88     	; 0x3110 <__pack_f+0x172>
    30b8:	fb 01       	movw	r30, r22
    30ba:	e1 58       	subi	r30, 0x81	; 129
    30bc:	ff 4f       	sbci	r31, 0xFF	; 255
    30be:	d8 01       	movw	r26, r16
    30c0:	c7 01       	movw	r24, r14
    30c2:	8f 77       	andi	r24, 0x7F	; 127
    30c4:	90 70       	andi	r25, 0x00	; 0
    30c6:	a0 70       	andi	r26, 0x00	; 0
    30c8:	b0 70       	andi	r27, 0x00	; 0
    30ca:	80 34       	cpi	r24, 0x40	; 64
    30cc:	91 05       	cpc	r25, r1
    30ce:	a1 05       	cpc	r26, r1
    30d0:	b1 05       	cpc	r27, r1
    30d2:	39 f4       	brne	.+14     	; 0x30e2 <__pack_f+0x144>
    30d4:	e7 fe       	sbrs	r14, 7
    30d6:	0d c0       	rjmp	.+26     	; 0x30f2 <__pack_f+0x154>
    30d8:	80 e4       	ldi	r24, 0x40	; 64
    30da:	90 e0       	ldi	r25, 0x00	; 0
    30dc:	a0 e0       	ldi	r26, 0x00	; 0
    30de:	b0 e0       	ldi	r27, 0x00	; 0
    30e0:	04 c0       	rjmp	.+8      	; 0x30ea <__pack_f+0x14c>
    30e2:	8f e3       	ldi	r24, 0x3F	; 63
    30e4:	90 e0       	ldi	r25, 0x00	; 0
    30e6:	a0 e0       	ldi	r26, 0x00	; 0
    30e8:	b0 e0       	ldi	r27, 0x00	; 0
    30ea:	e8 0e       	add	r14, r24
    30ec:	f9 1e       	adc	r15, r25
    30ee:	0a 1f       	adc	r16, r26
    30f0:	1b 1f       	adc	r17, r27
    30f2:	17 ff       	sbrs	r17, 7
    30f4:	05 c0       	rjmp	.+10     	; 0x3100 <__pack_f+0x162>
    30f6:	16 95       	lsr	r17
    30f8:	07 95       	ror	r16
    30fa:	f7 94       	ror	r15
    30fc:	e7 94       	ror	r14
    30fe:	31 96       	adiw	r30, 0x01	; 1
    3100:	87 e0       	ldi	r24, 0x07	; 7
    3102:	16 95       	lsr	r17
    3104:	07 95       	ror	r16
    3106:	f7 94       	ror	r15
    3108:	e7 94       	ror	r14
    310a:	8a 95       	dec	r24
    310c:	d1 f7       	brne	.-12     	; 0x3102 <__pack_f+0x164>
    310e:	05 c0       	rjmp	.+10     	; 0x311a <__pack_f+0x17c>
    3110:	ee 24       	eor	r14, r14
    3112:	ff 24       	eor	r15, r15
    3114:	87 01       	movw	r16, r14
    3116:	ef ef       	ldi	r30, 0xFF	; 255
    3118:	f0 e0       	ldi	r31, 0x00	; 0
    311a:	6e 2f       	mov	r22, r30
    311c:	67 95       	ror	r22
    311e:	66 27       	eor	r22, r22
    3120:	67 95       	ror	r22
    3122:	90 2f       	mov	r25, r16
    3124:	9f 77       	andi	r25, 0x7F	; 127
    3126:	d7 94       	ror	r13
    3128:	dd 24       	eor	r13, r13
    312a:	d7 94       	ror	r13
    312c:	8e 2f       	mov	r24, r30
    312e:	86 95       	lsr	r24
    3130:	49 2f       	mov	r20, r25
    3132:	46 2b       	or	r20, r22
    3134:	58 2f       	mov	r21, r24
    3136:	5d 29       	or	r21, r13
    3138:	b7 01       	movw	r22, r14
    313a:	ca 01       	movw	r24, r20
    313c:	1f 91       	pop	r17
    313e:	0f 91       	pop	r16
    3140:	ff 90       	pop	r15
    3142:	ef 90       	pop	r14
    3144:	df 90       	pop	r13
    3146:	08 95       	ret

00003148 <__unpack_f>:
    3148:	fc 01       	movw	r30, r24
    314a:	db 01       	movw	r26, r22
    314c:	40 81       	ld	r20, Z
    314e:	51 81       	ldd	r21, Z+1	; 0x01
    3150:	22 81       	ldd	r18, Z+2	; 0x02
    3152:	62 2f       	mov	r22, r18
    3154:	6f 77       	andi	r22, 0x7F	; 127
    3156:	70 e0       	ldi	r23, 0x00	; 0
    3158:	22 1f       	adc	r18, r18
    315a:	22 27       	eor	r18, r18
    315c:	22 1f       	adc	r18, r18
    315e:	93 81       	ldd	r25, Z+3	; 0x03
    3160:	89 2f       	mov	r24, r25
    3162:	88 0f       	add	r24, r24
    3164:	82 2b       	or	r24, r18
    3166:	28 2f       	mov	r18, r24
    3168:	30 e0       	ldi	r19, 0x00	; 0
    316a:	99 1f       	adc	r25, r25
    316c:	99 27       	eor	r25, r25
    316e:	99 1f       	adc	r25, r25
    3170:	11 96       	adiw	r26, 0x01	; 1
    3172:	9c 93       	st	X, r25
    3174:	11 97       	sbiw	r26, 0x01	; 1
    3176:	21 15       	cp	r18, r1
    3178:	31 05       	cpc	r19, r1
    317a:	a9 f5       	brne	.+106    	; 0x31e6 <__unpack_f+0x9e>
    317c:	41 15       	cp	r20, r1
    317e:	51 05       	cpc	r21, r1
    3180:	61 05       	cpc	r22, r1
    3182:	71 05       	cpc	r23, r1
    3184:	11 f4       	brne	.+4      	; 0x318a <__unpack_f+0x42>
    3186:	82 e0       	ldi	r24, 0x02	; 2
    3188:	37 c0       	rjmp	.+110    	; 0x31f8 <__unpack_f+0xb0>
    318a:	82 e8       	ldi	r24, 0x82	; 130
    318c:	9f ef       	ldi	r25, 0xFF	; 255
    318e:	13 96       	adiw	r26, 0x03	; 3
    3190:	9c 93       	st	X, r25
    3192:	8e 93       	st	-X, r24
    3194:	12 97       	sbiw	r26, 0x02	; 2
    3196:	9a 01       	movw	r18, r20
    3198:	ab 01       	movw	r20, r22
    319a:	67 e0       	ldi	r22, 0x07	; 7
    319c:	22 0f       	add	r18, r18
    319e:	33 1f       	adc	r19, r19
    31a0:	44 1f       	adc	r20, r20
    31a2:	55 1f       	adc	r21, r21
    31a4:	6a 95       	dec	r22
    31a6:	d1 f7       	brne	.-12     	; 0x319c <__unpack_f+0x54>
    31a8:	83 e0       	ldi	r24, 0x03	; 3
    31aa:	8c 93       	st	X, r24
    31ac:	0d c0       	rjmp	.+26     	; 0x31c8 <__unpack_f+0x80>
    31ae:	22 0f       	add	r18, r18
    31b0:	33 1f       	adc	r19, r19
    31b2:	44 1f       	adc	r20, r20
    31b4:	55 1f       	adc	r21, r21
    31b6:	12 96       	adiw	r26, 0x02	; 2
    31b8:	8d 91       	ld	r24, X+
    31ba:	9c 91       	ld	r25, X
    31bc:	13 97       	sbiw	r26, 0x03	; 3
    31be:	01 97       	sbiw	r24, 0x01	; 1
    31c0:	13 96       	adiw	r26, 0x03	; 3
    31c2:	9c 93       	st	X, r25
    31c4:	8e 93       	st	-X, r24
    31c6:	12 97       	sbiw	r26, 0x02	; 2
    31c8:	20 30       	cpi	r18, 0x00	; 0
    31ca:	80 e0       	ldi	r24, 0x00	; 0
    31cc:	38 07       	cpc	r19, r24
    31ce:	80 e0       	ldi	r24, 0x00	; 0
    31d0:	48 07       	cpc	r20, r24
    31d2:	80 e4       	ldi	r24, 0x40	; 64
    31d4:	58 07       	cpc	r21, r24
    31d6:	58 f3       	brcs	.-42     	; 0x31ae <__unpack_f+0x66>
    31d8:	14 96       	adiw	r26, 0x04	; 4
    31da:	2d 93       	st	X+, r18
    31dc:	3d 93       	st	X+, r19
    31de:	4d 93       	st	X+, r20
    31e0:	5c 93       	st	X, r21
    31e2:	17 97       	sbiw	r26, 0x07	; 7
    31e4:	08 95       	ret
    31e6:	2f 3f       	cpi	r18, 0xFF	; 255
    31e8:	31 05       	cpc	r19, r1
    31ea:	79 f4       	brne	.+30     	; 0x320a <__unpack_f+0xc2>
    31ec:	41 15       	cp	r20, r1
    31ee:	51 05       	cpc	r21, r1
    31f0:	61 05       	cpc	r22, r1
    31f2:	71 05       	cpc	r23, r1
    31f4:	19 f4       	brne	.+6      	; 0x31fc <__unpack_f+0xb4>
    31f6:	84 e0       	ldi	r24, 0x04	; 4
    31f8:	8c 93       	st	X, r24
    31fa:	08 95       	ret
    31fc:	64 ff       	sbrs	r22, 4
    31fe:	03 c0       	rjmp	.+6      	; 0x3206 <__unpack_f+0xbe>
    3200:	81 e0       	ldi	r24, 0x01	; 1
    3202:	8c 93       	st	X, r24
    3204:	12 c0       	rjmp	.+36     	; 0x322a <__unpack_f+0xe2>
    3206:	1c 92       	st	X, r1
    3208:	10 c0       	rjmp	.+32     	; 0x322a <__unpack_f+0xe2>
    320a:	2f 57       	subi	r18, 0x7F	; 127
    320c:	30 40       	sbci	r19, 0x00	; 0
    320e:	13 96       	adiw	r26, 0x03	; 3
    3210:	3c 93       	st	X, r19
    3212:	2e 93       	st	-X, r18
    3214:	12 97       	sbiw	r26, 0x02	; 2
    3216:	83 e0       	ldi	r24, 0x03	; 3
    3218:	8c 93       	st	X, r24
    321a:	87 e0       	ldi	r24, 0x07	; 7
    321c:	44 0f       	add	r20, r20
    321e:	55 1f       	adc	r21, r21
    3220:	66 1f       	adc	r22, r22
    3222:	77 1f       	adc	r23, r23
    3224:	8a 95       	dec	r24
    3226:	d1 f7       	brne	.-12     	; 0x321c <__unpack_f+0xd4>
    3228:	70 64       	ori	r23, 0x40	; 64
    322a:	14 96       	adiw	r26, 0x04	; 4
    322c:	4d 93       	st	X+, r20
    322e:	5d 93       	st	X+, r21
    3230:	6d 93       	st	X+, r22
    3232:	7c 93       	st	X, r23
    3234:	17 97       	sbiw	r26, 0x07	; 7
    3236:	08 95       	ret

00003238 <__fpcmp_parts_f>:
    3238:	1f 93       	push	r17
    323a:	dc 01       	movw	r26, r24
    323c:	fb 01       	movw	r30, r22
    323e:	9c 91       	ld	r25, X
    3240:	92 30       	cpi	r25, 0x02	; 2
    3242:	08 f4       	brcc	.+2      	; 0x3246 <__fpcmp_parts_f+0xe>
    3244:	47 c0       	rjmp	.+142    	; 0x32d4 <__fpcmp_parts_f+0x9c>
    3246:	80 81       	ld	r24, Z
    3248:	82 30       	cpi	r24, 0x02	; 2
    324a:	08 f4       	brcc	.+2      	; 0x324e <__fpcmp_parts_f+0x16>
    324c:	43 c0       	rjmp	.+134    	; 0x32d4 <__fpcmp_parts_f+0x9c>
    324e:	94 30       	cpi	r25, 0x04	; 4
    3250:	51 f4       	brne	.+20     	; 0x3266 <__fpcmp_parts_f+0x2e>
    3252:	11 96       	adiw	r26, 0x01	; 1
    3254:	1c 91       	ld	r17, X
    3256:	84 30       	cpi	r24, 0x04	; 4
    3258:	99 f5       	brne	.+102    	; 0x32c0 <__fpcmp_parts_f+0x88>
    325a:	81 81       	ldd	r24, Z+1	; 0x01
    325c:	68 2f       	mov	r22, r24
    325e:	70 e0       	ldi	r23, 0x00	; 0
    3260:	61 1b       	sub	r22, r17
    3262:	71 09       	sbc	r23, r1
    3264:	3f c0       	rjmp	.+126    	; 0x32e4 <__fpcmp_parts_f+0xac>
    3266:	84 30       	cpi	r24, 0x04	; 4
    3268:	21 f0       	breq	.+8      	; 0x3272 <__fpcmp_parts_f+0x3a>
    326a:	92 30       	cpi	r25, 0x02	; 2
    326c:	31 f4       	brne	.+12     	; 0x327a <__fpcmp_parts_f+0x42>
    326e:	82 30       	cpi	r24, 0x02	; 2
    3270:	b9 f1       	breq	.+110    	; 0x32e0 <__fpcmp_parts_f+0xa8>
    3272:	81 81       	ldd	r24, Z+1	; 0x01
    3274:	88 23       	and	r24, r24
    3276:	89 f1       	breq	.+98     	; 0x32da <__fpcmp_parts_f+0xa2>
    3278:	2d c0       	rjmp	.+90     	; 0x32d4 <__fpcmp_parts_f+0x9c>
    327a:	11 96       	adiw	r26, 0x01	; 1
    327c:	1c 91       	ld	r17, X
    327e:	11 97       	sbiw	r26, 0x01	; 1
    3280:	82 30       	cpi	r24, 0x02	; 2
    3282:	f1 f0       	breq	.+60     	; 0x32c0 <__fpcmp_parts_f+0x88>
    3284:	81 81       	ldd	r24, Z+1	; 0x01
    3286:	18 17       	cp	r17, r24
    3288:	d9 f4       	brne	.+54     	; 0x32c0 <__fpcmp_parts_f+0x88>
    328a:	12 96       	adiw	r26, 0x02	; 2
    328c:	2d 91       	ld	r18, X+
    328e:	3c 91       	ld	r19, X
    3290:	13 97       	sbiw	r26, 0x03	; 3
    3292:	82 81       	ldd	r24, Z+2	; 0x02
    3294:	93 81       	ldd	r25, Z+3	; 0x03
    3296:	82 17       	cp	r24, r18
    3298:	93 07       	cpc	r25, r19
    329a:	94 f0       	brlt	.+36     	; 0x32c0 <__fpcmp_parts_f+0x88>
    329c:	28 17       	cp	r18, r24
    329e:	39 07       	cpc	r19, r25
    32a0:	bc f0       	brlt	.+46     	; 0x32d0 <__fpcmp_parts_f+0x98>
    32a2:	14 96       	adiw	r26, 0x04	; 4
    32a4:	8d 91       	ld	r24, X+
    32a6:	9d 91       	ld	r25, X+
    32a8:	0d 90       	ld	r0, X+
    32aa:	bc 91       	ld	r27, X
    32ac:	a0 2d       	mov	r26, r0
    32ae:	24 81       	ldd	r18, Z+4	; 0x04
    32b0:	35 81       	ldd	r19, Z+5	; 0x05
    32b2:	46 81       	ldd	r20, Z+6	; 0x06
    32b4:	57 81       	ldd	r21, Z+7	; 0x07
    32b6:	28 17       	cp	r18, r24
    32b8:	39 07       	cpc	r19, r25
    32ba:	4a 07       	cpc	r20, r26
    32bc:	5b 07       	cpc	r21, r27
    32be:	18 f4       	brcc	.+6      	; 0x32c6 <__fpcmp_parts_f+0x8e>
    32c0:	11 23       	and	r17, r17
    32c2:	41 f0       	breq	.+16     	; 0x32d4 <__fpcmp_parts_f+0x9c>
    32c4:	0a c0       	rjmp	.+20     	; 0x32da <__fpcmp_parts_f+0xa2>
    32c6:	82 17       	cp	r24, r18
    32c8:	93 07       	cpc	r25, r19
    32ca:	a4 07       	cpc	r26, r20
    32cc:	b5 07       	cpc	r27, r21
    32ce:	40 f4       	brcc	.+16     	; 0x32e0 <__fpcmp_parts_f+0xa8>
    32d0:	11 23       	and	r17, r17
    32d2:	19 f0       	breq	.+6      	; 0x32da <__fpcmp_parts_f+0xa2>
    32d4:	61 e0       	ldi	r22, 0x01	; 1
    32d6:	70 e0       	ldi	r23, 0x00	; 0
    32d8:	05 c0       	rjmp	.+10     	; 0x32e4 <__fpcmp_parts_f+0xac>
    32da:	6f ef       	ldi	r22, 0xFF	; 255
    32dc:	7f ef       	ldi	r23, 0xFF	; 255
    32de:	02 c0       	rjmp	.+4      	; 0x32e4 <__fpcmp_parts_f+0xac>
    32e0:	60 e0       	ldi	r22, 0x00	; 0
    32e2:	70 e0       	ldi	r23, 0x00	; 0
    32e4:	cb 01       	movw	r24, r22
    32e6:	1f 91       	pop	r17
    32e8:	08 95       	ret

000032ea <strlen>:
    32ea:	fc 01       	movw	r30, r24
    32ec:	01 90       	ld	r0, Z+
    32ee:	00 20       	and	r0, r0
    32f0:	e9 f7       	brne	.-6      	; 0x32ec <strlen+0x2>
    32f2:	80 95       	com	r24
    32f4:	90 95       	com	r25
    32f6:	8e 0f       	add	r24, r30
    32f8:	9f 1f       	adc	r25, r31
    32fa:	08 95       	ret

000032fc <__udivmodhi4>:
    32fc:	aa 1b       	sub	r26, r26
    32fe:	bb 1b       	sub	r27, r27
    3300:	51 e1       	ldi	r21, 0x11	; 17
    3302:	07 c0       	rjmp	.+14     	; 0x3312 <__udivmodhi4_ep>

00003304 <__udivmodhi4_loop>:
    3304:	aa 1f       	adc	r26, r26
    3306:	bb 1f       	adc	r27, r27
    3308:	a6 17       	cp	r26, r22
    330a:	b7 07       	cpc	r27, r23
    330c:	10 f0       	brcs	.+4      	; 0x3312 <__udivmodhi4_ep>
    330e:	a6 1b       	sub	r26, r22
    3310:	b7 0b       	sbc	r27, r23

00003312 <__udivmodhi4_ep>:
    3312:	88 1f       	adc	r24, r24
    3314:	99 1f       	adc	r25, r25
    3316:	5a 95       	dec	r21
    3318:	a9 f7       	brne	.-22     	; 0x3304 <__udivmodhi4_loop>
    331a:	80 95       	com	r24
    331c:	90 95       	com	r25
    331e:	bc 01       	movw	r22, r24
    3320:	cd 01       	movw	r24, r26
    3322:	08 95       	ret

00003324 <__divmodhi4>:
    3324:	97 fb       	bst	r25, 7
    3326:	09 2e       	mov	r0, r25
    3328:	07 26       	eor	r0, r23
    332a:	0a d0       	rcall	.+20     	; 0x3340 <__divmodhi4_neg1>
    332c:	77 fd       	sbrc	r23, 7
    332e:	04 d0       	rcall	.+8      	; 0x3338 <__divmodhi4_neg2>
    3330:	e5 df       	rcall	.-54     	; 0x32fc <__udivmodhi4>
    3332:	06 d0       	rcall	.+12     	; 0x3340 <__divmodhi4_neg1>
    3334:	00 20       	and	r0, r0
    3336:	1a f4       	brpl	.+6      	; 0x333e <__divmodhi4_exit>

00003338 <__divmodhi4_neg2>:
    3338:	70 95       	com	r23
    333a:	61 95       	neg	r22
    333c:	7f 4f       	sbci	r23, 0xFF	; 255

0000333e <__divmodhi4_exit>:
    333e:	08 95       	ret

00003340 <__divmodhi4_neg1>:
    3340:	f6 f7       	brtc	.-4      	; 0x333e <__divmodhi4_exit>
    3342:	90 95       	com	r25
    3344:	81 95       	neg	r24
    3346:	9f 4f       	sbci	r25, 0xFF	; 255
    3348:	08 95       	ret

0000334a <__prologue_saves__>:
    334a:	2f 92       	push	r2
    334c:	3f 92       	push	r3
    334e:	4f 92       	push	r4
    3350:	5f 92       	push	r5
    3352:	6f 92       	push	r6
    3354:	7f 92       	push	r7
    3356:	8f 92       	push	r8
    3358:	9f 92       	push	r9
    335a:	af 92       	push	r10
    335c:	bf 92       	push	r11
    335e:	cf 92       	push	r12
    3360:	df 92       	push	r13
    3362:	ef 92       	push	r14
    3364:	ff 92       	push	r15
    3366:	0f 93       	push	r16
    3368:	1f 93       	push	r17
    336a:	cf 93       	push	r28
    336c:	df 93       	push	r29
    336e:	cd b7       	in	r28, 0x3d	; 61
    3370:	de b7       	in	r29, 0x3e	; 62
    3372:	ca 1b       	sub	r28, r26
    3374:	db 0b       	sbc	r29, r27
    3376:	0f b6       	in	r0, 0x3f	; 63
    3378:	f8 94       	cli
    337a:	de bf       	out	0x3e, r29	; 62
    337c:	0f be       	out	0x3f, r0	; 63
    337e:	cd bf       	out	0x3d, r28	; 61
    3380:	19 94       	eijmp

00003382 <__epilogue_restores__>:
    3382:	2a 88       	ldd	r2, Y+18	; 0x12
    3384:	39 88       	ldd	r3, Y+17	; 0x11
    3386:	48 88       	ldd	r4, Y+16	; 0x10
    3388:	5f 84       	ldd	r5, Y+15	; 0x0f
    338a:	6e 84       	ldd	r6, Y+14	; 0x0e
    338c:	7d 84       	ldd	r7, Y+13	; 0x0d
    338e:	8c 84       	ldd	r8, Y+12	; 0x0c
    3390:	9b 84       	ldd	r9, Y+11	; 0x0b
    3392:	aa 84       	ldd	r10, Y+10	; 0x0a
    3394:	b9 84       	ldd	r11, Y+9	; 0x09
    3396:	c8 84       	ldd	r12, Y+8	; 0x08
    3398:	df 80       	ldd	r13, Y+7	; 0x07
    339a:	ee 80       	ldd	r14, Y+6	; 0x06
    339c:	fd 80       	ldd	r15, Y+5	; 0x05
    339e:	0c 81       	ldd	r16, Y+4	; 0x04
    33a0:	1b 81       	ldd	r17, Y+3	; 0x03
    33a2:	aa 81       	ldd	r26, Y+2	; 0x02
    33a4:	b9 81       	ldd	r27, Y+1	; 0x01
    33a6:	ce 0f       	add	r28, r30
    33a8:	d1 1d       	adc	r29, r1
    33aa:	0f b6       	in	r0, 0x3f	; 63
    33ac:	f8 94       	cli
    33ae:	de bf       	out	0x3e, r29	; 62
    33b0:	0f be       	out	0x3f, r0	; 63
    33b2:	cd bf       	out	0x3d, r28	; 61
    33b4:	ed 01       	movw	r28, r26
    33b6:	08 95       	ret

000033b8 <pow>:
    33b8:	fa 01       	movw	r30, r20
    33ba:	ee 0f       	add	r30, r30
    33bc:	ff 1f       	adc	r31, r31
    33be:	30 96       	adiw	r30, 0x00	; 0
    33c0:	21 05       	cpc	r18, r1
    33c2:	31 05       	cpc	r19, r1
    33c4:	99 f1       	breq	.+102    	; 0x342c <pow+0x74>
    33c6:	61 15       	cp	r22, r1
    33c8:	71 05       	cpc	r23, r1
    33ca:	61 f4       	brne	.+24     	; 0x33e4 <pow+0x2c>
    33cc:	80 38       	cpi	r24, 0x80	; 128
    33ce:	bf e3       	ldi	r27, 0x3F	; 63
    33d0:	9b 07       	cpc	r25, r27
    33d2:	49 f1       	breq	.+82     	; 0x3426 <pow+0x6e>
    33d4:	68 94       	set
    33d6:	90 38       	cpi	r25, 0x80	; 128
    33d8:	81 05       	cpc	r24, r1
    33da:	61 f0       	breq	.+24     	; 0x33f4 <pow+0x3c>
    33dc:	80 38       	cpi	r24, 0x80	; 128
    33de:	bf ef       	ldi	r27, 0xFF	; 255
    33e0:	9b 07       	cpc	r25, r27
    33e2:	41 f0       	breq	.+16     	; 0x33f4 <pow+0x3c>
    33e4:	99 23       	and	r25, r25
    33e6:	42 f5       	brpl	.+80     	; 0x3438 <pow+0x80>
    33e8:	ff 3f       	cpi	r31, 0xFF	; 255
    33ea:	e1 05       	cpc	r30, r1
    33ec:	31 05       	cpc	r19, r1
    33ee:	21 05       	cpc	r18, r1
    33f0:	11 f1       	breq	.+68     	; 0x3436 <pow+0x7e>
    33f2:	e8 94       	clt
    33f4:	08 94       	sec
    33f6:	e7 95       	ror	r30
    33f8:	d9 01       	movw	r26, r18
    33fa:	aa 23       	and	r26, r26
    33fc:	29 f4       	brne	.+10     	; 0x3408 <pow+0x50>
    33fe:	ab 2f       	mov	r26, r27
    3400:	be 2f       	mov	r27, r30
    3402:	f8 5f       	subi	r31, 0xF8	; 248
    3404:	d0 f3       	brcs	.-12     	; 0x33fa <pow+0x42>
    3406:	10 c0       	rjmp	.+32     	; 0x3428 <pow+0x70>
    3408:	ff 5f       	subi	r31, 0xFF	; 255
    340a:	70 f4       	brcc	.+28     	; 0x3428 <pow+0x70>
    340c:	a6 95       	lsr	r26
    340e:	e0 f7       	brcc	.-8      	; 0x3408 <pow+0x50>
    3410:	f7 39       	cpi	r31, 0x97	; 151
    3412:	50 f0       	brcs	.+20     	; 0x3428 <pow+0x70>
    3414:	19 f0       	breq	.+6      	; 0x341c <pow+0x64>
    3416:	ff 3a       	cpi	r31, 0xAF	; 175
    3418:	38 f4       	brcc	.+14     	; 0x3428 <pow+0x70>
    341a:	9f 77       	andi	r25, 0x7F	; 127
    341c:	9f 93       	push	r25
    341e:	0c d0       	rcall	.+24     	; 0x3438 <pow+0x80>
    3420:	0f 90       	pop	r0
    3422:	07 fc       	sbrc	r0, 7
    3424:	90 58       	subi	r25, 0x80	; 128
    3426:	08 95       	ret
    3428:	3e f0       	brts	.+14     	; 0x3438 <pow+0x80>
    342a:	49 c0       	rjmp	.+146    	; 0x34be <__fp_nan>
    342c:	60 e0       	ldi	r22, 0x00	; 0
    342e:	70 e0       	ldi	r23, 0x00	; 0
    3430:	80 e8       	ldi	r24, 0x80	; 128
    3432:	9f e3       	ldi	r25, 0x3F	; 63
    3434:	08 95       	ret
    3436:	4f e7       	ldi	r20, 0x7F	; 127
    3438:	9f 77       	andi	r25, 0x7F	; 127
    343a:	5f 93       	push	r21
    343c:	4f 93       	push	r20
    343e:	3f 93       	push	r19
    3440:	2f 93       	push	r18
    3442:	d0 d0       	rcall	.+416    	; 0x35e4 <log>
    3444:	2f 91       	pop	r18
    3446:	3f 91       	pop	r19
    3448:	4f 91       	pop	r20
    344a:	5f 91       	pop	r21
    344c:	f8 d9       	rcall	.-3088   	; 0x283e <__mulsf3>
    344e:	05 c0       	rjmp	.+10     	; 0x345a <exp>
    3450:	19 f4       	brne	.+6      	; 0x3458 <pow+0xa0>
    3452:	0e f0       	brts	.+2      	; 0x3456 <pow+0x9e>
    3454:	2e c0       	rjmp	.+92     	; 0x34b2 <__fp_inf>
    3456:	7d c0       	rjmp	.+250    	; 0x3552 <__fp_zero>
    3458:	32 c0       	rjmp	.+100    	; 0x34be <__fp_nan>

0000345a <exp>:
    345a:	61 d0       	rcall	.+194    	; 0x351e <__fp_splitA>
    345c:	c8 f3       	brcs	.-14     	; 0x3450 <pow+0x98>
    345e:	96 38       	cpi	r25, 0x86	; 134
    3460:	c0 f7       	brcc	.-16     	; 0x3452 <pow+0x9a>
    3462:	07 f8       	bld	r0, 7
    3464:	0f 92       	push	r0
    3466:	e8 94       	clt
    3468:	2b e3       	ldi	r18, 0x3B	; 59
    346a:	3a ea       	ldi	r19, 0xAA	; 170
    346c:	48 eb       	ldi	r20, 0xB8	; 184
    346e:	5f e7       	ldi	r21, 0x7F	; 127
    3470:	38 d1       	rcall	.+624    	; 0x36e2 <__mulsf3_pse>
    3472:	0f 92       	push	r0
    3474:	0f 92       	push	r0
    3476:	0f 92       	push	r0
    3478:	4d b7       	in	r20, 0x3d	; 61
    347a:	5e b7       	in	r21, 0x3e	; 62
    347c:	0f 92       	push	r0
    347e:	f2 d0       	rcall	.+484    	; 0x3664 <modf>
    3480:	e4 ee       	ldi	r30, 0xE4	; 228
    3482:	f0 e0       	ldi	r31, 0x00	; 0
    3484:	1f d0       	rcall	.+62     	; 0x34c4 <__fp_powser>
    3486:	4f 91       	pop	r20
    3488:	5f 91       	pop	r21
    348a:	ef 91       	pop	r30
    348c:	ff 91       	pop	r31
    348e:	e5 95       	asr	r30
    3490:	ee 1f       	adc	r30, r30
    3492:	ff 1f       	adc	r31, r31
    3494:	49 f0       	breq	.+18     	; 0x34a8 <exp+0x4e>
    3496:	fe 57       	subi	r31, 0x7E	; 126
    3498:	e0 68       	ori	r30, 0x80	; 128
    349a:	44 27       	eor	r20, r20
    349c:	ee 0f       	add	r30, r30
    349e:	44 1f       	adc	r20, r20
    34a0:	fa 95       	dec	r31
    34a2:	e1 f7       	brne	.-8      	; 0x349c <exp+0x42>
    34a4:	41 95       	neg	r20
    34a6:	55 0b       	sbc	r21, r21
    34a8:	64 d0       	rcall	.+200    	; 0x3572 <ldexp>
    34aa:	0f 90       	pop	r0
    34ac:	07 fe       	sbrs	r0, 7
    34ae:	58 c0       	rjmp	.+176    	; 0x3560 <inverse>
    34b0:	08 95       	ret

000034b2 <__fp_inf>:
    34b2:	97 f9       	bld	r25, 7
    34b4:	9f 67       	ori	r25, 0x7F	; 127
    34b6:	80 e8       	ldi	r24, 0x80	; 128
    34b8:	70 e0       	ldi	r23, 0x00	; 0
    34ba:	60 e0       	ldi	r22, 0x00	; 0
    34bc:	08 95       	ret

000034be <__fp_nan>:
    34be:	9f ef       	ldi	r25, 0xFF	; 255
    34c0:	80 ec       	ldi	r24, 0xC0	; 192
    34c2:	08 95       	ret

000034c4 <__fp_powser>:
    34c4:	df 93       	push	r29
    34c6:	cf 93       	push	r28
    34c8:	1f 93       	push	r17
    34ca:	0f 93       	push	r16
    34cc:	ff 92       	push	r15
    34ce:	ef 92       	push	r14
    34d0:	df 92       	push	r13
    34d2:	7b 01       	movw	r14, r22
    34d4:	8c 01       	movw	r16, r24
    34d6:	68 94       	set
    34d8:	05 c0       	rjmp	.+10     	; 0x34e4 <__fp_powser+0x20>
    34da:	da 2e       	mov	r13, r26
    34dc:	ef 01       	movw	r28, r30
    34de:	ff d0       	rcall	.+510    	; 0x36de <__mulsf3x>
    34e0:	fe 01       	movw	r30, r28
    34e2:	e8 94       	clt
    34e4:	a5 91       	lpm	r26, Z+
    34e6:	25 91       	lpm	r18, Z+
    34e8:	35 91       	lpm	r19, Z+
    34ea:	45 91       	lpm	r20, Z+
    34ec:	55 91       	lpm	r21, Z+
    34ee:	ae f3       	brts	.-22     	; 0x34da <__fp_powser+0x16>
    34f0:	ef 01       	movw	r28, r30
    34f2:	59 d1       	rcall	.+690    	; 0x37a6 <__addsf3x>
    34f4:	fe 01       	movw	r30, r28
    34f6:	97 01       	movw	r18, r14
    34f8:	a8 01       	movw	r20, r16
    34fa:	da 94       	dec	r13
    34fc:	79 f7       	brne	.-34     	; 0x34dc <__fp_powser+0x18>
    34fe:	df 90       	pop	r13
    3500:	ef 90       	pop	r14
    3502:	ff 90       	pop	r15
    3504:	0f 91       	pop	r16
    3506:	1f 91       	pop	r17
    3508:	cf 91       	pop	r28
    350a:	df 91       	pop	r29
    350c:	08 95       	ret

0000350e <__fp_split3>:
    350e:	57 fd       	sbrc	r21, 7
    3510:	90 58       	subi	r25, 0x80	; 128
    3512:	44 0f       	add	r20, r20
    3514:	55 1f       	adc	r21, r21
    3516:	59 f0       	breq	.+22     	; 0x352e <__fp_splitA+0x10>
    3518:	5f 3f       	cpi	r21, 0xFF	; 255
    351a:	71 f0       	breq	.+28     	; 0x3538 <__fp_splitA+0x1a>
    351c:	47 95       	ror	r20

0000351e <__fp_splitA>:
    351e:	88 0f       	add	r24, r24
    3520:	97 fb       	bst	r25, 7
    3522:	99 1f       	adc	r25, r25
    3524:	61 f0       	breq	.+24     	; 0x353e <__fp_splitA+0x20>
    3526:	9f 3f       	cpi	r25, 0xFF	; 255
    3528:	79 f0       	breq	.+30     	; 0x3548 <__fp_splitA+0x2a>
    352a:	87 95       	ror	r24
    352c:	08 95       	ret
    352e:	12 16       	cp	r1, r18
    3530:	13 06       	cpc	r1, r19
    3532:	14 06       	cpc	r1, r20
    3534:	55 1f       	adc	r21, r21
    3536:	f2 cf       	rjmp	.-28     	; 0x351c <__fp_split3+0xe>
    3538:	46 95       	lsr	r20
    353a:	f1 df       	rcall	.-30     	; 0x351e <__fp_splitA>
    353c:	08 c0       	rjmp	.+16     	; 0x354e <__fp_splitA+0x30>
    353e:	16 16       	cp	r1, r22
    3540:	17 06       	cpc	r1, r23
    3542:	18 06       	cpc	r1, r24
    3544:	99 1f       	adc	r25, r25
    3546:	f1 cf       	rjmp	.-30     	; 0x352a <__fp_splitA+0xc>
    3548:	86 95       	lsr	r24
    354a:	71 05       	cpc	r23, r1
    354c:	61 05       	cpc	r22, r1
    354e:	08 94       	sec
    3550:	08 95       	ret

00003552 <__fp_zero>:
    3552:	e8 94       	clt

00003554 <__fp_szero>:
    3554:	bb 27       	eor	r27, r27
    3556:	66 27       	eor	r22, r22
    3558:	77 27       	eor	r23, r23
    355a:	cb 01       	movw	r24, r22
    355c:	97 f9       	bld	r25, 7
    355e:	08 95       	ret

00003560 <inverse>:
    3560:	9b 01       	movw	r18, r22
    3562:	ac 01       	movw	r20, r24
    3564:	60 e0       	ldi	r22, 0x00	; 0
    3566:	70 e0       	ldi	r23, 0x00	; 0
    3568:	80 e8       	ldi	r24, 0x80	; 128
    356a:	9f e3       	ldi	r25, 0x3F	; 63
    356c:	62 ca       	rjmp	.-2876   	; 0x2a32 <__divsf3>
    356e:	a1 cf       	rjmp	.-190    	; 0x34b2 <__fp_inf>
    3570:	6d c1       	rjmp	.+730    	; 0x384c <__fp_mpack>

00003572 <ldexp>:
    3572:	d5 df       	rcall	.-86     	; 0x351e <__fp_splitA>
    3574:	e8 f3       	brcs	.-6      	; 0x3570 <inverse+0x10>
    3576:	99 23       	and	r25, r25
    3578:	d9 f3       	breq	.-10     	; 0x3570 <inverse+0x10>
    357a:	94 0f       	add	r25, r20
    357c:	51 1d       	adc	r21, r1
    357e:	bb f3       	brvs	.-18     	; 0x356e <inverse+0xe>
    3580:	91 50       	subi	r25, 0x01	; 1
    3582:	50 40       	sbci	r21, 0x00	; 0
    3584:	94 f0       	brlt	.+36     	; 0x35aa <ldexp+0x38>
    3586:	59 f0       	breq	.+22     	; 0x359e <ldexp+0x2c>
    3588:	88 23       	and	r24, r24
    358a:	32 f0       	brmi	.+12     	; 0x3598 <ldexp+0x26>
    358c:	66 0f       	add	r22, r22
    358e:	77 1f       	adc	r23, r23
    3590:	88 1f       	adc	r24, r24
    3592:	91 50       	subi	r25, 0x01	; 1
    3594:	50 40       	sbci	r21, 0x00	; 0
    3596:	c1 f7       	brne	.-16     	; 0x3588 <ldexp+0x16>
    3598:	9e 3f       	cpi	r25, 0xFE	; 254
    359a:	51 05       	cpc	r21, r1
    359c:	44 f7       	brge	.-48     	; 0x356e <inverse+0xe>
    359e:	88 0f       	add	r24, r24
    35a0:	91 1d       	adc	r25, r1
    35a2:	96 95       	lsr	r25
    35a4:	87 95       	ror	r24
    35a6:	97 f9       	bld	r25, 7
    35a8:	08 95       	ret
    35aa:	5f 3f       	cpi	r21, 0xFF	; 255
    35ac:	ac f0       	brlt	.+42     	; 0x35d8 <ldexp+0x66>
    35ae:	98 3e       	cpi	r25, 0xE8	; 232
    35b0:	9c f0       	brlt	.+38     	; 0x35d8 <ldexp+0x66>
    35b2:	bb 27       	eor	r27, r27
    35b4:	86 95       	lsr	r24
    35b6:	77 95       	ror	r23
    35b8:	67 95       	ror	r22
    35ba:	b7 95       	ror	r27
    35bc:	08 f4       	brcc	.+2      	; 0x35c0 <ldexp+0x4e>
    35be:	b1 60       	ori	r27, 0x01	; 1
    35c0:	93 95       	inc	r25
    35c2:	c1 f7       	brne	.-16     	; 0x35b4 <ldexp+0x42>
    35c4:	bb 0f       	add	r27, r27
    35c6:	58 f7       	brcc	.-42     	; 0x359e <ldexp+0x2c>
    35c8:	11 f4       	brne	.+4      	; 0x35ce <ldexp+0x5c>
    35ca:	60 ff       	sbrs	r22, 0
    35cc:	e8 cf       	rjmp	.-48     	; 0x359e <ldexp+0x2c>
    35ce:	6f 5f       	subi	r22, 0xFF	; 255
    35d0:	7f 4f       	sbci	r23, 0xFF	; 255
    35d2:	8f 4f       	sbci	r24, 0xFF	; 255
    35d4:	9f 4f       	sbci	r25, 0xFF	; 255
    35d6:	e3 cf       	rjmp	.-58     	; 0x359e <ldexp+0x2c>
    35d8:	bd cf       	rjmp	.-134    	; 0x3554 <__fp_szero>
    35da:	0e f0       	brts	.+2      	; 0x35de <ldexp+0x6c>
    35dc:	37 c1       	rjmp	.+622    	; 0x384c <__fp_mpack>
    35de:	6f cf       	rjmp	.-290    	; 0x34be <__fp_nan>
    35e0:	68 94       	set
    35e2:	67 cf       	rjmp	.-306    	; 0x34b2 <__fp_inf>

000035e4 <log>:
    35e4:	9c df       	rcall	.-200    	; 0x351e <__fp_splitA>
    35e6:	c8 f3       	brcs	.-14     	; 0x35da <ldexp+0x68>
    35e8:	99 23       	and	r25, r25
    35ea:	d1 f3       	breq	.-12     	; 0x35e0 <ldexp+0x6e>
    35ec:	c6 f3       	brts	.-16     	; 0x35de <ldexp+0x6c>
    35ee:	df 93       	push	r29
    35f0:	cf 93       	push	r28
    35f2:	1f 93       	push	r17
    35f4:	0f 93       	push	r16
    35f6:	ff 92       	push	r15
    35f8:	c9 2f       	mov	r28, r25
    35fa:	dd 27       	eor	r29, r29
    35fc:	88 23       	and	r24, r24
    35fe:	2a f0       	brmi	.+10     	; 0x360a <log+0x26>
    3600:	21 97       	sbiw	r28, 0x01	; 1
    3602:	66 0f       	add	r22, r22
    3604:	77 1f       	adc	r23, r23
    3606:	88 1f       	adc	r24, r24
    3608:	da f7       	brpl	.-10     	; 0x3600 <log+0x1c>
    360a:	20 e0       	ldi	r18, 0x00	; 0
    360c:	30 e0       	ldi	r19, 0x00	; 0
    360e:	40 e8       	ldi	r20, 0x80	; 128
    3610:	5f eb       	ldi	r21, 0xBF	; 191
    3612:	9f e3       	ldi	r25, 0x3F	; 63
    3614:	88 39       	cpi	r24, 0x98	; 152
    3616:	20 f0       	brcs	.+8      	; 0x3620 <log+0x3c>
    3618:	80 3e       	cpi	r24, 0xE0	; 224
    361a:	30 f0       	brcs	.+12     	; 0x3628 <log+0x44>
    361c:	21 96       	adiw	r28, 0x01	; 1
    361e:	8f 77       	andi	r24, 0x7F	; 127
    3620:	e1 d8       	rcall	.-3646   	; 0x27e4 <__addsf3>
    3622:	ec e0       	ldi	r30, 0x0C	; 12
    3624:	f1 e0       	ldi	r31, 0x01	; 1
    3626:	03 c0       	rjmp	.+6      	; 0x362e <log+0x4a>
    3628:	dd d8       	rcall	.-3654   	; 0x27e4 <__addsf3>
    362a:	e9 e3       	ldi	r30, 0x39	; 57
    362c:	f1 e0       	ldi	r31, 0x01	; 1
    362e:	4a df       	rcall	.-364    	; 0x34c4 <__fp_powser>
    3630:	8b 01       	movw	r16, r22
    3632:	be 01       	movw	r22, r28
    3634:	ec 01       	movw	r28, r24
    3636:	fb 2e       	mov	r15, r27
    3638:	6f 57       	subi	r22, 0x7F	; 127
    363a:	71 09       	sbc	r23, r1
    363c:	75 95       	asr	r23
    363e:	77 1f       	adc	r23, r23
    3640:	88 0b       	sbc	r24, r24
    3642:	99 0b       	sbc	r25, r25
    3644:	32 db       	rcall	.-2460   	; 0x2caa <__floatsisf>
    3646:	28 e1       	ldi	r18, 0x18	; 24
    3648:	32 e7       	ldi	r19, 0x72	; 114
    364a:	41 e3       	ldi	r20, 0x31	; 49
    364c:	5f e3       	ldi	r21, 0x3F	; 63
    364e:	47 d0       	rcall	.+142    	; 0x36de <__mulsf3x>
    3650:	af 2d       	mov	r26, r15
    3652:	98 01       	movw	r18, r16
    3654:	ae 01       	movw	r20, r28
    3656:	ff 90       	pop	r15
    3658:	0f 91       	pop	r16
    365a:	1f 91       	pop	r17
    365c:	cf 91       	pop	r28
    365e:	df 91       	pop	r29
    3660:	a2 d0       	rcall	.+324    	; 0x37a6 <__addsf3x>
    3662:	10 c1       	rjmp	.+544    	; 0x3884 <__fp_round>

00003664 <modf>:
    3664:	fa 01       	movw	r30, r20
    3666:	dc 01       	movw	r26, r24
    3668:	aa 0f       	add	r26, r26
    366a:	bb 1f       	adc	r27, r27
    366c:	9b 01       	movw	r18, r22
    366e:	ac 01       	movw	r20, r24
    3670:	bf 57       	subi	r27, 0x7F	; 127
    3672:	28 f4       	brcc	.+10     	; 0x367e <modf+0x1a>
    3674:	22 27       	eor	r18, r18
    3676:	33 27       	eor	r19, r19
    3678:	44 27       	eor	r20, r20
    367a:	50 78       	andi	r21, 0x80	; 128
    367c:	1f c0       	rjmp	.+62     	; 0x36bc <modf+0x58>
    367e:	b7 51       	subi	r27, 0x17	; 23
    3680:	88 f4       	brcc	.+34     	; 0x36a4 <modf+0x40>
    3682:	ab 2f       	mov	r26, r27
    3684:	00 24       	eor	r0, r0
    3686:	46 95       	lsr	r20
    3688:	37 95       	ror	r19
    368a:	27 95       	ror	r18
    368c:	01 1c       	adc	r0, r1
    368e:	a3 95       	inc	r26
    3690:	d2 f3       	brmi	.-12     	; 0x3686 <modf+0x22>
    3692:	00 20       	and	r0, r0
    3694:	69 f0       	breq	.+26     	; 0x36b0 <modf+0x4c>
    3696:	22 0f       	add	r18, r18
    3698:	33 1f       	adc	r19, r19
    369a:	44 1f       	adc	r20, r20
    369c:	b3 95       	inc	r27
    369e:	da f3       	brmi	.-10     	; 0x3696 <modf+0x32>
    36a0:	0d d0       	rcall	.+26     	; 0x36bc <modf+0x58>
    36a2:	6f c8       	rjmp	.-3874   	; 0x2782 <__subsf3>
    36a4:	61 30       	cpi	r22, 0x01	; 1
    36a6:	71 05       	cpc	r23, r1
    36a8:	a0 e8       	ldi	r26, 0x80	; 128
    36aa:	8a 07       	cpc	r24, r26
    36ac:	b9 46       	sbci	r27, 0x69	; 105
    36ae:	30 f4       	brcc	.+12     	; 0x36bc <modf+0x58>
    36b0:	9b 01       	movw	r18, r22
    36b2:	ac 01       	movw	r20, r24
    36b4:	66 27       	eor	r22, r22
    36b6:	77 27       	eor	r23, r23
    36b8:	88 27       	eor	r24, r24
    36ba:	90 78       	andi	r25, 0x80	; 128
    36bc:	30 96       	adiw	r30, 0x00	; 0
    36be:	21 f0       	breq	.+8      	; 0x36c8 <modf+0x64>
    36c0:	20 83       	st	Z, r18
    36c2:	31 83       	std	Z+1, r19	; 0x01
    36c4:	42 83       	std	Z+2, r20	; 0x02
    36c6:	53 83       	std	Z+3, r21	; 0x03
    36c8:	08 95       	ret
    36ca:	ce d0       	rcall	.+412    	; 0x3868 <__fp_pscA>
    36cc:	28 f0       	brcs	.+10     	; 0x36d8 <modf+0x74>
    36ce:	d3 d0       	rcall	.+422    	; 0x3876 <__fp_pscB>
    36d0:	18 f0       	brcs	.+6      	; 0x36d8 <modf+0x74>
    36d2:	95 23       	and	r25, r21
    36d4:	09 f0       	breq	.+2      	; 0x36d8 <modf+0x74>
    36d6:	ed ce       	rjmp	.-550    	; 0x34b2 <__fp_inf>
    36d8:	f2 ce       	rjmp	.-540    	; 0x34be <__fp_nan>
    36da:	11 24       	eor	r1, r1
    36dc:	3b cf       	rjmp	.-394    	; 0x3554 <__fp_szero>

000036de <__mulsf3x>:
    36de:	17 df       	rcall	.-466    	; 0x350e <__fp_split3>
    36e0:	a0 f3       	brcs	.-24     	; 0x36ca <modf+0x66>

000036e2 <__mulsf3_pse>:
    36e2:	95 9f       	mul	r25, r21
    36e4:	d1 f3       	breq	.-12     	; 0x36da <modf+0x76>
    36e6:	95 0f       	add	r25, r21
    36e8:	50 e0       	ldi	r21, 0x00	; 0
    36ea:	55 1f       	adc	r21, r21
    36ec:	62 9f       	mul	r22, r18
    36ee:	f0 01       	movw	r30, r0
    36f0:	72 9f       	mul	r23, r18
    36f2:	bb 27       	eor	r27, r27
    36f4:	f0 0d       	add	r31, r0
    36f6:	b1 1d       	adc	r27, r1
    36f8:	63 9f       	mul	r22, r19
    36fa:	aa 27       	eor	r26, r26
    36fc:	f0 0d       	add	r31, r0
    36fe:	b1 1d       	adc	r27, r1
    3700:	aa 1f       	adc	r26, r26
    3702:	64 9f       	mul	r22, r20
    3704:	66 27       	eor	r22, r22
    3706:	b0 0d       	add	r27, r0
    3708:	a1 1d       	adc	r26, r1
    370a:	66 1f       	adc	r22, r22
    370c:	82 9f       	mul	r24, r18
    370e:	22 27       	eor	r18, r18
    3710:	b0 0d       	add	r27, r0
    3712:	a1 1d       	adc	r26, r1
    3714:	62 1f       	adc	r22, r18
    3716:	73 9f       	mul	r23, r19
    3718:	b0 0d       	add	r27, r0
    371a:	a1 1d       	adc	r26, r1
    371c:	62 1f       	adc	r22, r18
    371e:	83 9f       	mul	r24, r19
    3720:	a0 0d       	add	r26, r0
    3722:	61 1d       	adc	r22, r1
    3724:	22 1f       	adc	r18, r18
    3726:	74 9f       	mul	r23, r20
    3728:	33 27       	eor	r19, r19
    372a:	a0 0d       	add	r26, r0
    372c:	61 1d       	adc	r22, r1
    372e:	23 1f       	adc	r18, r19
    3730:	84 9f       	mul	r24, r20
    3732:	60 0d       	add	r22, r0
    3734:	21 1d       	adc	r18, r1
    3736:	82 2f       	mov	r24, r18
    3738:	76 2f       	mov	r23, r22
    373a:	6a 2f       	mov	r22, r26
    373c:	11 24       	eor	r1, r1
    373e:	9f 57       	subi	r25, 0x7F	; 127
    3740:	50 40       	sbci	r21, 0x00	; 0
    3742:	8a f0       	brmi	.+34     	; 0x3766 <__mulsf3_pse+0x84>
    3744:	e1 f0       	breq	.+56     	; 0x377e <__mulsf3_pse+0x9c>
    3746:	88 23       	and	r24, r24
    3748:	4a f0       	brmi	.+18     	; 0x375c <__mulsf3_pse+0x7a>
    374a:	ee 0f       	add	r30, r30
    374c:	ff 1f       	adc	r31, r31
    374e:	bb 1f       	adc	r27, r27
    3750:	66 1f       	adc	r22, r22
    3752:	77 1f       	adc	r23, r23
    3754:	88 1f       	adc	r24, r24
    3756:	91 50       	subi	r25, 0x01	; 1
    3758:	50 40       	sbci	r21, 0x00	; 0
    375a:	a9 f7       	brne	.-22     	; 0x3746 <__mulsf3_pse+0x64>
    375c:	9e 3f       	cpi	r25, 0xFE	; 254
    375e:	51 05       	cpc	r21, r1
    3760:	70 f0       	brcs	.+28     	; 0x377e <__mulsf3_pse+0x9c>
    3762:	a7 ce       	rjmp	.-690    	; 0x34b2 <__fp_inf>
    3764:	f7 ce       	rjmp	.-530    	; 0x3554 <__fp_szero>
    3766:	5f 3f       	cpi	r21, 0xFF	; 255
    3768:	ec f3       	brlt	.-6      	; 0x3764 <__mulsf3_pse+0x82>
    376a:	98 3e       	cpi	r25, 0xE8	; 232
    376c:	dc f3       	brlt	.-10     	; 0x3764 <__mulsf3_pse+0x82>
    376e:	86 95       	lsr	r24
    3770:	77 95       	ror	r23
    3772:	67 95       	ror	r22
    3774:	b7 95       	ror	r27
    3776:	f7 95       	ror	r31
    3778:	e7 95       	ror	r30
    377a:	9f 5f       	subi	r25, 0xFF	; 255
    377c:	c1 f7       	brne	.-16     	; 0x376e <__mulsf3_pse+0x8c>
    377e:	fe 2b       	or	r31, r30
    3780:	88 0f       	add	r24, r24
    3782:	91 1d       	adc	r25, r1
    3784:	96 95       	lsr	r25
    3786:	87 95       	ror	r24
    3788:	97 f9       	bld	r25, 7
    378a:	08 95       	ret
    378c:	6d d0       	rcall	.+218    	; 0x3868 <__fp_pscA>
    378e:	30 f0       	brcs	.+12     	; 0x379c <__mulsf3_pse+0xba>
    3790:	72 d0       	rcall	.+228    	; 0x3876 <__fp_pscB>
    3792:	20 f0       	brcs	.+8      	; 0x379c <__mulsf3_pse+0xba>
    3794:	31 f4       	brne	.+12     	; 0x37a2 <__mulsf3_pse+0xc0>
    3796:	9f 3f       	cpi	r25, 0xFF	; 255
    3798:	11 f4       	brne	.+4      	; 0x379e <__mulsf3_pse+0xbc>
    379a:	1e f4       	brtc	.+6      	; 0x37a2 <__mulsf3_pse+0xc0>
    379c:	90 ce       	rjmp	.-736    	; 0x34be <__fp_nan>
    379e:	0e f4       	brtc	.+2      	; 0x37a2 <__mulsf3_pse+0xc0>
    37a0:	e0 95       	com	r30
    37a2:	e7 fb       	bst	r30, 7
    37a4:	86 ce       	rjmp	.-756    	; 0x34b2 <__fp_inf>

000037a6 <__addsf3x>:
    37a6:	e9 2f       	mov	r30, r25
    37a8:	b2 de       	rcall	.-668    	; 0x350e <__fp_split3>
    37aa:	80 f3       	brcs	.-32     	; 0x378c <__mulsf3_pse+0xaa>
    37ac:	ba 17       	cp	r27, r26
    37ae:	62 07       	cpc	r22, r18
    37b0:	73 07       	cpc	r23, r19
    37b2:	84 07       	cpc	r24, r20
    37b4:	95 07       	cpc	r25, r21
    37b6:	18 f0       	brcs	.+6      	; 0x37be <__addsf3x+0x18>
    37b8:	71 f4       	brne	.+28     	; 0x37d6 <__addsf3x+0x30>
    37ba:	9e f5       	brtc	.+102    	; 0x3822 <__addsf3x+0x7c>
    37bc:	ca ce       	rjmp	.-620    	; 0x3552 <__fp_zero>
    37be:	0e f4       	brtc	.+2      	; 0x37c2 <__addsf3x+0x1c>
    37c0:	e0 95       	com	r30
    37c2:	0b 2e       	mov	r0, r27
    37c4:	ba 2f       	mov	r27, r26
    37c6:	a0 2d       	mov	r26, r0
    37c8:	0b 01       	movw	r0, r22
    37ca:	b9 01       	movw	r22, r18
    37cc:	90 01       	movw	r18, r0
    37ce:	0c 01       	movw	r0, r24
    37d0:	ca 01       	movw	r24, r20
    37d2:	a0 01       	movw	r20, r0
    37d4:	11 24       	eor	r1, r1
    37d6:	ff 27       	eor	r31, r31
    37d8:	59 1b       	sub	r21, r25
    37da:	99 f0       	breq	.+38     	; 0x3802 <__addsf3x+0x5c>
    37dc:	59 3f       	cpi	r21, 0xF9	; 249
    37de:	50 f4       	brcc	.+20     	; 0x37f4 <__addsf3x+0x4e>
    37e0:	50 3e       	cpi	r21, 0xE0	; 224
    37e2:	68 f1       	brcs	.+90     	; 0x383e <__addsf3x+0x98>
    37e4:	1a 16       	cp	r1, r26
    37e6:	f0 40       	sbci	r31, 0x00	; 0
    37e8:	a2 2f       	mov	r26, r18
    37ea:	23 2f       	mov	r18, r19
    37ec:	34 2f       	mov	r19, r20
    37ee:	44 27       	eor	r20, r20
    37f0:	58 5f       	subi	r21, 0xF8	; 248
    37f2:	f3 cf       	rjmp	.-26     	; 0x37da <__addsf3x+0x34>
    37f4:	46 95       	lsr	r20
    37f6:	37 95       	ror	r19
    37f8:	27 95       	ror	r18
    37fa:	a7 95       	ror	r26
    37fc:	f0 40       	sbci	r31, 0x00	; 0
    37fe:	53 95       	inc	r21
    3800:	c9 f7       	brne	.-14     	; 0x37f4 <__addsf3x+0x4e>
    3802:	7e f4       	brtc	.+30     	; 0x3822 <__addsf3x+0x7c>
    3804:	1f 16       	cp	r1, r31
    3806:	ba 0b       	sbc	r27, r26
    3808:	62 0b       	sbc	r22, r18
    380a:	73 0b       	sbc	r23, r19
    380c:	84 0b       	sbc	r24, r20
    380e:	ba f0       	brmi	.+46     	; 0x383e <__addsf3x+0x98>
    3810:	91 50       	subi	r25, 0x01	; 1
    3812:	a1 f0       	breq	.+40     	; 0x383c <__addsf3x+0x96>
    3814:	ff 0f       	add	r31, r31
    3816:	bb 1f       	adc	r27, r27
    3818:	66 1f       	adc	r22, r22
    381a:	77 1f       	adc	r23, r23
    381c:	88 1f       	adc	r24, r24
    381e:	c2 f7       	brpl	.-16     	; 0x3810 <__addsf3x+0x6a>
    3820:	0e c0       	rjmp	.+28     	; 0x383e <__addsf3x+0x98>
    3822:	ba 0f       	add	r27, r26
    3824:	62 1f       	adc	r22, r18
    3826:	73 1f       	adc	r23, r19
    3828:	84 1f       	adc	r24, r20
    382a:	48 f4       	brcc	.+18     	; 0x383e <__addsf3x+0x98>
    382c:	87 95       	ror	r24
    382e:	77 95       	ror	r23
    3830:	67 95       	ror	r22
    3832:	b7 95       	ror	r27
    3834:	f7 95       	ror	r31
    3836:	9e 3f       	cpi	r25, 0xFE	; 254
    3838:	08 f0       	brcs	.+2      	; 0x383c <__addsf3x+0x96>
    383a:	b3 cf       	rjmp	.-154    	; 0x37a2 <__mulsf3_pse+0xc0>
    383c:	93 95       	inc	r25
    383e:	88 0f       	add	r24, r24
    3840:	08 f0       	brcs	.+2      	; 0x3844 <__addsf3x+0x9e>
    3842:	99 27       	eor	r25, r25
    3844:	ee 0f       	add	r30, r30
    3846:	97 95       	ror	r25
    3848:	87 95       	ror	r24
    384a:	08 95       	ret

0000384c <__fp_mpack>:
    384c:	9f 3f       	cpi	r25, 0xFF	; 255
    384e:	31 f0       	breq	.+12     	; 0x385c <__fp_mpack_finite+0xc>

00003850 <__fp_mpack_finite>:
    3850:	91 50       	subi	r25, 0x01	; 1
    3852:	20 f4       	brcc	.+8      	; 0x385c <__fp_mpack_finite+0xc>
    3854:	87 95       	ror	r24
    3856:	77 95       	ror	r23
    3858:	67 95       	ror	r22
    385a:	b7 95       	ror	r27
    385c:	88 0f       	add	r24, r24
    385e:	91 1d       	adc	r25, r1
    3860:	96 95       	lsr	r25
    3862:	87 95       	ror	r24
    3864:	97 f9       	bld	r25, 7
    3866:	08 95       	ret

00003868 <__fp_pscA>:
    3868:	00 24       	eor	r0, r0
    386a:	0a 94       	dec	r0
    386c:	16 16       	cp	r1, r22
    386e:	17 06       	cpc	r1, r23
    3870:	18 06       	cpc	r1, r24
    3872:	09 06       	cpc	r0, r25
    3874:	08 95       	ret

00003876 <__fp_pscB>:
    3876:	00 24       	eor	r0, r0
    3878:	0a 94       	dec	r0
    387a:	12 16       	cp	r1, r18
    387c:	13 06       	cpc	r1, r19
    387e:	14 06       	cpc	r1, r20
    3880:	05 06       	cpc	r0, r21
    3882:	08 95       	ret

00003884 <__fp_round>:
    3884:	09 2e       	mov	r0, r25
    3886:	03 94       	inc	r0
    3888:	00 0c       	add	r0, r0
    388a:	11 f4       	brne	.+4      	; 0x3890 <__fp_round+0xc>
    388c:	88 23       	and	r24, r24
    388e:	52 f0       	brmi	.+20     	; 0x38a4 <__fp_round+0x20>
    3890:	bb 0f       	add	r27, r27
    3892:	40 f4       	brcc	.+16     	; 0x38a4 <__fp_round+0x20>
    3894:	bf 2b       	or	r27, r31
    3896:	11 f4       	brne	.+4      	; 0x389c <__fp_round+0x18>
    3898:	60 ff       	sbrs	r22, 0
    389a:	04 c0       	rjmp	.+8      	; 0x38a4 <__fp_round+0x20>
    389c:	6f 5f       	subi	r22, 0xFF	; 255
    389e:	7f 4f       	sbci	r23, 0xFF	; 255
    38a0:	8f 4f       	sbci	r24, 0xFF	; 255
    38a2:	9f 4f       	sbci	r25, 0xFF	; 255
    38a4:	08 95       	ret

000038a6 <_exit>:
    38a6:	f8 94       	cli

000038a8 <__stop_program>:
    38a8:	ff cf       	rjmp	.-2      	; 0x38a8 <__stop_program>
