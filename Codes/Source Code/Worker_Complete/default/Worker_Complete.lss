
Worker_Complete.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000128  00800200  00005d1c  00005db0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005d1c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004b  00800328  00800328  00005ed8  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00005ed8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000084f  00000000  00000000  00005ef8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000197c  00000000  00000000  00006747  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000255  00000000  00000000  000080c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002445  00000000  00000000  00008318  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000510  00000000  00000000  0000a760  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000870  00000000  00000000  0000ac70  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b3 00 	jmp	0x166	; 0x166 <__ctors_end>
       4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
       8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
       c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      10:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      14:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__vector_5>
      18:	0c 94 08 01 	jmp	0x210	; 0x210 <__vector_6>
      1c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      20:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      24:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      28:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      2c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      30:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      34:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      38:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      3c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      40:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      44:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      48:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      4c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      50:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      54:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      58:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      5c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      60:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      64:	0c 94 65 17 	jmp	0x2eca	; 0x2eca <__vector_25>
      68:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      6c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      70:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      74:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      78:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      7c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      80:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      84:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      88:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      8c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      90:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      94:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      98:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      9c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      a0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      a4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      a8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      ac:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      b0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      b4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      b8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      bc:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      c0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      c4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      c8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      cc:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      d0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      d4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      d8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      dc:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      e0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      e4:	07 63       	ori	r16, 0x37	; 55
      e6:	42 36       	cpi	r20, 0x62	; 98
      e8:	b7 9b       	sbis	0x16, 7	; 22
      ea:	d8 a7       	std	Y+40, r29	; 0x28
      ec:	1a 39       	cpi	r17, 0x9A	; 154
      ee:	68 56       	subi	r22, 0x68	; 104
      f0:	18 ae       	std	Y+56, r1	; 0x38
      f2:	ba ab       	std	Y+50, r27	; 0x32
      f4:	55 8c       	ldd	r5, Z+29	; 0x1d
      f6:	1d 3c       	cpi	r17, 0xCD	; 205
      f8:	b7 cc       	rjmp	.-1682   	; 0xfffffa68 <__eeprom_end+0xff7efa68>
      fa:	57 63       	ori	r21, 0x37	; 55
      fc:	bd 6d       	ori	r27, 0xDD	; 221
      fe:	ed fd       	.word	0xfded	; ????
     100:	75 3e       	cpi	r23, 0xE5	; 229
     102:	f6 17       	cp	r31, r22
     104:	72 31       	cpi	r23, 0x12	; 18
     106:	bf 00       	.word	0x00bf	; ????
     108:	00 00       	nop
     10a:	80 3f       	cpi	r24, 0xF0	; 240
     10c:	08 00       	.word	0x0008	; ????
     10e:	00 00       	nop
     110:	be 92       	st	-X, r11
     112:	24 49       	sbci	r18, 0x94	; 148
     114:	12 3e       	cpi	r17, 0xE2	; 226
     116:	ab aa       	std	Y+51, r10	; 0x33
     118:	aa 2a       	or	r10, r26
     11a:	be cd       	rjmp	.-1156   	; 0xfffffc98 <__eeprom_end+0xff7efc98>
     11c:	cc cc       	rjmp	.-1640   	; 0xfffffab6 <__eeprom_end+0xff7efab6>
     11e:	4c 3e       	cpi	r20, 0xEC	; 236
     120:	00 00       	nop
     122:	00 80       	ld	r0, Z
     124:	be ab       	std	Y+54, r27	; 0x36
     126:	aa aa       	std	Y+50, r10	; 0x32
     128:	aa 3e       	cpi	r26, 0xEA	; 234
     12a:	00 00       	nop
     12c:	00 00       	nop
     12e:	bf 00       	.word	0x00bf	; ????
     130:	00 00       	nop
     132:	80 3f       	cpi	r24, 0xF0	; 240
     134:	00 00       	nop
     136:	00 00       	nop
     138:	00 08       	sbc	r0, r0
     13a:	41 78       	andi	r20, 0x81	; 129
     13c:	d3 bb       	out	0x13, r29	; 19
     13e:	43 87       	std	Z+11, r20	; 0x0b
     140:	d1 13       	cpse	r29, r17
     142:	3d 19       	sub	r19, r13
     144:	0e 3c       	cpi	r16, 0xCE	; 206
     146:	c3 bd       	out	0x23, r28	; 35
     148:	42 82       	std	Z+2, r4	; 0x02
     14a:	ad 2b       	or	r26, r29
     14c:	3e 68       	ori	r19, 0x8E	; 142
     14e:	ec 82       	std	Y+4, r14	; 0x04
     150:	76 be       	out	0x36, r7	; 54
     152:	d9 8f       	std	Y+25, r29	; 0x19
     154:	e1 a9       	ldd	r30, Z+49	; 0x31
     156:	3e 4c       	sbci	r19, 0xCE	; 206
     158:	80 ef       	ldi	r24, 0xF0	; 240
     15a:	ff be       	out	0x3f, r15	; 63
     15c:	01 c4       	rjmp	.+2050   	; 0x960 <Sharp_estimation+0x36>
     15e:	ff 7f       	andi	r31, 0xFF	; 255
     160:	3f 00       	.word	0x003f	; ????
     162:	00 00       	nop
	...

00000166 <__ctors_end>:
     166:	11 24       	eor	r1, r1
     168:	1f be       	out	0x3f, r1	; 63
     16a:	cf ef       	ldi	r28, 0xFF	; 255
     16c:	d1 e2       	ldi	r29, 0x21	; 33
     16e:	de bf       	out	0x3e, r29	; 62
     170:	cd bf       	out	0x3d, r28	; 61
     172:	00 e0       	ldi	r16, 0x00	; 0
     174:	0c bf       	out	0x3c, r16	; 60

00000176 <__do_copy_data>:
     176:	13 e0       	ldi	r17, 0x03	; 3
     178:	a0 e0       	ldi	r26, 0x00	; 0
     17a:	b2 e0       	ldi	r27, 0x02	; 2
     17c:	ec e1       	ldi	r30, 0x1C	; 28
     17e:	fd e5       	ldi	r31, 0x5D	; 93
     180:	00 e0       	ldi	r16, 0x00	; 0
     182:	0b bf       	out	0x3b, r16	; 59
     184:	02 c0       	rjmp	.+4      	; 0x18a <__do_copy_data+0x14>
     186:	07 90       	elpm	r0, Z+
     188:	0d 92       	st	X+, r0
     18a:	a8 32       	cpi	r26, 0x28	; 40
     18c:	b1 07       	cpc	r27, r17
     18e:	d9 f7       	brne	.-10     	; 0x186 <__do_copy_data+0x10>

00000190 <__do_clear_bss>:
     190:	13 e0       	ldi	r17, 0x03	; 3
     192:	a8 e2       	ldi	r26, 0x28	; 40
     194:	b3 e0       	ldi	r27, 0x03	; 3
     196:	01 c0       	rjmp	.+2      	; 0x19a <.do_clear_bss_start>

00000198 <.do_clear_bss_loop>:
     198:	1d 92       	st	X+, r1

0000019a <.do_clear_bss_start>:
     19a:	a3 37       	cpi	r26, 0x73	; 115
     19c:	b1 07       	cpc	r27, r17
     19e:	e1 f7       	brne	.-8      	; 0x198 <.do_clear_bss_loop>
     1a0:	0e 94 a1 20 	call	0x4142	; 0x4142 <main>
     1a4:	0c 94 8c 2e 	jmp	0x5d18	; 0x5d18 <_exit>

000001a8 <__bad_interrupt>:
     1a8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001ac <__vector_5>:



//SR for left position encoder
ISR(INT4_vect)
{
     1ac:	1f 92       	push	r1
     1ae:	0f 92       	push	r0
     1b0:	0f b6       	in	r0, 0x3f	; 63
     1b2:	0f 92       	push	r0
     1b4:	11 24       	eor	r1, r1
     1b6:	2f 93       	push	r18
     1b8:	3f 93       	push	r19
     1ba:	8f 93       	push	r24
     1bc:	9f 93       	push	r25
     1be:	df 93       	push	r29
     1c0:	cf 93       	push	r28
     1c2:	cd b7       	in	r28, 0x3d	; 61
     1c4:	de b7       	in	r29, 0x3e	; 62
	ShaftCountLeft++; //increment left shaft position count
     1c6:	80 91 28 03 	lds	r24, 0x0328
     1ca:	90 91 29 03 	lds	r25, 0x0329
     1ce:	01 96       	adiw	r24, 0x01	; 1
     1d0:	90 93 29 03 	sts	0x0329, r25
     1d4:	80 93 28 03 	sts	0x0328, r24
	if(ShaftCountLeft > ShaftCountMax)
     1d8:	20 91 28 03 	lds	r18, 0x0328
     1dc:	30 91 29 03 	lds	r19, 0x0329
     1e0:	80 91 00 02 	lds	r24, 0x0200
     1e4:	90 91 01 02 	lds	r25, 0x0201
     1e8:	82 17       	cp	r24, r18
     1ea:	93 07       	cpc	r25, r19
     1ec:	30 f4       	brcc	.+12     	; 0x1fa <__vector_5+0x4e>
	{
		completeBlack = 1;
     1ee:	81 e0       	ldi	r24, 0x01	; 1
     1f0:	90 e0       	ldi	r25, 0x00	; 0
     1f2:	90 93 2d 03 	sts	0x032D, r25
     1f6:	80 93 2c 03 	sts	0x032C, r24
	}
}
     1fa:	cf 91       	pop	r28
     1fc:	df 91       	pop	r29
     1fe:	9f 91       	pop	r25
     200:	8f 91       	pop	r24
     202:	3f 91       	pop	r19
     204:	2f 91       	pop	r18
     206:	0f 90       	pop	r0
     208:	0f be       	out	0x3f, r0	; 63
     20a:	0f 90       	pop	r0
     20c:	1f 90       	pop	r1
     20e:	18 95       	reti

00000210 <__vector_6>:

//ISR for right position encoder
ISR(INT5_vect)
{
     210:	1f 92       	push	r1
     212:	0f 92       	push	r0
     214:	0f b6       	in	r0, 0x3f	; 63
     216:	0f 92       	push	r0
     218:	11 24       	eor	r1, r1
     21a:	2f 93       	push	r18
     21c:	3f 93       	push	r19
     21e:	8f 93       	push	r24
     220:	9f 93       	push	r25
     222:	df 93       	push	r29
     224:	cf 93       	push	r28
     226:	cd b7       	in	r28, 0x3d	; 61
     228:	de b7       	in	r29, 0x3e	; 62
	ShaftCountRight++; //increment right shaft position count
     22a:	80 91 2a 03 	lds	r24, 0x032A
     22e:	90 91 2b 03 	lds	r25, 0x032B
     232:	01 96       	adiw	r24, 0x01	; 1
     234:	90 93 2b 03 	sts	0x032B, r25
     238:	80 93 2a 03 	sts	0x032A, r24
	if(ShaftCountRight > ShaftCountMax)
     23c:	20 91 2a 03 	lds	r18, 0x032A
     240:	30 91 2b 03 	lds	r19, 0x032B
     244:	80 91 00 02 	lds	r24, 0x0200
     248:	90 91 01 02 	lds	r25, 0x0201
     24c:	82 17       	cp	r24, r18
     24e:	93 07       	cpc	r25, r19
     250:	30 f4       	brcc	.+12     	; 0x25e <__vector_6+0x4e>
	{
		completeBlack = 1;
     252:	81 e0       	ldi	r24, 0x01	; 1
     254:	90 e0       	ldi	r25, 0x00	; 0
     256:	90 93 2d 03 	sts	0x032D, r25
     25a:	80 93 2c 03 	sts	0x032C, r24
	}
}
     25e:	cf 91       	pop	r28
     260:	df 91       	pop	r29
     262:	9f 91       	pop	r25
     264:	8f 91       	pop	r24
     266:	3f 91       	pop	r19
     268:	2f 91       	pop	r18
     26a:	0f 90       	pop	r0
     26c:	0f be       	out	0x3f, r0	; 63
     26e:	0f 90       	pop	r0
     270:	1f 90       	pop	r1
     272:	18 95       	reti

00000274 <motion_pin_config>:


void motion_pin_config (void)
{
     274:	df 93       	push	r29
     276:	cf 93       	push	r28
     278:	cd b7       	in	r28, 0x3d	; 61
     27a:	de b7       	in	r29, 0x3e	; 62
 DDRA = DDRA | 0x0F;
     27c:	a1 e2       	ldi	r26, 0x21	; 33
     27e:	b0 e0       	ldi	r27, 0x00	; 0
     280:	e1 e2       	ldi	r30, 0x21	; 33
     282:	f0 e0       	ldi	r31, 0x00	; 0
     284:	80 81       	ld	r24, Z
     286:	8f 60       	ori	r24, 0x0F	; 15
     288:	8c 93       	st	X, r24
 PORTA = PORTA & 0xF0;
     28a:	a2 e2       	ldi	r26, 0x22	; 34
     28c:	b0 e0       	ldi	r27, 0x00	; 0
     28e:	e2 e2       	ldi	r30, 0x22	; 34
     290:	f0 e0       	ldi	r31, 0x00	; 0
     292:	80 81       	ld	r24, Z
     294:	80 7f       	andi	r24, 0xF0	; 240
     296:	8c 93       	st	X, r24
 DDRL = DDRL | 0x18;   //Setting PL3 and PL4 pins as output for PWM generation
     298:	aa e0       	ldi	r26, 0x0A	; 10
     29a:	b1 e0       	ldi	r27, 0x01	; 1
     29c:	ea e0       	ldi	r30, 0x0A	; 10
     29e:	f1 e0       	ldi	r31, 0x01	; 1
     2a0:	80 81       	ld	r24, Z
     2a2:	88 61       	ori	r24, 0x18	; 24
     2a4:	8c 93       	st	X, r24
 PORTL = PORTL | 0x18; //PL3 and PL4 pins are for velocity control using PWM.
     2a6:	ab e0       	ldi	r26, 0x0B	; 11
     2a8:	b1 e0       	ldi	r27, 0x01	; 1
     2aa:	eb e0       	ldi	r30, 0x0B	; 11
     2ac:	f1 e0       	ldi	r31, 0x01	; 1
     2ae:	80 81       	ld	r24, Z
     2b0:	88 61       	ori	r24, 0x18	; 24
     2b2:	8c 93       	st	X, r24
}
     2b4:	cf 91       	pop	r28
     2b6:	df 91       	pop	r29
     2b8:	08 95       	ret

000002ba <left_encoder_pin_config>:

//Function to configure INT4 (PORTE 4) pin as input for the left position encoder
void left_encoder_pin_config (void)
{
     2ba:	df 93       	push	r29
     2bc:	cf 93       	push	r28
     2be:	cd b7       	in	r28, 0x3d	; 61
     2c0:	de b7       	in	r29, 0x3e	; 62
 DDRE  = DDRE & 0xEF;  //Set the direction of the PORTE 4 pin as input
     2c2:	ad e2       	ldi	r26, 0x2D	; 45
     2c4:	b0 e0       	ldi	r27, 0x00	; 0
     2c6:	ed e2       	ldi	r30, 0x2D	; 45
     2c8:	f0 e0       	ldi	r31, 0x00	; 0
     2ca:	80 81       	ld	r24, Z
     2cc:	8f 7e       	andi	r24, 0xEF	; 239
     2ce:	8c 93       	st	X, r24
 PORTE = PORTE | 0x10; //Enable internal pullup for PORTE 4 pin
     2d0:	ae e2       	ldi	r26, 0x2E	; 46
     2d2:	b0 e0       	ldi	r27, 0x00	; 0
     2d4:	ee e2       	ldi	r30, 0x2E	; 46
     2d6:	f0 e0       	ldi	r31, 0x00	; 0
     2d8:	80 81       	ld	r24, Z
     2da:	80 61       	ori	r24, 0x10	; 16
     2dc:	8c 93       	st	X, r24
}
     2de:	cf 91       	pop	r28
     2e0:	df 91       	pop	r29
     2e2:	08 95       	ret

000002e4 <right_encoder_pin_config>:

//Function to configure INT5 (PORTE 5) pin as input for the right position encoder
void right_encoder_pin_config (void)
{
     2e4:	df 93       	push	r29
     2e6:	cf 93       	push	r28
     2e8:	cd b7       	in	r28, 0x3d	; 61
     2ea:	de b7       	in	r29, 0x3e	; 62
 DDRE  = DDRE & 0xDF;  //Set the direction of the PORTE 4 pin as input
     2ec:	ad e2       	ldi	r26, 0x2D	; 45
     2ee:	b0 e0       	ldi	r27, 0x00	; 0
     2f0:	ed e2       	ldi	r30, 0x2D	; 45
     2f2:	f0 e0       	ldi	r31, 0x00	; 0
     2f4:	80 81       	ld	r24, Z
     2f6:	8f 7d       	andi	r24, 0xDF	; 223
     2f8:	8c 93       	st	X, r24
 PORTE = PORTE | 0x20; //Enable internal pullup for PORTE 4 pin
     2fa:	ae e2       	ldi	r26, 0x2E	; 46
     2fc:	b0 e0       	ldi	r27, 0x00	; 0
     2fe:	ee e2       	ldi	r30, 0x2E	; 46
     300:	f0 e0       	ldi	r31, 0x00	; 0
     302:	80 81       	ld	r24, Z
     304:	80 62       	ori	r24, 0x20	; 32
     306:	8c 93       	st	X, r24
}
     308:	cf 91       	pop	r28
     30a:	df 91       	pop	r29
     30c:	08 95       	ret

0000030e <init_ports>:

void init_ports()
{
     30e:	df 93       	push	r29
     310:	cf 93       	push	r28
     312:	cd b7       	in	r28, 0x3d	; 61
     314:	de b7       	in	r29, 0x3e	; 62
 motion_pin_config(); //robot motion pins config
     316:	0e 94 3a 01 	call	0x274	; 0x274 <motion_pin_config>
 left_encoder_pin_config(); //left encoder pin config
     31a:	0e 94 5d 01 	call	0x2ba	; 0x2ba <left_encoder_pin_config>
 right_encoder_pin_config(); //right encoder pin config	
     31e:	0e 94 72 01 	call	0x2e4	; 0x2e4 <right_encoder_pin_config>
}
     322:	cf 91       	pop	r28
     324:	df 91       	pop	r29
     326:	08 95       	ret

00000328 <left_position_encoder_interrupt_init>:


void left_position_encoder_interrupt_init (void) //Interrupt 4 enable
{
     328:	df 93       	push	r29
     32a:	cf 93       	push	r28
     32c:	cd b7       	in	r28, 0x3d	; 61
     32e:	de b7       	in	r29, 0x3e	; 62
 cli(); //Clears the global interrupt
     330:	f8 94       	cli
 EICRB = EICRB | 0x02; // INT4 is set to trigger with falling edge
     332:	aa e6       	ldi	r26, 0x6A	; 106
     334:	b0 e0       	ldi	r27, 0x00	; 0
     336:	ea e6       	ldi	r30, 0x6A	; 106
     338:	f0 e0       	ldi	r31, 0x00	; 0
     33a:	80 81       	ld	r24, Z
     33c:	82 60       	ori	r24, 0x02	; 2
     33e:	8c 93       	st	X, r24
 EIMSK = EIMSK | 0x10; // Enable Interrupt INT4 for left position encoder
     340:	ad e3       	ldi	r26, 0x3D	; 61
     342:	b0 e0       	ldi	r27, 0x00	; 0
     344:	ed e3       	ldi	r30, 0x3D	; 61
     346:	f0 e0       	ldi	r31, 0x00	; 0
     348:	80 81       	ld	r24, Z
     34a:	80 61       	ori	r24, 0x10	; 16
     34c:	8c 93       	st	X, r24
 sei();   // Enables the global interrupt 
     34e:	78 94       	sei
}
     350:	cf 91       	pop	r28
     352:	df 91       	pop	r29
     354:	08 95       	ret

00000356 <right_position_encoder_interrupt_init>:

void right_position_encoder_interrupt_init (void) //Interrupt 5 enable
{
     356:	df 93       	push	r29
     358:	cf 93       	push	r28
     35a:	cd b7       	in	r28, 0x3d	; 61
     35c:	de b7       	in	r29, 0x3e	; 62
 cli(); //Clears the global interrupt
     35e:	f8 94       	cli
 EICRB = EICRB | 0x08; // INT5 is set to trigger with falling edge
     360:	aa e6       	ldi	r26, 0x6A	; 106
     362:	b0 e0       	ldi	r27, 0x00	; 0
     364:	ea e6       	ldi	r30, 0x6A	; 106
     366:	f0 e0       	ldi	r31, 0x00	; 0
     368:	80 81       	ld	r24, Z
     36a:	88 60       	ori	r24, 0x08	; 8
     36c:	8c 93       	st	X, r24
 EIMSK = EIMSK | 0x20; // Enable Interrupt INT5 for right position encoder
     36e:	ad e3       	ldi	r26, 0x3D	; 61
     370:	b0 e0       	ldi	r27, 0x00	; 0
     372:	ed e3       	ldi	r30, 0x3D	; 61
     374:	f0 e0       	ldi	r31, 0x00	; 0
     376:	80 81       	ld	r24, Z
     378:	80 62       	ori	r24, 0x20	; 32
     37a:	8c 93       	st	X, r24
 sei();   // Enables the global interrupt 
     37c:	78 94       	sei
}
     37e:	cf 91       	pop	r28
     380:	df 91       	pop	r29
     382:	08 95       	ret

00000384 <motion_set>:


//Function used for setting motor's direction
void motion_set (unsigned char Direction)
{
     384:	df 93       	push	r29
     386:	cf 93       	push	r28
     388:	0f 92       	push	r0
     38a:	0f 92       	push	r0
     38c:	cd b7       	in	r28, 0x3d	; 61
     38e:	de b7       	in	r29, 0x3e	; 62
     390:	8a 83       	std	Y+2, r24	; 0x02
 unsigned char PortARestore = 0;
     392:	19 82       	std	Y+1, r1	; 0x01

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
     394:	8a 81       	ldd	r24, Y+2	; 0x02
     396:	8f 70       	andi	r24, 0x0F	; 15
     398:	8a 83       	std	Y+2, r24	; 0x02
 PortARestore = PORTA; 			// reading the PORTA's original status
     39a:	e2 e2       	ldi	r30, 0x22	; 34
     39c:	f0 e0       	ldi	r31, 0x00	; 0
     39e:	80 81       	ld	r24, Z
     3a0:	89 83       	std	Y+1, r24	; 0x01
 PortARestore &= 0xF0; 			// setting lower direction nibbel to 0
     3a2:	89 81       	ldd	r24, Y+1	; 0x01
     3a4:	80 7f       	andi	r24, 0xF0	; 240
     3a6:	89 83       	std	Y+1, r24	; 0x01
 PortARestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTA status
     3a8:	99 81       	ldd	r25, Y+1	; 0x01
     3aa:	8a 81       	ldd	r24, Y+2	; 0x02
     3ac:	89 2b       	or	r24, r25
     3ae:	89 83       	std	Y+1, r24	; 0x01
 PORTA = PortARestore; 			// setting the command to the port
     3b0:	e2 e2       	ldi	r30, 0x22	; 34
     3b2:	f0 e0       	ldi	r31, 0x00	; 0
     3b4:	89 81       	ldd	r24, Y+1	; 0x01
     3b6:	80 83       	st	Z, r24

}
     3b8:	0f 90       	pop	r0
     3ba:	0f 90       	pop	r0
     3bc:	cf 91       	pop	r28
     3be:	df 91       	pop	r29
     3c0:	08 95       	ret

000003c2 <MOVE_FWD>:
#define MOVE_INPLACE_RIGHT inplace_right()
#define MOVE_INPLACE_LEFT inplace_left()*/


void MOVE_FWD(void) //both wheels forward
{
     3c2:	df 93       	push	r29
     3c4:	cf 93       	push	r28
     3c6:	cd b7       	in	r28, 0x3d	; 61
     3c8:	de b7       	in	r29, 0x3e	; 62
  motion_set(0x06);
     3ca:	86 e0       	ldi	r24, 0x06	; 6
     3cc:	0e 94 c2 01 	call	0x384	; 0x384 <motion_set>
}
     3d0:	cf 91       	pop	r28
     3d2:	df 91       	pop	r29
     3d4:	08 95       	ret

000003d6 <MOVE_REV>:

void MOVE_REV(void) //both wheels backward
{
     3d6:	df 93       	push	r29
     3d8:	cf 93       	push	r28
     3da:	cd b7       	in	r28, 0x3d	; 61
     3dc:	de b7       	in	r29, 0x3e	; 62
  motion_set(0x09);
     3de:	89 e0       	ldi	r24, 0x09	; 9
     3e0:	0e 94 c2 01 	call	0x384	; 0x384 <motion_set>
}
     3e4:	cf 91       	pop	r28
     3e6:	df 91       	pop	r29
     3e8:	08 95       	ret

000003ea <MOVE_LEFT>:

void MOVE_LEFT(void) //Left wheel backward, Right wheel forward
{
     3ea:	df 93       	push	r29
     3ec:	cf 93       	push	r28
     3ee:	cd b7       	in	r28, 0x3d	; 61
     3f0:	de b7       	in	r29, 0x3e	; 62
  motion_set(0x05);
     3f2:	85 e0       	ldi	r24, 0x05	; 5
     3f4:	0e 94 c2 01 	call	0x384	; 0x384 <motion_set>
}
     3f8:	cf 91       	pop	r28
     3fa:	df 91       	pop	r29
     3fc:	08 95       	ret

000003fe <MOVE_RIGHT>:

void MOVE_RIGHT(void) //Left wheel forward, Right wheel backward
{
     3fe:	df 93       	push	r29
     400:	cf 93       	push	r28
     402:	cd b7       	in	r28, 0x3d	; 61
     404:	de b7       	in	r29, 0x3e	; 62
  motion_set(0x0A);
     406:	8a e0       	ldi	r24, 0x0A	; 10
     408:	0e 94 c2 01 	call	0x384	; 0x384 <motion_set>
}
     40c:	cf 91       	pop	r28
     40e:	df 91       	pop	r29
     410:	08 95       	ret

00000412 <MOVE_SOFT_LEFT>:

void MOVE_SOFT_LEFT (void) //Left wheel stationary, Right wheel forward
{
     412:	df 93       	push	r29
     414:	cf 93       	push	r28
     416:	cd b7       	in	r28, 0x3d	; 61
     418:	de b7       	in	r29, 0x3e	; 62
 motion_set(0x04);
     41a:	84 e0       	ldi	r24, 0x04	; 4
     41c:	0e 94 c2 01 	call	0x384	; 0x384 <motion_set>
}
     420:	cf 91       	pop	r28
     422:	df 91       	pop	r29
     424:	08 95       	ret

00000426 <MOVE_SOFT_RIGHT>:

void MOVE_SOFT_RIGHT (void) //Left wheel forward, Right wheel is stationary
{
     426:	df 93       	push	r29
     428:	cf 93       	push	r28
     42a:	cd b7       	in	r28, 0x3d	; 61
     42c:	de b7       	in	r29, 0x3e	; 62
 motion_set(0x02);
     42e:	82 e0       	ldi	r24, 0x02	; 2
     430:	0e 94 c2 01 	call	0x384	; 0x384 <motion_set>
}
     434:	cf 91       	pop	r28
     436:	df 91       	pop	r29
     438:	08 95       	ret

0000043a <MOVE_INPLACE_LEFT>:

void MOVE_INPLACE_LEFT(void) //Left wheel backward, right wheel stationary
{
     43a:	df 93       	push	r29
     43c:	cf 93       	push	r28
     43e:	cd b7       	in	r28, 0x3d	; 61
     440:	de b7       	in	r29, 0x3e	; 62
 motion_set(0x01);
     442:	81 e0       	ldi	r24, 0x01	; 1
     444:	0e 94 c2 01 	call	0x384	; 0x384 <motion_set>
}
     448:	cf 91       	pop	r28
     44a:	df 91       	pop	r29
     44c:	08 95       	ret

0000044e <MOVE_INPLACE_RIGHT>:

void MOVE_INPLACE_RIGHT (void) //Left wheel stationary, Right wheel backward
{
     44e:	df 93       	push	r29
     450:	cf 93       	push	r28
     452:	cd b7       	in	r28, 0x3d	; 61
     454:	de b7       	in	r29, 0x3e	; 62
 motion_set(0x08);
     456:	88 e0       	ldi	r24, 0x08	; 8
     458:	0e 94 c2 01 	call	0x384	; 0x384 <motion_set>
}
     45c:	cf 91       	pop	r28
     45e:	df 91       	pop	r29
     460:	08 95       	ret

00000462 <STOP>:

void STOP (void)
{
     462:	df 93       	push	r29
     464:	cf 93       	push	r28
     466:	cd b7       	in	r28, 0x3d	; 61
     468:	de b7       	in	r29, 0x3e	; 62
  motion_set(0x00);
     46a:	80 e0       	ldi	r24, 0x00	; 0
     46c:	0e 94 c2 01 	call	0x384	; 0x384 <motion_set>
}
     470:	cf 91       	pop	r28
     472:	df 91       	pop	r29
     474:	08 95       	ret

00000476 <angle_rotate>:

void angle_rotate(unsigned int Degrees)
{
     476:	df 93       	push	r29
     478:	cf 93       	push	r28
     47a:	cd b7       	in	r28, 0x3d	; 61
     47c:	de b7       	in	r29, 0x3e	; 62
     47e:	2c 97       	sbiw	r28, 0x0c	; 12
     480:	0f b6       	in	r0, 0x3f	; 63
     482:	f8 94       	cli
     484:	de bf       	out	0x3e, r29	; 62
     486:	0f be       	out	0x3f, r0	; 63
     488:	cd bf       	out	0x3d, r28	; 61
     48a:	9a 87       	std	Y+10, r25	; 0x0a
     48c:	89 87       	std	Y+9, r24	; 0x09
 float ReqdShaftCount = 0;
     48e:	80 e0       	ldi	r24, 0x00	; 0
     490:	90 e0       	ldi	r25, 0x00	; 0
     492:	a0 e0       	ldi	r26, 0x00	; 0
     494:	b0 e0       	ldi	r27, 0x00	; 0
     496:	8d 83       	std	Y+5, r24	; 0x05
     498:	9e 83       	std	Y+6, r25	; 0x06
     49a:	af 83       	std	Y+7, r26	; 0x07
     49c:	b8 87       	std	Y+8, r27	; 0x08
 unsigned long int ReqdShaftCountInt = 0;
     49e:	19 82       	std	Y+1, r1	; 0x01
     4a0:	1a 82       	std	Y+2, r1	; 0x02
     4a2:	1b 82       	std	Y+3, r1	; 0x03
     4a4:	1c 82       	std	Y+4, r1	; 0x04

 ReqdShaftCount = (float) Degrees/ 4.090; // division by resolution to get shaft count
     4a6:	89 85       	ldd	r24, Y+9	; 0x09
     4a8:	9a 85       	ldd	r25, Y+10	; 0x0a
     4aa:	cc 01       	movw	r24, r24
     4ac:	a0 e0       	ldi	r26, 0x00	; 0
     4ae:	b0 e0       	ldi	r27, 0x00	; 0
     4b0:	bc 01       	movw	r22, r24
     4b2:	cd 01       	movw	r24, r26
     4b4:	0e 94 40 29 	call	0x5280	; 0x5280 <__floatunsisf>
     4b8:	dc 01       	movw	r26, r24
     4ba:	cb 01       	movw	r24, r22
     4bc:	bc 01       	movw	r22, r24
     4be:	cd 01       	movw	r24, r26
     4c0:	28 e4       	ldi	r18, 0x48	; 72
     4c2:	31 ee       	ldi	r19, 0xE1	; 225
     4c4:	42 e8       	ldi	r20, 0x82	; 130
     4c6:	50 e4       	ldi	r21, 0x40	; 64
     4c8:	0e 94 52 27 	call	0x4ea4	; 0x4ea4 <__divsf3>
     4cc:	dc 01       	movw	r26, r24
     4ce:	cb 01       	movw	r24, r22
     4d0:	8d 83       	std	Y+5, r24	; 0x05
     4d2:	9e 83       	std	Y+6, r25	; 0x06
     4d4:	af 83       	std	Y+7, r26	; 0x07
     4d6:	b8 87       	std	Y+8, r27	; 0x08
 ReqdShaftCountInt = (unsigned int) ReqdShaftCount;
     4d8:	6d 81       	ldd	r22, Y+5	; 0x05
     4da:	7e 81       	ldd	r23, Y+6	; 0x06
     4dc:	8f 81       	ldd	r24, Y+7	; 0x07
     4de:	98 85       	ldd	r25, Y+8	; 0x08
     4e0:	0e 94 82 24 	call	0x4904	; 0x4904 <__fixunssfsi>
     4e4:	dc 01       	movw	r26, r24
     4e6:	cb 01       	movw	r24, r22
     4e8:	cc 01       	movw	r24, r24
     4ea:	a0 e0       	ldi	r26, 0x00	; 0
     4ec:	b0 e0       	ldi	r27, 0x00	; 0
     4ee:	89 83       	std	Y+1, r24	; 0x01
     4f0:	9a 83       	std	Y+2, r25	; 0x02
     4f2:	ab 83       	std	Y+3, r26	; 0x03
     4f4:	bc 83       	std	Y+4, r27	; 0x04
 ShaftCountRight = 0; 
     4f6:	10 92 2b 03 	sts	0x032B, r1
     4fa:	10 92 2a 03 	sts	0x032A, r1
 ShaftCountLeft = 0; 
     4fe:	10 92 29 03 	sts	0x0329, r1
     502:	10 92 28 03 	sts	0x0328, r1

 while (1)
 {
  if((ShaftCountRight >= ReqdShaftCountInt) | (ShaftCountLeft >= ReqdShaftCountInt))
     506:	80 91 2a 03 	lds	r24, 0x032A
     50a:	90 91 2b 03 	lds	r25, 0x032B
     50e:	9c 01       	movw	r18, r24
     510:	40 e0       	ldi	r20, 0x00	; 0
     512:	50 e0       	ldi	r21, 0x00	; 0
     514:	1c 86       	std	Y+12, r1	; 0x0c
     516:	89 81       	ldd	r24, Y+1	; 0x01
     518:	9a 81       	ldd	r25, Y+2	; 0x02
     51a:	ab 81       	ldd	r26, Y+3	; 0x03
     51c:	bc 81       	ldd	r27, Y+4	; 0x04
     51e:	28 17       	cp	r18, r24
     520:	39 07       	cpc	r19, r25
     522:	4a 07       	cpc	r20, r26
     524:	5b 07       	cpc	r21, r27
     526:	10 f0       	brcs	.+4      	; 0x52c <angle_rotate+0xb6>
     528:	81 e0       	ldi	r24, 0x01	; 1
     52a:	8c 87       	std	Y+12, r24	; 0x0c
     52c:	80 91 28 03 	lds	r24, 0x0328
     530:	90 91 29 03 	lds	r25, 0x0329
     534:	9c 01       	movw	r18, r24
     536:	40 e0       	ldi	r20, 0x00	; 0
     538:	50 e0       	ldi	r21, 0x00	; 0
     53a:	1b 86       	std	Y+11, r1	; 0x0b
     53c:	89 81       	ldd	r24, Y+1	; 0x01
     53e:	9a 81       	ldd	r25, Y+2	; 0x02
     540:	ab 81       	ldd	r26, Y+3	; 0x03
     542:	bc 81       	ldd	r27, Y+4	; 0x04
     544:	28 17       	cp	r18, r24
     546:	39 07       	cpc	r19, r25
     548:	4a 07       	cpc	r20, r26
     54a:	5b 07       	cpc	r21, r27
     54c:	10 f0       	brcs	.+4      	; 0x552 <angle_rotate+0xdc>
     54e:	91 e0       	ldi	r25, 0x01	; 1
     550:	9b 87       	std	Y+11, r25	; 0x0b
     552:	8c 85       	ldd	r24, Y+12	; 0x0c
     554:	9b 85       	ldd	r25, Y+11	; 0x0b
     556:	89 2b       	or	r24, r25
     558:	88 23       	and	r24, r24
     55a:	a9 f2       	breq	.-86     	; 0x506 <angle_rotate+0x90>
  break;
 }
 STOP(); //Stop action
     55c:	0e 94 31 02 	call	0x462	; 0x462 <STOP>
}
     560:	2c 96       	adiw	r28, 0x0c	; 12
     562:	0f b6       	in	r0, 0x3f	; 63
     564:	f8 94       	cli
     566:	de bf       	out	0x3e, r29	; 62
     568:	0f be       	out	0x3f, r0	; 63
     56a:	cd bf       	out	0x3d, r28	; 61
     56c:	cf 91       	pop	r28
     56e:	df 91       	pop	r29
     570:	08 95       	ret

00000572 <linear_distance_mm>:

//Function used for moving robot forward by specified distance

void linear_distance_mm(unsigned int DistanceInMM)
{
     572:	df 93       	push	r29
     574:	cf 93       	push	r28
     576:	cd b7       	in	r28, 0x3d	; 61
     578:	de b7       	in	r29, 0x3e	; 62
     57a:	2c 97       	sbiw	r28, 0x0c	; 12
     57c:	0f b6       	in	r0, 0x3f	; 63
     57e:	f8 94       	cli
     580:	de bf       	out	0x3e, r29	; 62
     582:	0f be       	out	0x3f, r0	; 63
     584:	cd bf       	out	0x3d, r28	; 61
     586:	9a 87       	std	Y+10, r25	; 0x0a
     588:	89 87       	std	Y+9, r24	; 0x09
 float ReqdShaftCount = 0;
     58a:	80 e0       	ldi	r24, 0x00	; 0
     58c:	90 e0       	ldi	r25, 0x00	; 0
     58e:	a0 e0       	ldi	r26, 0x00	; 0
     590:	b0 e0       	ldi	r27, 0x00	; 0
     592:	8d 83       	std	Y+5, r24	; 0x05
     594:	9e 83       	std	Y+6, r25	; 0x06
     596:	af 83       	std	Y+7, r26	; 0x07
     598:	b8 87       	std	Y+8, r27	; 0x08
 unsigned long int ReqdShaftCountInt = 0;
     59a:	19 82       	std	Y+1, r1	; 0x01
     59c:	1a 82       	std	Y+2, r1	; 0x02
     59e:	1b 82       	std	Y+3, r1	; 0x03
     5a0:	1c 82       	std	Y+4, r1	; 0x04

 ReqdShaftCount = (float) DistanceInMM / 5.338; // division by resolution to get shaft count
     5a2:	89 85       	ldd	r24, Y+9	; 0x09
     5a4:	9a 85       	ldd	r25, Y+10	; 0x0a
     5a6:	cc 01       	movw	r24, r24
     5a8:	a0 e0       	ldi	r26, 0x00	; 0
     5aa:	b0 e0       	ldi	r27, 0x00	; 0
     5ac:	bc 01       	movw	r22, r24
     5ae:	cd 01       	movw	r24, r26
     5b0:	0e 94 40 29 	call	0x5280	; 0x5280 <__floatunsisf>
     5b4:	dc 01       	movw	r26, r24
     5b6:	cb 01       	movw	r24, r22
     5b8:	bc 01       	movw	r22, r24
     5ba:	cd 01       	movw	r24, r26
     5bc:	25 ee       	ldi	r18, 0xE5	; 229
     5be:	30 ed       	ldi	r19, 0xD0	; 208
     5c0:	4a ea       	ldi	r20, 0xAA	; 170
     5c2:	50 e4       	ldi	r21, 0x40	; 64
     5c4:	0e 94 52 27 	call	0x4ea4	; 0x4ea4 <__divsf3>
     5c8:	dc 01       	movw	r26, r24
     5ca:	cb 01       	movw	r24, r22
     5cc:	8d 83       	std	Y+5, r24	; 0x05
     5ce:	9e 83       	std	Y+6, r25	; 0x06
     5d0:	af 83       	std	Y+7, r26	; 0x07
     5d2:	b8 87       	std	Y+8, r27	; 0x08
 ReqdShaftCountInt = (unsigned long int) ReqdShaftCount;
     5d4:	6d 81       	ldd	r22, Y+5	; 0x05
     5d6:	7e 81       	ldd	r23, Y+6	; 0x06
     5d8:	8f 81       	ldd	r24, Y+7	; 0x07
     5da:	98 85       	ldd	r25, Y+8	; 0x08
     5dc:	0e 94 82 24 	call	0x4904	; 0x4904 <__fixunssfsi>
     5e0:	dc 01       	movw	r26, r24
     5e2:	cb 01       	movw	r24, r22
     5e4:	89 83       	std	Y+1, r24	; 0x01
     5e6:	9a 83       	std	Y+2, r25	; 0x02
     5e8:	ab 83       	std	Y+3, r26	; 0x03
     5ea:	bc 83       	std	Y+4, r27	; 0x04
  
 ShaftCountRight = 0; 
     5ec:	10 92 2b 03 	sts	0x032B, r1
     5f0:	10 92 2a 03 	sts	0x032A, r1
 ShaftCountLeft = 0;
     5f4:	10 92 29 03 	sts	0x0329, r1
     5f8:	10 92 28 03 	sts	0x0328, r1
 while(1)
 {
  if((ShaftCountRight >= ReqdShaftCountInt) | (ShaftCountLeft >= ReqdShaftCountInt))
     5fc:	80 91 2a 03 	lds	r24, 0x032A
     600:	90 91 2b 03 	lds	r25, 0x032B
     604:	9c 01       	movw	r18, r24
     606:	40 e0       	ldi	r20, 0x00	; 0
     608:	50 e0       	ldi	r21, 0x00	; 0
     60a:	1c 86       	std	Y+12, r1	; 0x0c
     60c:	89 81       	ldd	r24, Y+1	; 0x01
     60e:	9a 81       	ldd	r25, Y+2	; 0x02
     610:	ab 81       	ldd	r26, Y+3	; 0x03
     612:	bc 81       	ldd	r27, Y+4	; 0x04
     614:	28 17       	cp	r18, r24
     616:	39 07       	cpc	r19, r25
     618:	4a 07       	cpc	r20, r26
     61a:	5b 07       	cpc	r21, r27
     61c:	10 f0       	brcs	.+4      	; 0x622 <linear_distance_mm+0xb0>
     61e:	81 e0       	ldi	r24, 0x01	; 1
     620:	8c 87       	std	Y+12, r24	; 0x0c
     622:	80 91 28 03 	lds	r24, 0x0328
     626:	90 91 29 03 	lds	r25, 0x0329
     62a:	9c 01       	movw	r18, r24
     62c:	40 e0       	ldi	r20, 0x00	; 0
     62e:	50 e0       	ldi	r21, 0x00	; 0
     630:	1b 86       	std	Y+11, r1	; 0x0b
     632:	89 81       	ldd	r24, Y+1	; 0x01
     634:	9a 81       	ldd	r25, Y+2	; 0x02
     636:	ab 81       	ldd	r26, Y+3	; 0x03
     638:	bc 81       	ldd	r27, Y+4	; 0x04
     63a:	28 17       	cp	r18, r24
     63c:	39 07       	cpc	r19, r25
     63e:	4a 07       	cpc	r20, r26
     640:	5b 07       	cpc	r21, r27
     642:	10 f0       	brcs	.+4      	; 0x648 <linear_distance_mm+0xd6>
     644:	91 e0       	ldi	r25, 0x01	; 1
     646:	9b 87       	std	Y+11, r25	; 0x0b
     648:	8c 85       	ldd	r24, Y+12	; 0x0c
     64a:	9b 85       	ldd	r25, Y+11	; 0x0b
     64c:	89 2b       	or	r24, r25
     64e:	88 23       	and	r24, r24
     650:	a9 f2       	breq	.-86     	; 0x5fc <linear_distance_mm+0x8a>
  {
  	break;
  }
 } 
 STOP(); //Stop action
     652:	0e 94 31 02 	call	0x462	; 0x462 <STOP>
}
     656:	2c 96       	adiw	r28, 0x0c	; 12
     658:	0f b6       	in	r0, 0x3f	; 63
     65a:	f8 94       	cli
     65c:	de bf       	out	0x3e, r29	; 62
     65e:	0f be       	out	0x3f, r0	; 63
     660:	cd bf       	out	0x3d, r28	; 61
     662:	cf 91       	pop	r28
     664:	df 91       	pop	r29
     666:	08 95       	ret

00000668 <forward_mm>:


void forward_mm(unsigned int DistanceInMM)
{
     668:	df 93       	push	r29
     66a:	cf 93       	push	r28
     66c:	0f 92       	push	r0
     66e:	0f 92       	push	r0
     670:	cd b7       	in	r28, 0x3d	; 61
     672:	de b7       	in	r29, 0x3e	; 62
     674:	9a 83       	std	Y+2, r25	; 0x02
     676:	89 83       	std	Y+1, r24	; 0x01
 MOVE_FWD();
     678:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <MOVE_FWD>
 linear_distance_mm(DistanceInMM);
     67c:	89 81       	ldd	r24, Y+1	; 0x01
     67e:	9a 81       	ldd	r25, Y+2	; 0x02
     680:	0e 94 b9 02 	call	0x572	; 0x572 <linear_distance_mm>
}
     684:	0f 90       	pop	r0
     686:	0f 90       	pop	r0
     688:	cf 91       	pop	r28
     68a:	df 91       	pop	r29
     68c:	08 95       	ret

0000068e <back_mm>:

void back_mm(unsigned int DistanceInMM)
{
     68e:	df 93       	push	r29
     690:	cf 93       	push	r28
     692:	0f 92       	push	r0
     694:	0f 92       	push	r0
     696:	cd b7       	in	r28, 0x3d	; 61
     698:	de b7       	in	r29, 0x3e	; 62
     69a:	9a 83       	std	Y+2, r25	; 0x02
     69c:	89 83       	std	Y+1, r24	; 0x01
 MOVE_REV();
     69e:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <MOVE_REV>
 linear_distance_mm(DistanceInMM);
     6a2:	89 81       	ldd	r24, Y+1	; 0x01
     6a4:	9a 81       	ldd	r25, Y+2	; 0x02
     6a6:	0e 94 b9 02 	call	0x572	; 0x572 <linear_distance_mm>
}
     6aa:	0f 90       	pop	r0
     6ac:	0f 90       	pop	r0
     6ae:	cf 91       	pop	r28
     6b0:	df 91       	pop	r29
     6b2:	08 95       	ret

000006b4 <RIGHT_TURN_BY>:



void RIGHT_TURN_BY(int Degree)
{
     6b4:	df 93       	push	r29
     6b6:	cf 93       	push	r28
     6b8:	0f 92       	push	r0
     6ba:	0f 92       	push	r0
     6bc:	cd b7       	in	r28, 0x3d	; 61
     6be:	de b7       	in	r29, 0x3e	; 62
     6c0:	9a 83       	std	Y+2, r25	; 0x02
     6c2:	89 83       	std	Y+1, r24	; 0x01
	MOVE_RIGHT();
     6c4:	0e 94 ff 01 	call	0x3fe	; 0x3fe <MOVE_RIGHT>
	angle_rotate(Degree);
     6c8:	89 81       	ldd	r24, Y+1	; 0x01
     6ca:	9a 81       	ldd	r25, Y+2	; 0x02
     6cc:	0e 94 3b 02 	call	0x476	; 0x476 <angle_rotate>
	STOP();
     6d0:	0e 94 31 02 	call	0x462	; 0x462 <STOP>
}
     6d4:	0f 90       	pop	r0
     6d6:	0f 90       	pop	r0
     6d8:	cf 91       	pop	r28
     6da:	df 91       	pop	r29
     6dc:	08 95       	ret

000006de <LEFT_TURN_BY>:

void LEFT_TURN_BY(int Degree)
{
     6de:	df 93       	push	r29
     6e0:	cf 93       	push	r28
     6e2:	0f 92       	push	r0
     6e4:	0f 92       	push	r0
     6e6:	cd b7       	in	r28, 0x3d	; 61
     6e8:	de b7       	in	r29, 0x3e	; 62
     6ea:	9a 83       	std	Y+2, r25	; 0x02
     6ec:	89 83       	std	Y+1, r24	; 0x01
	MOVE_LEFT();
     6ee:	0e 94 f5 01 	call	0x3ea	; 0x3ea <MOVE_LEFT>
	angle_rotate(Degree);
     6f2:	89 81       	ldd	r24, Y+1	; 0x01
     6f4:	9a 81       	ldd	r25, Y+2	; 0x02
     6f6:	0e 94 3b 02 	call	0x476	; 0x476 <angle_rotate>
	STOP();
     6fa:	0e 94 31 02 	call	0x462	; 0x462 <STOP>
}
     6fe:	0f 90       	pop	r0
     700:	0f 90       	pop	r0
     702:	cf 91       	pop	r28
     704:	df 91       	pop	r29
     706:	08 95       	ret

00000708 <timer5_init>:
// Timer 5 initialised in PWM mode for velocity control
// Prescale:64
// PWM 8bit fast, TOP=0x00FF
// Timer Frequency:674.988Hz
void timer5_init()
{
     708:	df 93       	push	r29
     70a:	cf 93       	push	r28
     70c:	cd b7       	in	r28, 0x3d	; 61
     70e:	de b7       	in	r29, 0x3e	; 62
	TCCR5B = 0x00;	//Stop
     710:	e1 e2       	ldi	r30, 0x21	; 33
     712:	f1 e0       	ldi	r31, 0x01	; 1
     714:	10 82       	st	Z, r1
	TCNT5H = 0xFF;	//Counter higher 8-bit value to which OCR5xH value is compared with
     716:	e5 e2       	ldi	r30, 0x25	; 37
     718:	f1 e0       	ldi	r31, 0x01	; 1
     71a:	8f ef       	ldi	r24, 0xFF	; 255
     71c:	80 83       	st	Z, r24
	TCNT5L = 0x01;	//Counter lower 8-bit value to which OCR5xH value is compared with
     71e:	e4 e2       	ldi	r30, 0x24	; 36
     720:	f1 e0       	ldi	r31, 0x01	; 1
     722:	81 e0       	ldi	r24, 0x01	; 1
     724:	80 83       	st	Z, r24
	OCR5AH = 0x00;	//Output compare register high value for Left Motor
     726:	e9 e2       	ldi	r30, 0x29	; 41
     728:	f1 e0       	ldi	r31, 0x01	; 1
     72a:	10 82       	st	Z, r1
	OCR5AL = 0xFF;	//Output compare register low value for Left Motor
     72c:	e8 e2       	ldi	r30, 0x28	; 40
     72e:	f1 e0       	ldi	r31, 0x01	; 1
     730:	8f ef       	ldi	r24, 0xFF	; 255
     732:	80 83       	st	Z, r24
	OCR5BH = 0x00;	//Output compare register high value for Right Motor
     734:	eb e2       	ldi	r30, 0x2B	; 43
     736:	f1 e0       	ldi	r31, 0x01	; 1
     738:	10 82       	st	Z, r1
	OCR5BL = 0xFF;	//Output compare register low value for Right Motor
     73a:	ea e2       	ldi	r30, 0x2A	; 42
     73c:	f1 e0       	ldi	r31, 0x01	; 1
     73e:	8f ef       	ldi	r24, 0xFF	; 255
     740:	80 83       	st	Z, r24
	OCR5CH = 0x00;	//Output compare register high value for Motor C1
     742:	ed e2       	ldi	r30, 0x2D	; 45
     744:	f1 e0       	ldi	r31, 0x01	; 1
     746:	10 82       	st	Z, r1
	OCR5CL = 0xFF;	//Output compare register low value for Motor C1
     748:	ec e2       	ldi	r30, 0x2C	; 44
     74a:	f1 e0       	ldi	r31, 0x01	; 1
     74c:	8f ef       	ldi	r24, 0xFF	; 255
     74e:	80 83       	st	Z, r24
	TCCR5A = 0xA9;	/*{COM5A1=1, COM5A0=0; COM5B1=1, COM5B0=0; COM5C1=1 COM5C0=0}
     750:	e0 e2       	ldi	r30, 0x20	; 32
     752:	f1 e0       	ldi	r31, 0x01	; 1
     754:	89 ea       	ldi	r24, 0xA9	; 169
     756:	80 83       	st	Z, r24
 					  For Overriding normal port functionalit to OCRnA outputs.
				  	  {WGM51=0, WGM50=1} Along With WGM52 in TCCR5B for Selecting FAST PWM 8-bit Mode*/
	
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
     758:	e1 e2       	ldi	r30, 0x21	; 33
     75a:	f1 e0       	ldi	r31, 0x01	; 1
     75c:	8b e0       	ldi	r24, 0x0B	; 11
     75e:	80 83       	st	Z, r24
}
     760:	cf 91       	pop	r28
     762:	df 91       	pop	r29
     764:	08 95       	ret

00000766 <velocity>:
// Function for robot velocity control
// Make sure that you pass only unsigned char value.


void velocity (unsigned char left_motor, unsigned char right_motor)
{
     766:	df 93       	push	r29
     768:	cf 93       	push	r28
     76a:	0f 92       	push	r0
     76c:	0f 92       	push	r0
     76e:	cd b7       	in	r28, 0x3d	; 61
     770:	de b7       	in	r29, 0x3e	; 62
     772:	89 83       	std	Y+1, r24	; 0x01
     774:	6a 83       	std	Y+2, r22	; 0x02
	OCR5AL = (unsigned char)left_motor;
     776:	e8 e2       	ldi	r30, 0x28	; 40
     778:	f1 e0       	ldi	r31, 0x01	; 1
     77a:	89 81       	ldd	r24, Y+1	; 0x01
     77c:	80 83       	st	Z, r24
	OCR5BL = (unsigned char)right_motor;
     77e:	ea e2       	ldi	r30, 0x2A	; 42
     780:	f1 e0       	ldi	r31, 0x01	; 1
     782:	8a 81       	ldd	r24, Y+2	; 0x02
     784:	80 83       	st	Z, r24
}
     786:	0f 90       	pop	r0
     788:	0f 90       	pop	r0
     78a:	cf 91       	pop	r28
     78c:	df 91       	pop	r29
     78e:	08 95       	ret

00000790 <MOTOR_LEFT_SPEED>:


void MOTOR_LEFT_SPEED(int val)
{
     790:	df 93       	push	r29
     792:	cf 93       	push	r28
     794:	0f 92       	push	r0
     796:	0f 92       	push	r0
     798:	cd b7       	in	r28, 0x3d	; 61
     79a:	de b7       	in	r29, 0x3e	; 62
     79c:	9a 83       	std	Y+2, r25	; 0x02
     79e:	89 83       	std	Y+1, r24	; 0x01
    if ( val > 254 )   //limiting the max velocity
     7a0:	89 81       	ldd	r24, Y+1	; 0x01
     7a2:	9a 81       	ldd	r25, Y+2	; 0x02
     7a4:	8f 3f       	cpi	r24, 0xFF	; 255
     7a6:	91 05       	cpc	r25, r1
     7a8:	24 f0       	brlt	.+8      	; 0x7b2 <MOTOR_LEFT_SPEED+0x22>
	   val = 255;	
     7aa:	8f ef       	ldi	r24, 0xFF	; 255
     7ac:	90 e0       	ldi	r25, 0x00	; 0
     7ae:	9a 83       	std	Y+2, r25	; 0x02
     7b0:	89 83       	std	Y+1, r24	; 0x01
    OCR5AL = (unsigned char) val;
     7b2:	e8 e2       	ldi	r30, 0x28	; 40
     7b4:	f1 e0       	ldi	r31, 0x01	; 1
     7b6:	89 81       	ldd	r24, Y+1	; 0x01
     7b8:	80 83       	st	Z, r24
}
     7ba:	0f 90       	pop	r0
     7bc:	0f 90       	pop	r0
     7be:	cf 91       	pop	r28
     7c0:	df 91       	pop	r29
     7c2:	08 95       	ret

000007c4 <MOTOR_RIGHT_SPEED>:

void MOTOR_RIGHT_SPEED(int val)
{
     7c4:	df 93       	push	r29
     7c6:	cf 93       	push	r28
     7c8:	0f 92       	push	r0
     7ca:	0f 92       	push	r0
     7cc:	cd b7       	in	r28, 0x3d	; 61
     7ce:	de b7       	in	r29, 0x3e	; 62
     7d0:	9a 83       	std	Y+2, r25	; 0x02
     7d2:	89 83       	std	Y+1, r24	; 0x01
  if ( val > 254 )     //limiting the max velocity
     7d4:	89 81       	ldd	r24, Y+1	; 0x01
     7d6:	9a 81       	ldd	r25, Y+2	; 0x02
     7d8:	8f 3f       	cpi	r24, 0xFF	; 255
     7da:	91 05       	cpc	r25, r1
     7dc:	24 f0       	brlt	.+8      	; 0x7e6 <MOTOR_RIGHT_SPEED+0x22>
	  val = 255;
     7de:	8f ef       	ldi	r24, 0xFF	; 255
     7e0:	90 e0       	ldi	r25, 0x00	; 0
     7e2:	9a 83       	std	Y+2, r25	; 0x02
     7e4:	89 83       	std	Y+1, r24	; 0x01
  OCR5BL = (unsigned char) val;
     7e6:	ea e2       	ldi	r30, 0x2A	; 42
     7e8:	f1 e0       	ldi	r31, 0x01	; 1
     7ea:	89 81       	ldd	r24, Y+1	; 0x01
     7ec:	80 83       	st	Z, r24
}
     7ee:	0f 90       	pop	r0
     7f0:	0f 90       	pop	r0
     7f2:	cf 91       	pop	r28
     7f4:	df 91       	pop	r29
     7f6:	08 95       	ret

000007f8 <adc_pin_config>:



//ADC pin configuration
void adc_pin_config (void)
{
     7f8:	df 93       	push	r29
     7fa:	cf 93       	push	r28
     7fc:	cd b7       	in	r28, 0x3d	; 61
     7fe:	de b7       	in	r29, 0x3e	; 62
 DDRF = 0x00; 
     800:	e0 e3       	ldi	r30, 0x30	; 48
     802:	f0 e0       	ldi	r31, 0x00	; 0
     804:	10 82       	st	Z, r1
 PORTF = 0x00;
     806:	e1 e3       	ldi	r30, 0x31	; 49
     808:	f0 e0       	ldi	r31, 0x00	; 0
     80a:	10 82       	st	Z, r1
 DDRK = 0x00;
     80c:	e7 e0       	ldi	r30, 0x07	; 7
     80e:	f1 e0       	ldi	r31, 0x01	; 1
     810:	10 82       	st	Z, r1
 PORTK = 0x00;
     812:	e8 e0       	ldi	r30, 0x08	; 8
     814:	f1 e0       	ldi	r31, 0x01	; 1
     816:	10 82       	st	Z, r1
}
     818:	cf 91       	pop	r28
     81a:	df 91       	pop	r29
     81c:	08 95       	ret

0000081e <port_init>:



//Function to Initialize PORTS
void port_init()
{
     81e:	df 93       	push	r29
     820:	cf 93       	push	r28
     822:	cd b7       	in	r28, 0x3d	; 61
     824:	de b7       	in	r29, 0x3e	; 62
	
	adc_pin_config();
     826:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <adc_pin_config>
		
}
     82a:	cf 91       	pop	r28
     82c:	df 91       	pop	r29
     82e:	08 95       	ret

00000830 <init_adc>:




void init_adc()
{
     830:	df 93       	push	r29
     832:	cf 93       	push	r28
     834:	cd b7       	in	r28, 0x3d	; 61
     836:	de b7       	in	r29, 0x3e	; 62
	ADCSRA = 0x00;
     838:	ea e7       	ldi	r30, 0x7A	; 122
     83a:	f0 e0       	ldi	r31, 0x00	; 0
     83c:	10 82       	st	Z, r1
	ADCSRB = 0x00;		//MUX5 = 0
     83e:	eb e7       	ldi	r30, 0x7B	; 123
     840:	f0 e0       	ldi	r31, 0x00	; 0
     842:	10 82       	st	Z, r1
	ADMUX = 0x20;		//Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
     844:	ec e7       	ldi	r30, 0x7C	; 124
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	80 e2       	ldi	r24, 0x20	; 32
     84a:	80 83       	st	Z, r24
	ACSR = 0x80;
     84c:	e0 e5       	ldi	r30, 0x50	; 80
     84e:	f0 e0       	ldi	r31, 0x00	; 0
     850:	80 e8       	ldi	r24, 0x80	; 128
     852:	80 83       	st	Z, r24
	ADCSRA = 0x86;		//ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0
     854:	ea e7       	ldi	r30, 0x7A	; 122
     856:	f0 e0       	ldi	r31, 0x00	; 0
     858:	86 e8       	ldi	r24, 0x86	; 134
     85a:	80 83       	st	Z, r24
}
     85c:	cf 91       	pop	r28
     85e:	df 91       	pop	r29
     860:	08 95       	ret

00000862 <ADC_Conversion>:

//Function For ADC Conversion
unsigned char ADC_Conversion(unsigned char Ch) 
{
     862:	df 93       	push	r29
     864:	cf 93       	push	r28
     866:	0f 92       	push	r0
     868:	0f 92       	push	r0
     86a:	cd b7       	in	r28, 0x3d	; 61
     86c:	de b7       	in	r29, 0x3e	; 62
     86e:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char a;
	if(Ch>7)
     870:	8a 81       	ldd	r24, Y+2	; 0x02
     872:	88 30       	cpi	r24, 0x08	; 8
     874:	20 f0       	brcs	.+8      	; 0x87e <ADC_Conversion+0x1c>
	{
		ADCSRB = 0x08;
     876:	eb e7       	ldi	r30, 0x7B	; 123
     878:	f0 e0       	ldi	r31, 0x00	; 0
     87a:	88 e0       	ldi	r24, 0x08	; 8
     87c:	80 83       	st	Z, r24
	}
	Ch = Ch & 0x07;  			
     87e:	8a 81       	ldd	r24, Y+2	; 0x02
     880:	87 70       	andi	r24, 0x07	; 7
     882:	8a 83       	std	Y+2, r24	; 0x02
	ADMUX= 0x20| Ch;	   		
     884:	ec e7       	ldi	r30, 0x7C	; 124
     886:	f0 e0       	ldi	r31, 0x00	; 0
     888:	8a 81       	ldd	r24, Y+2	; 0x02
     88a:	80 62       	ori	r24, 0x20	; 32
     88c:	80 83       	st	Z, r24
	ADCSRA = ADCSRA | 0x40;		//Set start conversion bit
     88e:	aa e7       	ldi	r26, 0x7A	; 122
     890:	b0 e0       	ldi	r27, 0x00	; 0
     892:	ea e7       	ldi	r30, 0x7A	; 122
     894:	f0 e0       	ldi	r31, 0x00	; 0
     896:	80 81       	ld	r24, Z
     898:	80 64       	ori	r24, 0x40	; 64
     89a:	8c 93       	st	X, r24
	while((ADCSRA&0x10)==0);	//Wait for conversion to complete
     89c:	ea e7       	ldi	r30, 0x7A	; 122
     89e:	f0 e0       	ldi	r31, 0x00	; 0
     8a0:	80 81       	ld	r24, Z
     8a2:	88 2f       	mov	r24, r24
     8a4:	90 e0       	ldi	r25, 0x00	; 0
     8a6:	80 71       	andi	r24, 0x10	; 16
     8a8:	90 70       	andi	r25, 0x00	; 0
     8aa:	00 97       	sbiw	r24, 0x00	; 0
     8ac:	b9 f3       	breq	.-18     	; 0x89c <ADC_Conversion+0x3a>
	a=ADCH;
     8ae:	e9 e7       	ldi	r30, 0x79	; 121
     8b0:	f0 e0       	ldi	r31, 0x00	; 0
     8b2:	80 81       	ld	r24, Z
     8b4:	89 83       	std	Y+1, r24	; 0x01
	ADCSRA = ADCSRA|0x10;
     8b6:	aa e7       	ldi	r26, 0x7A	; 122
     8b8:	b0 e0       	ldi	r27, 0x00	; 0
     8ba:	ea e7       	ldi	r30, 0x7A	; 122
     8bc:	f0 e0       	ldi	r31, 0x00	; 0
     8be:	80 81       	ld	r24, Z
     8c0:	80 61       	ori	r24, 0x10	; 16
     8c2:	8c 93       	st	X, r24
	ADCSRB = 0x00;
     8c4:	eb e7       	ldi	r30, 0x7B	; 123
     8c6:	f0 e0       	ldi	r31, 0x00	; 0
     8c8:	10 82       	st	Z, r1
	return a;
     8ca:	89 81       	ldd	r24, Y+1	; 0x01
}
     8cc:	0f 90       	pop	r0
     8ce:	0f 90       	pop	r0
     8d0:	cf 91       	pop	r28
     8d2:	df 91       	pop	r29
     8d4:	08 95       	ret

000008d6 <init_ir>:
 analog value of Sharp Sensor. 
 ***********************************************************************************/

/***** Function to Initialize PORTS *****/
void init_ir()
{
     8d6:	df 93       	push	r29
     8d8:	cf 93       	push	r28
     8da:	cd b7       	in	r28, 0x3d	; 61
     8dc:	de b7       	in	r29, 0x3e	; 62
	DDRF = 0x00; 
     8de:	e0 e3       	ldi	r30, 0x30	; 48
     8e0:	f0 e0       	ldi	r31, 0x00	; 0
     8e2:	10 82       	st	Z, r1
	PORTF = 0x00;
     8e4:	e1 e3       	ldi	r30, 0x31	; 49
     8e6:	f0 e0       	ldi	r31, 0x00	; 0
     8e8:	10 82       	st	Z, r1
	DDRA = 0x0F;
     8ea:	e1 e2       	ldi	r30, 0x21	; 33
     8ec:	f0 e0       	ldi	r31, 0x00	; 0
     8ee:	8f e0       	ldi	r24, 0x0F	; 15
     8f0:	80 83       	st	Z, r24
	PORTA = 0x00;
     8f2:	e2 e2       	ldi	r30, 0x22	; 34
     8f4:	f0 e0       	ldi	r31, 0x00	; 0
     8f6:	10 82       	st	Z, r1
	DDRL = 0x18;
     8f8:	ea e0       	ldi	r30, 0x0A	; 10
     8fa:	f1 e0       	ldi	r31, 0x01	; 1
     8fc:	88 e1       	ldi	r24, 0x18	; 24
     8fe:	80 83       	st	Z, r24
	PORTL = 0x18;
     900:	eb e0       	ldi	r30, 0x0B	; 11
     902:	f1 e0       	ldi	r31, 0x01	; 1
     904:	88 e1       	ldi	r24, 0x18	; 24
     906:	80 83       	st	Z, r24
	DDRC = 0xFF;
     908:	e7 e2       	ldi	r30, 0x27	; 39
     90a:	f0 e0       	ldi	r31, 0x00	; 0
     90c:	8f ef       	ldi	r24, 0xFF	; 255
     90e:	80 83       	st	Z, r24
	PORTC = 0x00;
     910:	e8 e2       	ldi	r30, 0x28	; 40
     912:	f0 e0       	ldi	r31, 0x00	; 0
     914:	10 82       	st	Z, r1
	DDRJ = 0x00;
     916:	e4 e0       	ldi	r30, 0x04	; 4
     918:	f1 e0       	ldi	r31, 0x01	; 1
     91a:	10 82       	st	Z, r1
	PORTJ = 0xFF;
     91c:	e5 e0       	ldi	r30, 0x05	; 5
     91e:	f1 e0       	ldi	r31, 0x01	; 1
     920:	8f ef       	ldi	r24, 0xFF	; 255
     922:	80 83       	st	Z, r24
}
     924:	cf 91       	pop	r28
     926:	df 91       	pop	r29
     928:	08 95       	ret

0000092a <Sharp_estimation>:


unsigned int Sharp_estimation(unsigned char adc_reading)
{
     92a:	df 93       	push	r29
     92c:	cf 93       	push	r28
     92e:	cd b7       	in	r28, 0x3d	; 61
     930:	de b7       	in	r29, 0x3e	; 62
     932:	27 97       	sbiw	r28, 0x07	; 7
     934:	0f b6       	in	r0, 0x3f	; 63
     936:	f8 94       	cli
     938:	de bf       	out	0x3e, r29	; 62
     93a:	0f be       	out	0x3f, r0	; 63
     93c:	cd bf       	out	0x3d, r28	; 61
     93e:	8f 83       	std	Y+7, r24	; 0x07
	float distance;
	unsigned int distanceInt;
	distance = (int)(10.00*(2799.6*(1.00/(pow(adc_reading,1.1546)))));
     940:	8f 81       	ldd	r24, Y+7	; 0x07
     942:	88 2f       	mov	r24, r24
     944:	90 e0       	ldi	r25, 0x00	; 0
     946:	a0 e0       	ldi	r26, 0x00	; 0
     948:	b0 e0       	ldi	r27, 0x00	; 0
     94a:	bc 01       	movw	r22, r24
     94c:	cd 01       	movw	r24, r26
     94e:	0e 94 40 29 	call	0x5280	; 0x5280 <__floatunsisf>
     952:	dc 01       	movw	r26, r24
     954:	cb 01       	movw	r24, r22
     956:	bc 01       	movw	r22, r24
     958:	cd 01       	movw	r24, r26
     95a:	2f ee       	ldi	r18, 0xEF	; 239
     95c:	39 ec       	ldi	r19, 0xC9	; 201
     95e:	43 e9       	ldi	r20, 0x93	; 147
     960:	5f e3       	ldi	r21, 0x3F	; 63
     962:	0e 94 15 2c 	call	0x582a	; 0x582a <pow>
     966:	dc 01       	movw	r26, r24
     968:	cb 01       	movw	r24, r22
     96a:	9c 01       	movw	r18, r24
     96c:	ad 01       	movw	r20, r26
     96e:	60 e0       	ldi	r22, 0x00	; 0
     970:	70 e0       	ldi	r23, 0x00	; 0
     972:	80 e8       	ldi	r24, 0x80	; 128
     974:	9f e3       	ldi	r25, 0x3F	; 63
     976:	0e 94 52 27 	call	0x4ea4	; 0x4ea4 <__divsf3>
     97a:	dc 01       	movw	r26, r24
     97c:	cb 01       	movw	r24, r22
     97e:	bc 01       	movw	r22, r24
     980:	cd 01       	movw	r24, r26
     982:	2a e9       	ldi	r18, 0x9A	; 154
     984:	39 ef       	ldi	r19, 0xF9	; 249
     986:	4e e2       	ldi	r20, 0x2E	; 46
     988:	55 e4       	ldi	r21, 0x45	; 69
     98a:	0e 94 58 26 	call	0x4cb0	; 0x4cb0 <__mulsf3>
     98e:	dc 01       	movw	r26, r24
     990:	cb 01       	movw	r24, r22
     992:	bc 01       	movw	r22, r24
     994:	cd 01       	movw	r24, r26
     996:	20 e0       	ldi	r18, 0x00	; 0
     998:	30 e0       	ldi	r19, 0x00	; 0
     99a:	40 e2       	ldi	r20, 0x20	; 32
     99c:	51 e4       	ldi	r21, 0x41	; 65
     99e:	0e 94 58 26 	call	0x4cb0	; 0x4cb0 <__mulsf3>
     9a2:	dc 01       	movw	r26, r24
     9a4:	cb 01       	movw	r24, r22
     9a6:	bc 01       	movw	r22, r24
     9a8:	cd 01       	movw	r24, r26
     9aa:	0e 94 ec 28 	call	0x51d8	; 0x51d8 <__fixsfsi>
     9ae:	dc 01       	movw	r26, r24
     9b0:	cb 01       	movw	r24, r22
     9b2:	aa 27       	eor	r26, r26
     9b4:	97 fd       	sbrc	r25, 7
     9b6:	a0 95       	com	r26
     9b8:	ba 2f       	mov	r27, r26
     9ba:	bc 01       	movw	r22, r24
     9bc:	cd 01       	movw	r24, r26
     9be:	0e 94 8e 28 	call	0x511c	; 0x511c <__floatsisf>
     9c2:	dc 01       	movw	r26, r24
     9c4:	cb 01       	movw	r24, r22
     9c6:	8b 83       	std	Y+3, r24	; 0x03
     9c8:	9c 83       	std	Y+4, r25	; 0x04
     9ca:	ad 83       	std	Y+5, r26	; 0x05
     9cc:	be 83       	std	Y+6, r27	; 0x06
	distanceInt = (int)distance;
     9ce:	6b 81       	ldd	r22, Y+3	; 0x03
     9d0:	7c 81       	ldd	r23, Y+4	; 0x04
     9d2:	8d 81       	ldd	r24, Y+5	; 0x05
     9d4:	9e 81       	ldd	r25, Y+6	; 0x06
     9d6:	0e 94 ec 28 	call	0x51d8	; 0x51d8 <__fixsfsi>
     9da:	dc 01       	movw	r26, r24
     9dc:	cb 01       	movw	r24, r22
     9de:	9a 83       	std	Y+2, r25	; 0x02
     9e0:	89 83       	std	Y+1, r24	; 0x01
	if(distanceInt>800)
     9e2:	89 81       	ldd	r24, Y+1	; 0x01
     9e4:	9a 81       	ldd	r25, Y+2	; 0x02
     9e6:	23 e0       	ldi	r18, 0x03	; 3
     9e8:	81 32       	cpi	r24, 0x21	; 33
     9ea:	92 07       	cpc	r25, r18
     9ec:	20 f0       	brcs	.+8      	; 0x9f6 <Sharp_estimation+0xcc>
	{
		distanceInt=800;
     9ee:	80 e2       	ldi	r24, 0x20	; 32
     9f0:	93 e0       	ldi	r25, 0x03	; 3
     9f2:	9a 83       	std	Y+2, r25	; 0x02
     9f4:	89 83       	std	Y+1, r24	; 0x01
	}
	return distanceInt;
     9f6:	89 81       	ldd	r24, Y+1	; 0x01
     9f8:	9a 81       	ldd	r25, Y+2	; 0x02
}
     9fa:	27 96       	adiw	r28, 0x07	; 7
     9fc:	0f b6       	in	r0, 0x3f	; 63
     9fe:	f8 94       	cli
     a00:	de bf       	out	0x3e, r29	; 62
     a02:	0f be       	out	0x3f, r0	; 63
     a04:	cd bf       	out	0x3d, r28	; 61
     a06:	cf 91       	pop	r28
     a08:	df 91       	pop	r29
     a0a:	08 95       	ret

00000a0c <front_dist_mm>:


int front_dist_mm(void) 
{
     a0c:	df 93       	push	r29
     a0e:	cf 93       	push	r28
     a10:	00 d0       	rcall	.+0      	; 0xa12 <front_dist_mm+0x6>
     a12:	cd b7       	in	r28, 0x3d	; 61
     a14:	de b7       	in	r29, 0x3e	; 62
  //float front_distance;
  int front_distance_mm;
  unsigned char analog_val;
  analog_val = ADC_Conversion(11);
     a16:	8b e0       	ldi	r24, 0x0B	; 11
     a18:	0e 94 31 04 	call	0x862	; 0x862 <ADC_Conversion>
     a1c:	89 83       	std	Y+1, r24	; 0x01
 

 front_distance_mm=Sharp_estimation(analog_val);
     a1e:	89 81       	ldd	r24, Y+1	; 0x01
     a20:	0e 94 95 04 	call	0x92a	; 0x92a <Sharp_estimation>
     a24:	9b 83       	std	Y+3, r25	; 0x03
     a26:	8a 83       	std	Y+2, r24	; 0x02
  return front_distance_mm; 	
     a28:	8a 81       	ldd	r24, Y+2	; 0x02
     a2a:	9b 81       	ldd	r25, Y+3	; 0x03

  //return 100;
}
     a2c:	0f 90       	pop	r0
     a2e:	0f 90       	pop	r0
     a30:	0f 90       	pop	r0
     a32:	cf 91       	pop	r28
     a34:	df 91       	pop	r29
     a36:	08 95       	ret

00000a38 <init_lcd>:

int i;


void init_lcd()
{
     a38:	df 93       	push	r29
     a3a:	cf 93       	push	r28
     a3c:	cd b7       	in	r28, 0x3d	; 61
     a3e:	de b7       	in	r29, 0x3e	; 62
	DDRF = 0x00; 
     a40:	e0 e3       	ldi	r30, 0x30	; 48
     a42:	f0 e0       	ldi	r31, 0x00	; 0
     a44:	10 82       	st	Z, r1
	PORTF = 0x00;
     a46:	e1 e3       	ldi	r30, 0x31	; 49
     a48:	f0 e0       	ldi	r31, 0x00	; 0
     a4a:	10 82       	st	Z, r1
	DDRA = 0x0F;
     a4c:	e1 e2       	ldi	r30, 0x21	; 33
     a4e:	f0 e0       	ldi	r31, 0x00	; 0
     a50:	8f e0       	ldi	r24, 0x0F	; 15
     a52:	80 83       	st	Z, r24
	PORTA = 0x00;
     a54:	e2 e2       	ldi	r30, 0x22	; 34
     a56:	f0 e0       	ldi	r31, 0x00	; 0
     a58:	10 82       	st	Z, r1
	DDRL = 0x18;
     a5a:	ea e0       	ldi	r30, 0x0A	; 10
     a5c:	f1 e0       	ldi	r31, 0x01	; 1
     a5e:	88 e1       	ldi	r24, 0x18	; 24
     a60:	80 83       	st	Z, r24
	PORTL = 0x18;
     a62:	eb e0       	ldi	r30, 0x0B	; 11
     a64:	f1 e0       	ldi	r31, 0x01	; 1
     a66:	88 e1       	ldi	r24, 0x18	; 24
     a68:	80 83       	st	Z, r24
	DDRC = 0xFF;
     a6a:	e7 e2       	ldi	r30, 0x27	; 39
     a6c:	f0 e0       	ldi	r31, 0x00	; 0
     a6e:	8f ef       	ldi	r24, 0xFF	; 255
     a70:	80 83       	st	Z, r24
	PORTC = 0x00;
     a72:	e8 e2       	ldi	r30, 0x28	; 40
     a74:	f0 e0       	ldi	r31, 0x00	; 0
     a76:	10 82       	st	Z, r1
	DDRJ = 0x00;
     a78:	e4 e0       	ldi	r30, 0x04	; 4
     a7a:	f1 e0       	ldi	r31, 0x01	; 1
     a7c:	10 82       	st	Z, r1
	PORTJ = 0xFF;
     a7e:	e5 e0       	ldi	r30, 0x05	; 5
     a80:	f1 e0       	ldi	r31, 0x01	; 1
     a82:	8f ef       	ldi	r24, 0xFF	; 255
     a84:	80 83       	st	Z, r24
}
     a86:	cf 91       	pop	r28
     a88:	df 91       	pop	r29
     a8a:	08 95       	ret

00000a8c <lcd_set_4bit>:



/*****Function to Reset LCD*****/
void lcd_set_4bit()
{
     a8c:	0f 93       	push	r16
     a8e:	1f 93       	push	r17
     a90:	df 93       	push	r29
     a92:	cf 93       	push	r28
     a94:	cd b7       	in	r28, 0x3d	; 61
     a96:	de b7       	in	r29, 0x3e	; 62
     a98:	c0 57       	subi	r28, 0x70	; 112
     a9a:	d0 40       	sbci	r29, 0x00	; 0
     a9c:	0f b6       	in	r0, 0x3f	; 63
     a9e:	f8 94       	cli
     aa0:	de bf       	out	0x3e, r29	; 62
     aa2:	0f be       	out	0x3f, r0	; 63
     aa4:	cd bf       	out	0x3d, r28	; 61
     aa6:	fe 01       	movw	r30, r28
     aa8:	e3 59       	subi	r30, 0x93	; 147
     aaa:	ff 4f       	sbci	r31, 0xFF	; 255
     aac:	80 e0       	ldi	r24, 0x00	; 0
     aae:	90 e0       	ldi	r25, 0x00	; 0
     ab0:	a0 e8       	ldi	r26, 0x80	; 128
     ab2:	bf e3       	ldi	r27, 0x3F	; 63
     ab4:	80 83       	st	Z, r24
     ab6:	91 83       	std	Z+1, r25	; 0x01
     ab8:	a2 83       	std	Z+2, r26	; 0x02
     aba:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     abc:	8e 01       	movw	r16, r28
     abe:	07 59       	subi	r16, 0x97	; 151
     ac0:	1f 4f       	sbci	r17, 0xFF	; 255
     ac2:	fe 01       	movw	r30, r28
     ac4:	e3 59       	subi	r30, 0x93	; 147
     ac6:	ff 4f       	sbci	r31, 0xFF	; 255
     ac8:	60 81       	ld	r22, Z
     aca:	71 81       	ldd	r23, Z+1	; 0x01
     acc:	82 81       	ldd	r24, Z+2	; 0x02
     ace:	93 81       	ldd	r25, Z+3	; 0x03
     ad0:	2d ec       	ldi	r18, 0xCD	; 205
     ad2:	3c ec       	ldi	r19, 0xCC	; 204
     ad4:	4c e2       	ldi	r20, 0x2C	; 44
     ad6:	55 e4       	ldi	r21, 0x45	; 69
     ad8:	0e 94 58 26 	call	0x4cb0	; 0x4cb0 <__mulsf3>
     adc:	dc 01       	movw	r26, r24
     ade:	cb 01       	movw	r24, r22
     ae0:	f8 01       	movw	r30, r16
     ae2:	80 83       	st	Z, r24
     ae4:	91 83       	std	Z+1, r25	; 0x01
     ae6:	a2 83       	std	Z+2, r26	; 0x02
     ae8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     aea:	fe 01       	movw	r30, r28
     aec:	e7 59       	subi	r30, 0x97	; 151
     aee:	ff 4f       	sbci	r31, 0xFF	; 255
     af0:	60 81       	ld	r22, Z
     af2:	71 81       	ldd	r23, Z+1	; 0x01
     af4:	82 81       	ldd	r24, Z+2	; 0x02
     af6:	93 81       	ldd	r25, Z+3	; 0x03
     af8:	20 e0       	ldi	r18, 0x00	; 0
     afa:	30 e0       	ldi	r19, 0x00	; 0
     afc:	40 e8       	ldi	r20, 0x80	; 128
     afe:	5f e3       	ldi	r21, 0x3F	; 63
     b00:	0e 94 5e 28 	call	0x50bc	; 0x50bc <__ltsf2>
     b04:	88 23       	and	r24, r24
     b06:	44 f4       	brge	.+16     	; 0xb18 <lcd_set_4bit+0x8c>
		__ticks = 1;
     b08:	fe 01       	movw	r30, r28
     b0a:	e9 59       	subi	r30, 0x99	; 153
     b0c:	ff 4f       	sbci	r31, 0xFF	; 255
     b0e:	81 e0       	ldi	r24, 0x01	; 1
     b10:	90 e0       	ldi	r25, 0x00	; 0
     b12:	91 83       	std	Z+1, r25	; 0x01
     b14:	80 83       	st	Z, r24
     b16:	64 c0       	rjmp	.+200    	; 0xbe0 <lcd_set_4bit+0x154>
	else if (__tmp > 65535)
     b18:	fe 01       	movw	r30, r28
     b1a:	e7 59       	subi	r30, 0x97	; 151
     b1c:	ff 4f       	sbci	r31, 0xFF	; 255
     b1e:	60 81       	ld	r22, Z
     b20:	71 81       	ldd	r23, Z+1	; 0x01
     b22:	82 81       	ldd	r24, Z+2	; 0x02
     b24:	93 81       	ldd	r25, Z+3	; 0x03
     b26:	20 e0       	ldi	r18, 0x00	; 0
     b28:	3f ef       	ldi	r19, 0xFF	; 255
     b2a:	4f e7       	ldi	r20, 0x7F	; 127
     b2c:	57 e4       	ldi	r21, 0x47	; 71
     b2e:	0e 94 fe 27 	call	0x4ffc	; 0x4ffc <__gtsf2>
     b32:	18 16       	cp	r1, r24
     b34:	0c f0       	brlt	.+2      	; 0xb38 <lcd_set_4bit+0xac>
     b36:	43 c0       	rjmp	.+134    	; 0xbbe <lcd_set_4bit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     b38:	fe 01       	movw	r30, r28
     b3a:	e3 59       	subi	r30, 0x93	; 147
     b3c:	ff 4f       	sbci	r31, 0xFF	; 255
     b3e:	60 81       	ld	r22, Z
     b40:	71 81       	ldd	r23, Z+1	; 0x01
     b42:	82 81       	ldd	r24, Z+2	; 0x02
     b44:	93 81       	ldd	r25, Z+3	; 0x03
     b46:	20 e0       	ldi	r18, 0x00	; 0
     b48:	30 e0       	ldi	r19, 0x00	; 0
     b4a:	40 e2       	ldi	r20, 0x20	; 32
     b4c:	51 e4       	ldi	r21, 0x41	; 65
     b4e:	0e 94 58 26 	call	0x4cb0	; 0x4cb0 <__mulsf3>
     b52:	dc 01       	movw	r26, r24
     b54:	cb 01       	movw	r24, r22
     b56:	8e 01       	movw	r16, r28
     b58:	09 59       	subi	r16, 0x99	; 153
     b5a:	1f 4f       	sbci	r17, 0xFF	; 255
     b5c:	bc 01       	movw	r22, r24
     b5e:	cd 01       	movw	r24, r26
     b60:	0e 94 82 24 	call	0x4904	; 0x4904 <__fixunssfsi>
     b64:	dc 01       	movw	r26, r24
     b66:	cb 01       	movw	r24, r22
     b68:	f8 01       	movw	r30, r16
     b6a:	91 83       	std	Z+1, r25	; 0x01
     b6c:	80 83       	st	Z, r24
     b6e:	1f c0       	rjmp	.+62     	; 0xbae <lcd_set_4bit+0x122>
     b70:	fe 01       	movw	r30, r28
     b72:	eb 59       	subi	r30, 0x9B	; 155
     b74:	ff 4f       	sbci	r31, 0xFF	; 255
     b76:	84 e1       	ldi	r24, 0x14	; 20
     b78:	91 e0       	ldi	r25, 0x01	; 1
     b7a:	91 83       	std	Z+1, r25	; 0x01
     b7c:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     b7e:	fe 01       	movw	r30, r28
     b80:	eb 59       	subi	r30, 0x9B	; 155
     b82:	ff 4f       	sbci	r31, 0xFF	; 255
     b84:	80 81       	ld	r24, Z
     b86:	91 81       	ldd	r25, Z+1	; 0x01
     b88:	01 97       	sbiw	r24, 0x01	; 1
     b8a:	f1 f7       	brne	.-4      	; 0xb88 <lcd_set_4bit+0xfc>
     b8c:	fe 01       	movw	r30, r28
     b8e:	eb 59       	subi	r30, 0x9B	; 155
     b90:	ff 4f       	sbci	r31, 0xFF	; 255
     b92:	91 83       	std	Z+1, r25	; 0x01
     b94:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b96:	de 01       	movw	r26, r28
     b98:	a9 59       	subi	r26, 0x99	; 153
     b9a:	bf 4f       	sbci	r27, 0xFF	; 255
     b9c:	fe 01       	movw	r30, r28
     b9e:	e9 59       	subi	r30, 0x99	; 153
     ba0:	ff 4f       	sbci	r31, 0xFF	; 255
     ba2:	80 81       	ld	r24, Z
     ba4:	91 81       	ldd	r25, Z+1	; 0x01
     ba6:	01 97       	sbiw	r24, 0x01	; 1
     ba8:	11 96       	adiw	r26, 0x01	; 1
     baa:	9c 93       	st	X, r25
     bac:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     bae:	fe 01       	movw	r30, r28
     bb0:	e9 59       	subi	r30, 0x99	; 153
     bb2:	ff 4f       	sbci	r31, 0xFF	; 255
     bb4:	80 81       	ld	r24, Z
     bb6:	91 81       	ldd	r25, Z+1	; 0x01
     bb8:	00 97       	sbiw	r24, 0x00	; 0
     bba:	d1 f6       	brne	.-76     	; 0xb70 <lcd_set_4bit+0xe4>
     bbc:	27 c0       	rjmp	.+78     	; 0xc0c <lcd_set_4bit+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     bbe:	8e 01       	movw	r16, r28
     bc0:	09 59       	subi	r16, 0x99	; 153
     bc2:	1f 4f       	sbci	r17, 0xFF	; 255
     bc4:	fe 01       	movw	r30, r28
     bc6:	e7 59       	subi	r30, 0x97	; 151
     bc8:	ff 4f       	sbci	r31, 0xFF	; 255
     bca:	60 81       	ld	r22, Z
     bcc:	71 81       	ldd	r23, Z+1	; 0x01
     bce:	82 81       	ldd	r24, Z+2	; 0x02
     bd0:	93 81       	ldd	r25, Z+3	; 0x03
     bd2:	0e 94 82 24 	call	0x4904	; 0x4904 <__fixunssfsi>
     bd6:	dc 01       	movw	r26, r24
     bd8:	cb 01       	movw	r24, r22
     bda:	f8 01       	movw	r30, r16
     bdc:	91 83       	std	Z+1, r25	; 0x01
     bde:	80 83       	st	Z, r24
     be0:	de 01       	movw	r26, r28
     be2:	ad 59       	subi	r26, 0x9D	; 157
     be4:	bf 4f       	sbci	r27, 0xFF	; 255
     be6:	fe 01       	movw	r30, r28
     be8:	e9 59       	subi	r30, 0x99	; 153
     bea:	ff 4f       	sbci	r31, 0xFF	; 255
     bec:	80 81       	ld	r24, Z
     bee:	91 81       	ldd	r25, Z+1	; 0x01
     bf0:	8d 93       	st	X+, r24
     bf2:	9c 93       	st	X, r25
     bf4:	fe 01       	movw	r30, r28
     bf6:	ed 59       	subi	r30, 0x9D	; 157
     bf8:	ff 4f       	sbci	r31, 0xFF	; 255
     bfa:	80 81       	ld	r24, Z
     bfc:	91 81       	ldd	r25, Z+1	; 0x01
     bfe:	01 97       	sbiw	r24, 0x01	; 1
     c00:	f1 f7       	brne	.-4      	; 0xbfe <lcd_set_4bit+0x172>
     c02:	fe 01       	movw	r30, r28
     c04:	ed 59       	subi	r30, 0x9D	; 157
     c06:	ff 4f       	sbci	r31, 0xFF	; 255
     c08:	91 83       	std	Z+1, r25	; 0x01
     c0a:	80 83       	st	Z, r24
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     c0c:	a8 e2       	ldi	r26, 0x28	; 40
     c0e:	b0 e0       	ldi	r27, 0x00	; 0
     c10:	e8 e2       	ldi	r30, 0x28	; 40
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	80 81       	ld	r24, Z
     c16:	8e 7f       	andi	r24, 0xFE	; 254
     c18:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     c1a:	a8 e2       	ldi	r26, 0x28	; 40
     c1c:	b0 e0       	ldi	r27, 0x00	; 0
     c1e:	e8 e2       	ldi	r30, 0x28	; 40
     c20:	f0 e0       	ldi	r31, 0x00	; 0
     c22:	80 81       	ld	r24, Z
     c24:	8d 7f       	andi	r24, 0xFD	; 253
     c26:	8c 93       	st	X, r24
	lcd_port = 0x30;				//Sending 3
     c28:	e8 e2       	ldi	r30, 0x28	; 40
     c2a:	f0 e0       	ldi	r31, 0x00	; 0
     c2c:	80 e3       	ldi	r24, 0x30	; 48
     c2e:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     c30:	a8 e2       	ldi	r26, 0x28	; 40
     c32:	b0 e0       	ldi	r27, 0x00	; 0
     c34:	e8 e2       	ldi	r30, 0x28	; 40
     c36:	f0 e0       	ldi	r31, 0x00	; 0
     c38:	80 81       	ld	r24, Z
     c3a:	84 60       	ori	r24, 0x04	; 4
     c3c:	8c 93       	st	X, r24
     c3e:	fe 01       	movw	r30, r28
     c40:	e1 5a       	subi	r30, 0xA1	; 161
     c42:	ff 4f       	sbci	r31, 0xFF	; 255
     c44:	80 e0       	ldi	r24, 0x00	; 0
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	a0 ea       	ldi	r26, 0xA0	; 160
     c4a:	b0 e4       	ldi	r27, 0x40	; 64
     c4c:	80 83       	st	Z, r24
     c4e:	91 83       	std	Z+1, r25	; 0x01
     c50:	a2 83       	std	Z+2, r26	; 0x02
     c52:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c54:	8e 01       	movw	r16, r28
     c56:	05 5a       	subi	r16, 0xA5	; 165
     c58:	1f 4f       	sbci	r17, 0xFF	; 255
     c5a:	fe 01       	movw	r30, r28
     c5c:	e1 5a       	subi	r30, 0xA1	; 161
     c5e:	ff 4f       	sbci	r31, 0xFF	; 255
     c60:	60 81       	ld	r22, Z
     c62:	71 81       	ldd	r23, Z+1	; 0x01
     c64:	82 81       	ldd	r24, Z+2	; 0x02
     c66:	93 81       	ldd	r25, Z+3	; 0x03
     c68:	2d ec       	ldi	r18, 0xCD	; 205
     c6a:	3c ec       	ldi	r19, 0xCC	; 204
     c6c:	4c e2       	ldi	r20, 0x2C	; 44
     c6e:	55 e4       	ldi	r21, 0x45	; 69
     c70:	0e 94 58 26 	call	0x4cb0	; 0x4cb0 <__mulsf3>
     c74:	dc 01       	movw	r26, r24
     c76:	cb 01       	movw	r24, r22
     c78:	f8 01       	movw	r30, r16
     c7a:	80 83       	st	Z, r24
     c7c:	91 83       	std	Z+1, r25	; 0x01
     c7e:	a2 83       	std	Z+2, r26	; 0x02
     c80:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     c82:	fe 01       	movw	r30, r28
     c84:	e5 5a       	subi	r30, 0xA5	; 165
     c86:	ff 4f       	sbci	r31, 0xFF	; 255
     c88:	60 81       	ld	r22, Z
     c8a:	71 81       	ldd	r23, Z+1	; 0x01
     c8c:	82 81       	ldd	r24, Z+2	; 0x02
     c8e:	93 81       	ldd	r25, Z+3	; 0x03
     c90:	20 e0       	ldi	r18, 0x00	; 0
     c92:	30 e0       	ldi	r19, 0x00	; 0
     c94:	40 e8       	ldi	r20, 0x80	; 128
     c96:	5f e3       	ldi	r21, 0x3F	; 63
     c98:	0e 94 5e 28 	call	0x50bc	; 0x50bc <__ltsf2>
     c9c:	88 23       	and	r24, r24
     c9e:	44 f4       	brge	.+16     	; 0xcb0 <lcd_set_4bit+0x224>
		__ticks = 1;
     ca0:	fe 01       	movw	r30, r28
     ca2:	e7 5a       	subi	r30, 0xA7	; 167
     ca4:	ff 4f       	sbci	r31, 0xFF	; 255
     ca6:	81 e0       	ldi	r24, 0x01	; 1
     ca8:	90 e0       	ldi	r25, 0x00	; 0
     caa:	91 83       	std	Z+1, r25	; 0x01
     cac:	80 83       	st	Z, r24
     cae:	64 c0       	rjmp	.+200    	; 0xd78 <lcd_set_4bit+0x2ec>
	else if (__tmp > 65535)
     cb0:	fe 01       	movw	r30, r28
     cb2:	e5 5a       	subi	r30, 0xA5	; 165
     cb4:	ff 4f       	sbci	r31, 0xFF	; 255
     cb6:	60 81       	ld	r22, Z
     cb8:	71 81       	ldd	r23, Z+1	; 0x01
     cba:	82 81       	ldd	r24, Z+2	; 0x02
     cbc:	93 81       	ldd	r25, Z+3	; 0x03
     cbe:	20 e0       	ldi	r18, 0x00	; 0
     cc0:	3f ef       	ldi	r19, 0xFF	; 255
     cc2:	4f e7       	ldi	r20, 0x7F	; 127
     cc4:	57 e4       	ldi	r21, 0x47	; 71
     cc6:	0e 94 fe 27 	call	0x4ffc	; 0x4ffc <__gtsf2>
     cca:	18 16       	cp	r1, r24
     ccc:	0c f0       	brlt	.+2      	; 0xcd0 <lcd_set_4bit+0x244>
     cce:	43 c0       	rjmp	.+134    	; 0xd56 <lcd_set_4bit+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     cd0:	fe 01       	movw	r30, r28
     cd2:	e1 5a       	subi	r30, 0xA1	; 161
     cd4:	ff 4f       	sbci	r31, 0xFF	; 255
     cd6:	60 81       	ld	r22, Z
     cd8:	71 81       	ldd	r23, Z+1	; 0x01
     cda:	82 81       	ldd	r24, Z+2	; 0x02
     cdc:	93 81       	ldd	r25, Z+3	; 0x03
     cde:	20 e0       	ldi	r18, 0x00	; 0
     ce0:	30 e0       	ldi	r19, 0x00	; 0
     ce2:	40 e2       	ldi	r20, 0x20	; 32
     ce4:	51 e4       	ldi	r21, 0x41	; 65
     ce6:	0e 94 58 26 	call	0x4cb0	; 0x4cb0 <__mulsf3>
     cea:	dc 01       	movw	r26, r24
     cec:	cb 01       	movw	r24, r22
     cee:	8e 01       	movw	r16, r28
     cf0:	07 5a       	subi	r16, 0xA7	; 167
     cf2:	1f 4f       	sbci	r17, 0xFF	; 255
     cf4:	bc 01       	movw	r22, r24
     cf6:	cd 01       	movw	r24, r26
     cf8:	0e 94 82 24 	call	0x4904	; 0x4904 <__fixunssfsi>
     cfc:	dc 01       	movw	r26, r24
     cfe:	cb 01       	movw	r24, r22
     d00:	f8 01       	movw	r30, r16
     d02:	91 83       	std	Z+1, r25	; 0x01
     d04:	80 83       	st	Z, r24
     d06:	1f c0       	rjmp	.+62     	; 0xd46 <lcd_set_4bit+0x2ba>
     d08:	fe 01       	movw	r30, r28
     d0a:	e9 5a       	subi	r30, 0xA9	; 169
     d0c:	ff 4f       	sbci	r31, 0xFF	; 255
     d0e:	84 e1       	ldi	r24, 0x14	; 20
     d10:	91 e0       	ldi	r25, 0x01	; 1
     d12:	91 83       	std	Z+1, r25	; 0x01
     d14:	80 83       	st	Z, r24
     d16:	fe 01       	movw	r30, r28
     d18:	e9 5a       	subi	r30, 0xA9	; 169
     d1a:	ff 4f       	sbci	r31, 0xFF	; 255
     d1c:	80 81       	ld	r24, Z
     d1e:	91 81       	ldd	r25, Z+1	; 0x01
     d20:	01 97       	sbiw	r24, 0x01	; 1
     d22:	f1 f7       	brne	.-4      	; 0xd20 <lcd_set_4bit+0x294>
     d24:	fe 01       	movw	r30, r28
     d26:	e9 5a       	subi	r30, 0xA9	; 169
     d28:	ff 4f       	sbci	r31, 0xFF	; 255
     d2a:	91 83       	std	Z+1, r25	; 0x01
     d2c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d2e:	de 01       	movw	r26, r28
     d30:	a7 5a       	subi	r26, 0xA7	; 167
     d32:	bf 4f       	sbci	r27, 0xFF	; 255
     d34:	fe 01       	movw	r30, r28
     d36:	e7 5a       	subi	r30, 0xA7	; 167
     d38:	ff 4f       	sbci	r31, 0xFF	; 255
     d3a:	80 81       	ld	r24, Z
     d3c:	91 81       	ldd	r25, Z+1	; 0x01
     d3e:	01 97       	sbiw	r24, 0x01	; 1
     d40:	11 96       	adiw	r26, 0x01	; 1
     d42:	9c 93       	st	X, r25
     d44:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d46:	fe 01       	movw	r30, r28
     d48:	e7 5a       	subi	r30, 0xA7	; 167
     d4a:	ff 4f       	sbci	r31, 0xFF	; 255
     d4c:	80 81       	ld	r24, Z
     d4e:	91 81       	ldd	r25, Z+1	; 0x01
     d50:	00 97       	sbiw	r24, 0x00	; 0
     d52:	d1 f6       	brne	.-76     	; 0xd08 <lcd_set_4bit+0x27c>
     d54:	27 c0       	rjmp	.+78     	; 0xda4 <lcd_set_4bit+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d56:	8e 01       	movw	r16, r28
     d58:	07 5a       	subi	r16, 0xA7	; 167
     d5a:	1f 4f       	sbci	r17, 0xFF	; 255
     d5c:	fe 01       	movw	r30, r28
     d5e:	e5 5a       	subi	r30, 0xA5	; 165
     d60:	ff 4f       	sbci	r31, 0xFF	; 255
     d62:	60 81       	ld	r22, Z
     d64:	71 81       	ldd	r23, Z+1	; 0x01
     d66:	82 81       	ldd	r24, Z+2	; 0x02
     d68:	93 81       	ldd	r25, Z+3	; 0x03
     d6a:	0e 94 82 24 	call	0x4904	; 0x4904 <__fixunssfsi>
     d6e:	dc 01       	movw	r26, r24
     d70:	cb 01       	movw	r24, r22
     d72:	f8 01       	movw	r30, r16
     d74:	91 83       	std	Z+1, r25	; 0x01
     d76:	80 83       	st	Z, r24
     d78:	de 01       	movw	r26, r28
     d7a:	ab 5a       	subi	r26, 0xAB	; 171
     d7c:	bf 4f       	sbci	r27, 0xFF	; 255
     d7e:	fe 01       	movw	r30, r28
     d80:	e7 5a       	subi	r30, 0xA7	; 167
     d82:	ff 4f       	sbci	r31, 0xFF	; 255
     d84:	80 81       	ld	r24, Z
     d86:	91 81       	ldd	r25, Z+1	; 0x01
     d88:	8d 93       	st	X+, r24
     d8a:	9c 93       	st	X, r25
     d8c:	fe 01       	movw	r30, r28
     d8e:	eb 5a       	subi	r30, 0xAB	; 171
     d90:	ff 4f       	sbci	r31, 0xFF	; 255
     d92:	80 81       	ld	r24, Z
     d94:	91 81       	ldd	r25, Z+1	; 0x01
     d96:	01 97       	sbiw	r24, 0x01	; 1
     d98:	f1 f7       	brne	.-4      	; 0xd96 <lcd_set_4bit+0x30a>
     d9a:	fe 01       	movw	r30, r28
     d9c:	eb 5a       	subi	r30, 0xAB	; 171
     d9e:	ff 4f       	sbci	r31, 0xFF	; 255
     da0:	91 83       	std	Z+1, r25	; 0x01
     da2:	80 83       	st	Z, r24
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     da4:	a8 e2       	ldi	r26, 0x28	; 40
     da6:	b0 e0       	ldi	r27, 0x00	; 0
     da8:	e8 e2       	ldi	r30, 0x28	; 40
     daa:	f0 e0       	ldi	r31, 0x00	; 0
     dac:	80 81       	ld	r24, Z
     dae:	8b 7f       	andi	r24, 0xFB	; 251
     db0:	8c 93       	st	X, r24
     db2:	fe 01       	movw	r30, r28
     db4:	ef 5a       	subi	r30, 0xAF	; 175
     db6:	ff 4f       	sbci	r31, 0xFF	; 255
     db8:	80 e0       	ldi	r24, 0x00	; 0
     dba:	90 e0       	ldi	r25, 0x00	; 0
     dbc:	a0 e8       	ldi	r26, 0x80	; 128
     dbe:	bf e3       	ldi	r27, 0x3F	; 63
     dc0:	80 83       	st	Z, r24
     dc2:	91 83       	std	Z+1, r25	; 0x01
     dc4:	a2 83       	std	Z+2, r26	; 0x02
     dc6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     dc8:	8e 01       	movw	r16, r28
     dca:	03 5b       	subi	r16, 0xB3	; 179
     dcc:	1f 4f       	sbci	r17, 0xFF	; 255
     dce:	fe 01       	movw	r30, r28
     dd0:	ef 5a       	subi	r30, 0xAF	; 175
     dd2:	ff 4f       	sbci	r31, 0xFF	; 255
     dd4:	60 81       	ld	r22, Z
     dd6:	71 81       	ldd	r23, Z+1	; 0x01
     dd8:	82 81       	ldd	r24, Z+2	; 0x02
     dda:	93 81       	ldd	r25, Z+3	; 0x03
     ddc:	2d ec       	ldi	r18, 0xCD	; 205
     dde:	3c ec       	ldi	r19, 0xCC	; 204
     de0:	4c e2       	ldi	r20, 0x2C	; 44
     de2:	55 e4       	ldi	r21, 0x45	; 69
     de4:	0e 94 58 26 	call	0x4cb0	; 0x4cb0 <__mulsf3>
     de8:	dc 01       	movw	r26, r24
     dea:	cb 01       	movw	r24, r22
     dec:	f8 01       	movw	r30, r16
     dee:	80 83       	st	Z, r24
     df0:	91 83       	std	Z+1, r25	; 0x01
     df2:	a2 83       	std	Z+2, r26	; 0x02
     df4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     df6:	fe 01       	movw	r30, r28
     df8:	e3 5b       	subi	r30, 0xB3	; 179
     dfa:	ff 4f       	sbci	r31, 0xFF	; 255
     dfc:	60 81       	ld	r22, Z
     dfe:	71 81       	ldd	r23, Z+1	; 0x01
     e00:	82 81       	ldd	r24, Z+2	; 0x02
     e02:	93 81       	ldd	r25, Z+3	; 0x03
     e04:	20 e0       	ldi	r18, 0x00	; 0
     e06:	30 e0       	ldi	r19, 0x00	; 0
     e08:	40 e8       	ldi	r20, 0x80	; 128
     e0a:	5f e3       	ldi	r21, 0x3F	; 63
     e0c:	0e 94 5e 28 	call	0x50bc	; 0x50bc <__ltsf2>
     e10:	88 23       	and	r24, r24
     e12:	44 f4       	brge	.+16     	; 0xe24 <lcd_set_4bit+0x398>
		__ticks = 1;
     e14:	fe 01       	movw	r30, r28
     e16:	e5 5b       	subi	r30, 0xB5	; 181
     e18:	ff 4f       	sbci	r31, 0xFF	; 255
     e1a:	81 e0       	ldi	r24, 0x01	; 1
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	91 83       	std	Z+1, r25	; 0x01
     e20:	80 83       	st	Z, r24
     e22:	64 c0       	rjmp	.+200    	; 0xeec <lcd_set_4bit+0x460>
	else if (__tmp > 65535)
     e24:	fe 01       	movw	r30, r28
     e26:	e3 5b       	subi	r30, 0xB3	; 179
     e28:	ff 4f       	sbci	r31, 0xFF	; 255
     e2a:	60 81       	ld	r22, Z
     e2c:	71 81       	ldd	r23, Z+1	; 0x01
     e2e:	82 81       	ldd	r24, Z+2	; 0x02
     e30:	93 81       	ldd	r25, Z+3	; 0x03
     e32:	20 e0       	ldi	r18, 0x00	; 0
     e34:	3f ef       	ldi	r19, 0xFF	; 255
     e36:	4f e7       	ldi	r20, 0x7F	; 127
     e38:	57 e4       	ldi	r21, 0x47	; 71
     e3a:	0e 94 fe 27 	call	0x4ffc	; 0x4ffc <__gtsf2>
     e3e:	18 16       	cp	r1, r24
     e40:	0c f0       	brlt	.+2      	; 0xe44 <lcd_set_4bit+0x3b8>
     e42:	43 c0       	rjmp	.+134    	; 0xeca <lcd_set_4bit+0x43e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e44:	fe 01       	movw	r30, r28
     e46:	ef 5a       	subi	r30, 0xAF	; 175
     e48:	ff 4f       	sbci	r31, 0xFF	; 255
     e4a:	60 81       	ld	r22, Z
     e4c:	71 81       	ldd	r23, Z+1	; 0x01
     e4e:	82 81       	ldd	r24, Z+2	; 0x02
     e50:	93 81       	ldd	r25, Z+3	; 0x03
     e52:	20 e0       	ldi	r18, 0x00	; 0
     e54:	30 e0       	ldi	r19, 0x00	; 0
     e56:	40 e2       	ldi	r20, 0x20	; 32
     e58:	51 e4       	ldi	r21, 0x41	; 65
     e5a:	0e 94 58 26 	call	0x4cb0	; 0x4cb0 <__mulsf3>
     e5e:	dc 01       	movw	r26, r24
     e60:	cb 01       	movw	r24, r22
     e62:	8e 01       	movw	r16, r28
     e64:	05 5b       	subi	r16, 0xB5	; 181
     e66:	1f 4f       	sbci	r17, 0xFF	; 255
     e68:	bc 01       	movw	r22, r24
     e6a:	cd 01       	movw	r24, r26
     e6c:	0e 94 82 24 	call	0x4904	; 0x4904 <__fixunssfsi>
     e70:	dc 01       	movw	r26, r24
     e72:	cb 01       	movw	r24, r22
     e74:	f8 01       	movw	r30, r16
     e76:	91 83       	std	Z+1, r25	; 0x01
     e78:	80 83       	st	Z, r24
     e7a:	1f c0       	rjmp	.+62     	; 0xeba <lcd_set_4bit+0x42e>
     e7c:	fe 01       	movw	r30, r28
     e7e:	e7 5b       	subi	r30, 0xB7	; 183
     e80:	ff 4f       	sbci	r31, 0xFF	; 255
     e82:	84 e1       	ldi	r24, 0x14	; 20
     e84:	91 e0       	ldi	r25, 0x01	; 1
     e86:	91 83       	std	Z+1, r25	; 0x01
     e88:	80 83       	st	Z, r24
     e8a:	fe 01       	movw	r30, r28
     e8c:	e7 5b       	subi	r30, 0xB7	; 183
     e8e:	ff 4f       	sbci	r31, 0xFF	; 255
     e90:	80 81       	ld	r24, Z
     e92:	91 81       	ldd	r25, Z+1	; 0x01
     e94:	01 97       	sbiw	r24, 0x01	; 1
     e96:	f1 f7       	brne	.-4      	; 0xe94 <lcd_set_4bit+0x408>
     e98:	fe 01       	movw	r30, r28
     e9a:	e7 5b       	subi	r30, 0xB7	; 183
     e9c:	ff 4f       	sbci	r31, 0xFF	; 255
     e9e:	91 83       	std	Z+1, r25	; 0x01
     ea0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ea2:	de 01       	movw	r26, r28
     ea4:	a5 5b       	subi	r26, 0xB5	; 181
     ea6:	bf 4f       	sbci	r27, 0xFF	; 255
     ea8:	fe 01       	movw	r30, r28
     eaa:	e5 5b       	subi	r30, 0xB5	; 181
     eac:	ff 4f       	sbci	r31, 0xFF	; 255
     eae:	80 81       	ld	r24, Z
     eb0:	91 81       	ldd	r25, Z+1	; 0x01
     eb2:	01 97       	sbiw	r24, 0x01	; 1
     eb4:	11 96       	adiw	r26, 0x01	; 1
     eb6:	9c 93       	st	X, r25
     eb8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     eba:	fe 01       	movw	r30, r28
     ebc:	e5 5b       	subi	r30, 0xB5	; 181
     ebe:	ff 4f       	sbci	r31, 0xFF	; 255
     ec0:	80 81       	ld	r24, Z
     ec2:	91 81       	ldd	r25, Z+1	; 0x01
     ec4:	00 97       	sbiw	r24, 0x00	; 0
     ec6:	d1 f6       	brne	.-76     	; 0xe7c <lcd_set_4bit+0x3f0>
     ec8:	27 c0       	rjmp	.+78     	; 0xf18 <lcd_set_4bit+0x48c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     eca:	8e 01       	movw	r16, r28
     ecc:	05 5b       	subi	r16, 0xB5	; 181
     ece:	1f 4f       	sbci	r17, 0xFF	; 255
     ed0:	fe 01       	movw	r30, r28
     ed2:	e3 5b       	subi	r30, 0xB3	; 179
     ed4:	ff 4f       	sbci	r31, 0xFF	; 255
     ed6:	60 81       	ld	r22, Z
     ed8:	71 81       	ldd	r23, Z+1	; 0x01
     eda:	82 81       	ldd	r24, Z+2	; 0x02
     edc:	93 81       	ldd	r25, Z+3	; 0x03
     ede:	0e 94 82 24 	call	0x4904	; 0x4904 <__fixunssfsi>
     ee2:	dc 01       	movw	r26, r24
     ee4:	cb 01       	movw	r24, r22
     ee6:	f8 01       	movw	r30, r16
     ee8:	91 83       	std	Z+1, r25	; 0x01
     eea:	80 83       	st	Z, r24
     eec:	de 01       	movw	r26, r28
     eee:	a9 5b       	subi	r26, 0xB9	; 185
     ef0:	bf 4f       	sbci	r27, 0xFF	; 255
     ef2:	fe 01       	movw	r30, r28
     ef4:	e5 5b       	subi	r30, 0xB5	; 181
     ef6:	ff 4f       	sbci	r31, 0xFF	; 255
     ef8:	80 81       	ld	r24, Z
     efa:	91 81       	ldd	r25, Z+1	; 0x01
     efc:	8d 93       	st	X+, r24
     efe:	9c 93       	st	X, r25
     f00:	fe 01       	movw	r30, r28
     f02:	e9 5b       	subi	r30, 0xB9	; 185
     f04:	ff 4f       	sbci	r31, 0xFF	; 255
     f06:	80 81       	ld	r24, Z
     f08:	91 81       	ldd	r25, Z+1	; 0x01
     f0a:	01 97       	sbiw	r24, 0x01	; 1
     f0c:	f1 f7       	brne	.-4      	; 0xf0a <lcd_set_4bit+0x47e>
     f0e:	fe 01       	movw	r30, r28
     f10:	e9 5b       	subi	r30, 0xB9	; 185
     f12:	ff 4f       	sbci	r31, 0xFF	; 255
     f14:	91 83       	std	Z+1, r25	; 0x01
     f16:	80 83       	st	Z, r24

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     f18:	a8 e2       	ldi	r26, 0x28	; 40
     f1a:	b0 e0       	ldi	r27, 0x00	; 0
     f1c:	e8 e2       	ldi	r30, 0x28	; 40
     f1e:	f0 e0       	ldi	r31, 0x00	; 0
     f20:	80 81       	ld	r24, Z
     f22:	8e 7f       	andi	r24, 0xFE	; 254
     f24:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     f26:	a8 e2       	ldi	r26, 0x28	; 40
     f28:	b0 e0       	ldi	r27, 0x00	; 0
     f2a:	e8 e2       	ldi	r30, 0x28	; 40
     f2c:	f0 e0       	ldi	r31, 0x00	; 0
     f2e:	80 81       	ld	r24, Z
     f30:	8d 7f       	andi	r24, 0xFD	; 253
     f32:	8c 93       	st	X, r24
	lcd_port = 0x30;				//Sending 3
     f34:	e8 e2       	ldi	r30, 0x28	; 40
     f36:	f0 e0       	ldi	r31, 0x00	; 0
     f38:	80 e3       	ldi	r24, 0x30	; 48
     f3a:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     f3c:	a8 e2       	ldi	r26, 0x28	; 40
     f3e:	b0 e0       	ldi	r27, 0x00	; 0
     f40:	e8 e2       	ldi	r30, 0x28	; 40
     f42:	f0 e0       	ldi	r31, 0x00	; 0
     f44:	80 81       	ld	r24, Z
     f46:	84 60       	ori	r24, 0x04	; 4
     f48:	8c 93       	st	X, r24
     f4a:	fe 01       	movw	r30, r28
     f4c:	ed 5b       	subi	r30, 0xBD	; 189
     f4e:	ff 4f       	sbci	r31, 0xFF	; 255
     f50:	80 e0       	ldi	r24, 0x00	; 0
     f52:	90 e0       	ldi	r25, 0x00	; 0
     f54:	a0 ea       	ldi	r26, 0xA0	; 160
     f56:	b0 e4       	ldi	r27, 0x40	; 64
     f58:	80 83       	st	Z, r24
     f5a:	91 83       	std	Z+1, r25	; 0x01
     f5c:	a2 83       	std	Z+2, r26	; 0x02
     f5e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f60:	8e 01       	movw	r16, r28
     f62:	01 5c       	subi	r16, 0xC1	; 193
     f64:	1f 4f       	sbci	r17, 0xFF	; 255
     f66:	fe 01       	movw	r30, r28
     f68:	ed 5b       	subi	r30, 0xBD	; 189
     f6a:	ff 4f       	sbci	r31, 0xFF	; 255
     f6c:	60 81       	ld	r22, Z
     f6e:	71 81       	ldd	r23, Z+1	; 0x01
     f70:	82 81       	ldd	r24, Z+2	; 0x02
     f72:	93 81       	ldd	r25, Z+3	; 0x03
     f74:	2d ec       	ldi	r18, 0xCD	; 205
     f76:	3c ec       	ldi	r19, 0xCC	; 204
     f78:	4c e2       	ldi	r20, 0x2C	; 44
     f7a:	55 e4       	ldi	r21, 0x45	; 69
     f7c:	0e 94 58 26 	call	0x4cb0	; 0x4cb0 <__mulsf3>
     f80:	dc 01       	movw	r26, r24
     f82:	cb 01       	movw	r24, r22
     f84:	f8 01       	movw	r30, r16
     f86:	80 83       	st	Z, r24
     f88:	91 83       	std	Z+1, r25	; 0x01
     f8a:	a2 83       	std	Z+2, r26	; 0x02
     f8c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     f8e:	fe 01       	movw	r30, r28
     f90:	ff 96       	adiw	r30, 0x3f	; 63
     f92:	60 81       	ld	r22, Z
     f94:	71 81       	ldd	r23, Z+1	; 0x01
     f96:	82 81       	ldd	r24, Z+2	; 0x02
     f98:	93 81       	ldd	r25, Z+3	; 0x03
     f9a:	20 e0       	ldi	r18, 0x00	; 0
     f9c:	30 e0       	ldi	r19, 0x00	; 0
     f9e:	40 e8       	ldi	r20, 0x80	; 128
     fa0:	5f e3       	ldi	r21, 0x3F	; 63
     fa2:	0e 94 5e 28 	call	0x50bc	; 0x50bc <__ltsf2>
     fa6:	88 23       	and	r24, r24
     fa8:	2c f4       	brge	.+10     	; 0xfb4 <lcd_set_4bit+0x528>
		__ticks = 1;
     faa:	81 e0       	ldi	r24, 0x01	; 1
     fac:	90 e0       	ldi	r25, 0x00	; 0
     fae:	9e af       	std	Y+62, r25	; 0x3e
     fb0:	8d af       	std	Y+61, r24	; 0x3d
     fb2:	46 c0       	rjmp	.+140    	; 0x1040 <lcd_set_4bit+0x5b4>
	else if (__tmp > 65535)
     fb4:	fe 01       	movw	r30, r28
     fb6:	ff 96       	adiw	r30, 0x3f	; 63
     fb8:	60 81       	ld	r22, Z
     fba:	71 81       	ldd	r23, Z+1	; 0x01
     fbc:	82 81       	ldd	r24, Z+2	; 0x02
     fbe:	93 81       	ldd	r25, Z+3	; 0x03
     fc0:	20 e0       	ldi	r18, 0x00	; 0
     fc2:	3f ef       	ldi	r19, 0xFF	; 255
     fc4:	4f e7       	ldi	r20, 0x7F	; 127
     fc6:	57 e4       	ldi	r21, 0x47	; 71
     fc8:	0e 94 fe 27 	call	0x4ffc	; 0x4ffc <__gtsf2>
     fcc:	18 16       	cp	r1, r24
     fce:	64 f5       	brge	.+88     	; 0x1028 <lcd_set_4bit+0x59c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fd0:	fe 01       	movw	r30, r28
     fd2:	ed 5b       	subi	r30, 0xBD	; 189
     fd4:	ff 4f       	sbci	r31, 0xFF	; 255
     fd6:	60 81       	ld	r22, Z
     fd8:	71 81       	ldd	r23, Z+1	; 0x01
     fda:	82 81       	ldd	r24, Z+2	; 0x02
     fdc:	93 81       	ldd	r25, Z+3	; 0x03
     fde:	20 e0       	ldi	r18, 0x00	; 0
     fe0:	30 e0       	ldi	r19, 0x00	; 0
     fe2:	40 e2       	ldi	r20, 0x20	; 32
     fe4:	51 e4       	ldi	r21, 0x41	; 65
     fe6:	0e 94 58 26 	call	0x4cb0	; 0x4cb0 <__mulsf3>
     fea:	dc 01       	movw	r26, r24
     fec:	cb 01       	movw	r24, r22
     fee:	bc 01       	movw	r22, r24
     ff0:	cd 01       	movw	r24, r26
     ff2:	0e 94 82 24 	call	0x4904	; 0x4904 <__fixunssfsi>
     ff6:	dc 01       	movw	r26, r24
     ff8:	cb 01       	movw	r24, r22
     ffa:	9e af       	std	Y+62, r25	; 0x3e
     ffc:	8d af       	std	Y+61, r24	; 0x3d
     ffe:	0f c0       	rjmp	.+30     	; 0x101e <lcd_set_4bit+0x592>
    1000:	84 e1       	ldi	r24, 0x14	; 20
    1002:	91 e0       	ldi	r25, 0x01	; 1
    1004:	9c af       	std	Y+60, r25	; 0x3c
    1006:	8b af       	std	Y+59, r24	; 0x3b
    1008:	8b ad       	ldd	r24, Y+59	; 0x3b
    100a:	9c ad       	ldd	r25, Y+60	; 0x3c
    100c:	01 97       	sbiw	r24, 0x01	; 1
    100e:	f1 f7       	brne	.-4      	; 0x100c <lcd_set_4bit+0x580>
    1010:	9c af       	std	Y+60, r25	; 0x3c
    1012:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1014:	8d ad       	ldd	r24, Y+61	; 0x3d
    1016:	9e ad       	ldd	r25, Y+62	; 0x3e
    1018:	01 97       	sbiw	r24, 0x01	; 1
    101a:	9e af       	std	Y+62, r25	; 0x3e
    101c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    101e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1020:	9e ad       	ldd	r25, Y+62	; 0x3e
    1022:	00 97       	sbiw	r24, 0x00	; 0
    1024:	69 f7       	brne	.-38     	; 0x1000 <lcd_set_4bit+0x574>
    1026:	16 c0       	rjmp	.+44     	; 0x1054 <lcd_set_4bit+0x5c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1028:	fe 01       	movw	r30, r28
    102a:	ff 96       	adiw	r30, 0x3f	; 63
    102c:	60 81       	ld	r22, Z
    102e:	71 81       	ldd	r23, Z+1	; 0x01
    1030:	82 81       	ldd	r24, Z+2	; 0x02
    1032:	93 81       	ldd	r25, Z+3	; 0x03
    1034:	0e 94 82 24 	call	0x4904	; 0x4904 <__fixunssfsi>
    1038:	dc 01       	movw	r26, r24
    103a:	cb 01       	movw	r24, r22
    103c:	9e af       	std	Y+62, r25	; 0x3e
    103e:	8d af       	std	Y+61, r24	; 0x3d
    1040:	8d ad       	ldd	r24, Y+61	; 0x3d
    1042:	9e ad       	ldd	r25, Y+62	; 0x3e
    1044:	9a af       	std	Y+58, r25	; 0x3a
    1046:	89 af       	std	Y+57, r24	; 0x39
    1048:	89 ad       	ldd	r24, Y+57	; 0x39
    104a:	9a ad       	ldd	r25, Y+58	; 0x3a
    104c:	01 97       	sbiw	r24, 0x01	; 1
    104e:	f1 f7       	brne	.-4      	; 0x104c <lcd_set_4bit+0x5c0>
    1050:	9a af       	std	Y+58, r25	; 0x3a
    1052:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
    1054:	a8 e2       	ldi	r26, 0x28	; 40
    1056:	b0 e0       	ldi	r27, 0x00	; 0
    1058:	e8 e2       	ldi	r30, 0x28	; 40
    105a:	f0 e0       	ldi	r31, 0x00	; 0
    105c:	80 81       	ld	r24, Z
    105e:	8b 7f       	andi	r24, 0xFB	; 251
    1060:	8c 93       	st	X, r24
    1062:	80 e0       	ldi	r24, 0x00	; 0
    1064:	90 e0       	ldi	r25, 0x00	; 0
    1066:	a0 e8       	ldi	r26, 0x80	; 128
    1068:	bf e3       	ldi	r27, 0x3F	; 63
    106a:	8d ab       	std	Y+53, r24	; 0x35
    106c:	9e ab       	std	Y+54, r25	; 0x36
    106e:	af ab       	std	Y+55, r26	; 0x37
    1070:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1072:	6d a9       	ldd	r22, Y+53	; 0x35
    1074:	7e a9       	ldd	r23, Y+54	; 0x36
    1076:	8f a9       	ldd	r24, Y+55	; 0x37
    1078:	98 ad       	ldd	r25, Y+56	; 0x38
    107a:	2d ec       	ldi	r18, 0xCD	; 205
    107c:	3c ec       	ldi	r19, 0xCC	; 204
    107e:	4c e2       	ldi	r20, 0x2C	; 44
    1080:	55 e4       	ldi	r21, 0x45	; 69
    1082:	0e 94 58 26 	call	0x4cb0	; 0x4cb0 <__mulsf3>
    1086:	dc 01       	movw	r26, r24
    1088:	cb 01       	movw	r24, r22
    108a:	89 ab       	std	Y+49, r24	; 0x31
    108c:	9a ab       	std	Y+50, r25	; 0x32
    108e:	ab ab       	std	Y+51, r26	; 0x33
    1090:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1092:	69 a9       	ldd	r22, Y+49	; 0x31
    1094:	7a a9       	ldd	r23, Y+50	; 0x32
    1096:	8b a9       	ldd	r24, Y+51	; 0x33
    1098:	9c a9       	ldd	r25, Y+52	; 0x34
    109a:	20 e0       	ldi	r18, 0x00	; 0
    109c:	30 e0       	ldi	r19, 0x00	; 0
    109e:	40 e8       	ldi	r20, 0x80	; 128
    10a0:	5f e3       	ldi	r21, 0x3F	; 63
    10a2:	0e 94 5e 28 	call	0x50bc	; 0x50bc <__ltsf2>
    10a6:	88 23       	and	r24, r24
    10a8:	2c f4       	brge	.+10     	; 0x10b4 <lcd_set_4bit+0x628>
		__ticks = 1;
    10aa:	81 e0       	ldi	r24, 0x01	; 1
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	98 ab       	std	Y+48, r25	; 0x30
    10b0:	8f a7       	std	Y+47, r24	; 0x2f
    10b2:	3f c0       	rjmp	.+126    	; 0x1132 <lcd_set_4bit+0x6a6>
	else if (__tmp > 65535)
    10b4:	69 a9       	ldd	r22, Y+49	; 0x31
    10b6:	7a a9       	ldd	r23, Y+50	; 0x32
    10b8:	8b a9       	ldd	r24, Y+51	; 0x33
    10ba:	9c a9       	ldd	r25, Y+52	; 0x34
    10bc:	20 e0       	ldi	r18, 0x00	; 0
    10be:	3f ef       	ldi	r19, 0xFF	; 255
    10c0:	4f e7       	ldi	r20, 0x7F	; 127
    10c2:	57 e4       	ldi	r21, 0x47	; 71
    10c4:	0e 94 fe 27 	call	0x4ffc	; 0x4ffc <__gtsf2>
    10c8:	18 16       	cp	r1, r24
    10ca:	4c f5       	brge	.+82     	; 0x111e <lcd_set_4bit+0x692>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10cc:	6d a9       	ldd	r22, Y+53	; 0x35
    10ce:	7e a9       	ldd	r23, Y+54	; 0x36
    10d0:	8f a9       	ldd	r24, Y+55	; 0x37
    10d2:	98 ad       	ldd	r25, Y+56	; 0x38
    10d4:	20 e0       	ldi	r18, 0x00	; 0
    10d6:	30 e0       	ldi	r19, 0x00	; 0
    10d8:	40 e2       	ldi	r20, 0x20	; 32
    10da:	51 e4       	ldi	r21, 0x41	; 65
    10dc:	0e 94 58 26 	call	0x4cb0	; 0x4cb0 <__mulsf3>
    10e0:	dc 01       	movw	r26, r24
    10e2:	cb 01       	movw	r24, r22
    10e4:	bc 01       	movw	r22, r24
    10e6:	cd 01       	movw	r24, r26
    10e8:	0e 94 82 24 	call	0x4904	; 0x4904 <__fixunssfsi>
    10ec:	dc 01       	movw	r26, r24
    10ee:	cb 01       	movw	r24, r22
    10f0:	98 ab       	std	Y+48, r25	; 0x30
    10f2:	8f a7       	std	Y+47, r24	; 0x2f
    10f4:	0f c0       	rjmp	.+30     	; 0x1114 <lcd_set_4bit+0x688>
    10f6:	84 e1       	ldi	r24, 0x14	; 20
    10f8:	91 e0       	ldi	r25, 0x01	; 1
    10fa:	9e a7       	std	Y+46, r25	; 0x2e
    10fc:	8d a7       	std	Y+45, r24	; 0x2d
    10fe:	8d a5       	ldd	r24, Y+45	; 0x2d
    1100:	9e a5       	ldd	r25, Y+46	; 0x2e
    1102:	01 97       	sbiw	r24, 0x01	; 1
    1104:	f1 f7       	brne	.-4      	; 0x1102 <lcd_set_4bit+0x676>
    1106:	9e a7       	std	Y+46, r25	; 0x2e
    1108:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    110a:	8f a5       	ldd	r24, Y+47	; 0x2f
    110c:	98 a9       	ldd	r25, Y+48	; 0x30
    110e:	01 97       	sbiw	r24, 0x01	; 1
    1110:	98 ab       	std	Y+48, r25	; 0x30
    1112:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1114:	8f a5       	ldd	r24, Y+47	; 0x2f
    1116:	98 a9       	ldd	r25, Y+48	; 0x30
    1118:	00 97       	sbiw	r24, 0x00	; 0
    111a:	69 f7       	brne	.-38     	; 0x10f6 <lcd_set_4bit+0x66a>
    111c:	14 c0       	rjmp	.+40     	; 0x1146 <lcd_set_4bit+0x6ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    111e:	69 a9       	ldd	r22, Y+49	; 0x31
    1120:	7a a9       	ldd	r23, Y+50	; 0x32
    1122:	8b a9       	ldd	r24, Y+51	; 0x33
    1124:	9c a9       	ldd	r25, Y+52	; 0x34
    1126:	0e 94 82 24 	call	0x4904	; 0x4904 <__fixunssfsi>
    112a:	dc 01       	movw	r26, r24
    112c:	cb 01       	movw	r24, r22
    112e:	98 ab       	std	Y+48, r25	; 0x30
    1130:	8f a7       	std	Y+47, r24	; 0x2f
    1132:	8f a5       	ldd	r24, Y+47	; 0x2f
    1134:	98 a9       	ldd	r25, Y+48	; 0x30
    1136:	9c a7       	std	Y+44, r25	; 0x2c
    1138:	8b a7       	std	Y+43, r24	; 0x2b
    113a:	8b a5       	ldd	r24, Y+43	; 0x2b
    113c:	9c a5       	ldd	r25, Y+44	; 0x2c
    113e:	01 97       	sbiw	r24, 0x01	; 1
    1140:	f1 f7       	brne	.-4      	; 0x113e <lcd_set_4bit+0x6b2>
    1142:	9c a7       	std	Y+44, r25	; 0x2c
    1144:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
    1146:	a8 e2       	ldi	r26, 0x28	; 40
    1148:	b0 e0       	ldi	r27, 0x00	; 0
    114a:	e8 e2       	ldi	r30, 0x28	; 40
    114c:	f0 e0       	ldi	r31, 0x00	; 0
    114e:	80 81       	ld	r24, Z
    1150:	8e 7f       	andi	r24, 0xFE	; 254
    1152:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
    1154:	a8 e2       	ldi	r26, 0x28	; 40
    1156:	b0 e0       	ldi	r27, 0x00	; 0
    1158:	e8 e2       	ldi	r30, 0x28	; 40
    115a:	f0 e0       	ldi	r31, 0x00	; 0
    115c:	80 81       	ld	r24, Z
    115e:	8d 7f       	andi	r24, 0xFD	; 253
    1160:	8c 93       	st	X, r24
	lcd_port = 0x30;				//Sending 3
    1162:	e8 e2       	ldi	r30, 0x28	; 40
    1164:	f0 e0       	ldi	r31, 0x00	; 0
    1166:	80 e3       	ldi	r24, 0x30	; 48
    1168:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
    116a:	a8 e2       	ldi	r26, 0x28	; 40
    116c:	b0 e0       	ldi	r27, 0x00	; 0
    116e:	e8 e2       	ldi	r30, 0x28	; 40
    1170:	f0 e0       	ldi	r31, 0x00	; 0
    1172:	80 81       	ld	r24, Z
    1174:	84 60       	ori	r24, 0x04	; 4
    1176:	8c 93       	st	X, r24
    1178:	80 e0       	ldi	r24, 0x00	; 0
    117a:	90 e0       	ldi	r25, 0x00	; 0
    117c:	a0 ea       	ldi	r26, 0xA0	; 160
    117e:	b0 e4       	ldi	r27, 0x40	; 64
    1180:	8f a3       	std	Y+39, r24	; 0x27
    1182:	98 a7       	std	Y+40, r25	; 0x28
    1184:	a9 a7       	std	Y+41, r26	; 0x29
    1186:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1188:	6f a1       	ldd	r22, Y+39	; 0x27
    118a:	78 a5       	ldd	r23, Y+40	; 0x28
    118c:	89 a5       	ldd	r24, Y+41	; 0x29
    118e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1190:	2d ec       	ldi	r18, 0xCD	; 205
    1192:	3c ec       	ldi	r19, 0xCC	; 204
    1194:	4c e2       	ldi	r20, 0x2C	; 44
    1196:	55 e4       	ldi	r21, 0x45	; 69
    1198:	0e 94 58 26 	call	0x4cb0	; 0x4cb0 <__mulsf3>
    119c:	dc 01       	movw	r26, r24
    119e:	cb 01       	movw	r24, r22
    11a0:	8b a3       	std	Y+35, r24	; 0x23
    11a2:	9c a3       	std	Y+36, r25	; 0x24
    11a4:	ad a3       	std	Y+37, r26	; 0x25
    11a6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    11a8:	6b a1       	ldd	r22, Y+35	; 0x23
    11aa:	7c a1       	ldd	r23, Y+36	; 0x24
    11ac:	8d a1       	ldd	r24, Y+37	; 0x25
    11ae:	9e a1       	ldd	r25, Y+38	; 0x26
    11b0:	20 e0       	ldi	r18, 0x00	; 0
    11b2:	30 e0       	ldi	r19, 0x00	; 0
    11b4:	40 e8       	ldi	r20, 0x80	; 128
    11b6:	5f e3       	ldi	r21, 0x3F	; 63
    11b8:	0e 94 5e 28 	call	0x50bc	; 0x50bc <__ltsf2>
    11bc:	88 23       	and	r24, r24
    11be:	2c f4       	brge	.+10     	; 0x11ca <lcd_set_4bit+0x73e>
		__ticks = 1;
    11c0:	81 e0       	ldi	r24, 0x01	; 1
    11c2:	90 e0       	ldi	r25, 0x00	; 0
    11c4:	9a a3       	std	Y+34, r25	; 0x22
    11c6:	89 a3       	std	Y+33, r24	; 0x21
    11c8:	3f c0       	rjmp	.+126    	; 0x1248 <lcd_set_4bit+0x7bc>
	else if (__tmp > 65535)
    11ca:	6b a1       	ldd	r22, Y+35	; 0x23
    11cc:	7c a1       	ldd	r23, Y+36	; 0x24
    11ce:	8d a1       	ldd	r24, Y+37	; 0x25
    11d0:	9e a1       	ldd	r25, Y+38	; 0x26
    11d2:	20 e0       	ldi	r18, 0x00	; 0
    11d4:	3f ef       	ldi	r19, 0xFF	; 255
    11d6:	4f e7       	ldi	r20, 0x7F	; 127
    11d8:	57 e4       	ldi	r21, 0x47	; 71
    11da:	0e 94 fe 27 	call	0x4ffc	; 0x4ffc <__gtsf2>
    11de:	18 16       	cp	r1, r24
    11e0:	4c f5       	brge	.+82     	; 0x1234 <lcd_set_4bit+0x7a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11e2:	6f a1       	ldd	r22, Y+39	; 0x27
    11e4:	78 a5       	ldd	r23, Y+40	; 0x28
    11e6:	89 a5       	ldd	r24, Y+41	; 0x29
    11e8:	9a a5       	ldd	r25, Y+42	; 0x2a
    11ea:	20 e0       	ldi	r18, 0x00	; 0
    11ec:	30 e0       	ldi	r19, 0x00	; 0
    11ee:	40 e2       	ldi	r20, 0x20	; 32
    11f0:	51 e4       	ldi	r21, 0x41	; 65
    11f2:	0e 94 58 26 	call	0x4cb0	; 0x4cb0 <__mulsf3>
    11f6:	dc 01       	movw	r26, r24
    11f8:	cb 01       	movw	r24, r22
    11fa:	bc 01       	movw	r22, r24
    11fc:	cd 01       	movw	r24, r26
    11fe:	0e 94 82 24 	call	0x4904	; 0x4904 <__fixunssfsi>
    1202:	dc 01       	movw	r26, r24
    1204:	cb 01       	movw	r24, r22
    1206:	9a a3       	std	Y+34, r25	; 0x22
    1208:	89 a3       	std	Y+33, r24	; 0x21
    120a:	0f c0       	rjmp	.+30     	; 0x122a <lcd_set_4bit+0x79e>
    120c:	84 e1       	ldi	r24, 0x14	; 20
    120e:	91 e0       	ldi	r25, 0x01	; 1
    1210:	98 a3       	std	Y+32, r25	; 0x20
    1212:	8f 8f       	std	Y+31, r24	; 0x1f
    1214:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1216:	98 a1       	ldd	r25, Y+32	; 0x20
    1218:	01 97       	sbiw	r24, 0x01	; 1
    121a:	f1 f7       	brne	.-4      	; 0x1218 <lcd_set_4bit+0x78c>
    121c:	98 a3       	std	Y+32, r25	; 0x20
    121e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1220:	89 a1       	ldd	r24, Y+33	; 0x21
    1222:	9a a1       	ldd	r25, Y+34	; 0x22
    1224:	01 97       	sbiw	r24, 0x01	; 1
    1226:	9a a3       	std	Y+34, r25	; 0x22
    1228:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    122a:	89 a1       	ldd	r24, Y+33	; 0x21
    122c:	9a a1       	ldd	r25, Y+34	; 0x22
    122e:	00 97       	sbiw	r24, 0x00	; 0
    1230:	69 f7       	brne	.-38     	; 0x120c <lcd_set_4bit+0x780>
    1232:	14 c0       	rjmp	.+40     	; 0x125c <lcd_set_4bit+0x7d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1234:	6b a1       	ldd	r22, Y+35	; 0x23
    1236:	7c a1       	ldd	r23, Y+36	; 0x24
    1238:	8d a1       	ldd	r24, Y+37	; 0x25
    123a:	9e a1       	ldd	r25, Y+38	; 0x26
    123c:	0e 94 82 24 	call	0x4904	; 0x4904 <__fixunssfsi>
    1240:	dc 01       	movw	r26, r24
    1242:	cb 01       	movw	r24, r22
    1244:	9a a3       	std	Y+34, r25	; 0x22
    1246:	89 a3       	std	Y+33, r24	; 0x21
    1248:	89 a1       	ldd	r24, Y+33	; 0x21
    124a:	9a a1       	ldd	r25, Y+34	; 0x22
    124c:	9e 8f       	std	Y+30, r25	; 0x1e
    124e:	8d 8f       	std	Y+29, r24	; 0x1d
    1250:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1252:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1254:	01 97       	sbiw	r24, 0x01	; 1
    1256:	f1 f7       	brne	.-4      	; 0x1254 <lcd_set_4bit+0x7c8>
    1258:	9e 8f       	std	Y+30, r25	; 0x1e
    125a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
    125c:	a8 e2       	ldi	r26, 0x28	; 40
    125e:	b0 e0       	ldi	r27, 0x00	; 0
    1260:	e8 e2       	ldi	r30, 0x28	; 40
    1262:	f0 e0       	ldi	r31, 0x00	; 0
    1264:	80 81       	ld	r24, Z
    1266:	8b 7f       	andi	r24, 0xFB	; 251
    1268:	8c 93       	st	X, r24
    126a:	80 e0       	ldi	r24, 0x00	; 0
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	a0 e8       	ldi	r26, 0x80	; 128
    1270:	bf e3       	ldi	r27, 0x3F	; 63
    1272:	89 8f       	std	Y+25, r24	; 0x19
    1274:	9a 8f       	std	Y+26, r25	; 0x1a
    1276:	ab 8f       	std	Y+27, r26	; 0x1b
    1278:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    127a:	69 8d       	ldd	r22, Y+25	; 0x19
    127c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    127e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1280:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1282:	2d ec       	ldi	r18, 0xCD	; 205
    1284:	3c ec       	ldi	r19, 0xCC	; 204
    1286:	4c e2       	ldi	r20, 0x2C	; 44
    1288:	55 e4       	ldi	r21, 0x45	; 69
    128a:	0e 94 58 26 	call	0x4cb0	; 0x4cb0 <__mulsf3>
    128e:	dc 01       	movw	r26, r24
    1290:	cb 01       	movw	r24, r22
    1292:	8d 8b       	std	Y+21, r24	; 0x15
    1294:	9e 8b       	std	Y+22, r25	; 0x16
    1296:	af 8b       	std	Y+23, r26	; 0x17
    1298:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    129a:	6d 89       	ldd	r22, Y+21	; 0x15
    129c:	7e 89       	ldd	r23, Y+22	; 0x16
    129e:	8f 89       	ldd	r24, Y+23	; 0x17
    12a0:	98 8d       	ldd	r25, Y+24	; 0x18
    12a2:	20 e0       	ldi	r18, 0x00	; 0
    12a4:	30 e0       	ldi	r19, 0x00	; 0
    12a6:	40 e8       	ldi	r20, 0x80	; 128
    12a8:	5f e3       	ldi	r21, 0x3F	; 63
    12aa:	0e 94 5e 28 	call	0x50bc	; 0x50bc <__ltsf2>
    12ae:	88 23       	and	r24, r24
    12b0:	2c f4       	brge	.+10     	; 0x12bc <lcd_set_4bit+0x830>
		__ticks = 1;
    12b2:	81 e0       	ldi	r24, 0x01	; 1
    12b4:	90 e0       	ldi	r25, 0x00	; 0
    12b6:	9c 8b       	std	Y+20, r25	; 0x14
    12b8:	8b 8b       	std	Y+19, r24	; 0x13
    12ba:	3f c0       	rjmp	.+126    	; 0x133a <lcd_set_4bit+0x8ae>
	else if (__tmp > 65535)
    12bc:	6d 89       	ldd	r22, Y+21	; 0x15
    12be:	7e 89       	ldd	r23, Y+22	; 0x16
    12c0:	8f 89       	ldd	r24, Y+23	; 0x17
    12c2:	98 8d       	ldd	r25, Y+24	; 0x18
    12c4:	20 e0       	ldi	r18, 0x00	; 0
    12c6:	3f ef       	ldi	r19, 0xFF	; 255
    12c8:	4f e7       	ldi	r20, 0x7F	; 127
    12ca:	57 e4       	ldi	r21, 0x47	; 71
    12cc:	0e 94 fe 27 	call	0x4ffc	; 0x4ffc <__gtsf2>
    12d0:	18 16       	cp	r1, r24
    12d2:	4c f5       	brge	.+82     	; 0x1326 <lcd_set_4bit+0x89a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12d4:	69 8d       	ldd	r22, Y+25	; 0x19
    12d6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    12d8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    12da:	9c 8d       	ldd	r25, Y+28	; 0x1c
    12dc:	20 e0       	ldi	r18, 0x00	; 0
    12de:	30 e0       	ldi	r19, 0x00	; 0
    12e0:	40 e2       	ldi	r20, 0x20	; 32
    12e2:	51 e4       	ldi	r21, 0x41	; 65
    12e4:	0e 94 58 26 	call	0x4cb0	; 0x4cb0 <__mulsf3>
    12e8:	dc 01       	movw	r26, r24
    12ea:	cb 01       	movw	r24, r22
    12ec:	bc 01       	movw	r22, r24
    12ee:	cd 01       	movw	r24, r26
    12f0:	0e 94 82 24 	call	0x4904	; 0x4904 <__fixunssfsi>
    12f4:	dc 01       	movw	r26, r24
    12f6:	cb 01       	movw	r24, r22
    12f8:	9c 8b       	std	Y+20, r25	; 0x14
    12fa:	8b 8b       	std	Y+19, r24	; 0x13
    12fc:	0f c0       	rjmp	.+30     	; 0x131c <lcd_set_4bit+0x890>
    12fe:	84 e1       	ldi	r24, 0x14	; 20
    1300:	91 e0       	ldi	r25, 0x01	; 1
    1302:	9a 8b       	std	Y+18, r25	; 0x12
    1304:	89 8b       	std	Y+17, r24	; 0x11
    1306:	89 89       	ldd	r24, Y+17	; 0x11
    1308:	9a 89       	ldd	r25, Y+18	; 0x12
    130a:	01 97       	sbiw	r24, 0x01	; 1
    130c:	f1 f7       	brne	.-4      	; 0x130a <lcd_set_4bit+0x87e>
    130e:	9a 8b       	std	Y+18, r25	; 0x12
    1310:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1312:	8b 89       	ldd	r24, Y+19	; 0x13
    1314:	9c 89       	ldd	r25, Y+20	; 0x14
    1316:	01 97       	sbiw	r24, 0x01	; 1
    1318:	9c 8b       	std	Y+20, r25	; 0x14
    131a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    131c:	8b 89       	ldd	r24, Y+19	; 0x13
    131e:	9c 89       	ldd	r25, Y+20	; 0x14
    1320:	00 97       	sbiw	r24, 0x00	; 0
    1322:	69 f7       	brne	.-38     	; 0x12fe <lcd_set_4bit+0x872>
    1324:	14 c0       	rjmp	.+40     	; 0x134e <lcd_set_4bit+0x8c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1326:	6d 89       	ldd	r22, Y+21	; 0x15
    1328:	7e 89       	ldd	r23, Y+22	; 0x16
    132a:	8f 89       	ldd	r24, Y+23	; 0x17
    132c:	98 8d       	ldd	r25, Y+24	; 0x18
    132e:	0e 94 82 24 	call	0x4904	; 0x4904 <__fixunssfsi>
    1332:	dc 01       	movw	r26, r24
    1334:	cb 01       	movw	r24, r22
    1336:	9c 8b       	std	Y+20, r25	; 0x14
    1338:	8b 8b       	std	Y+19, r24	; 0x13
    133a:	8b 89       	ldd	r24, Y+19	; 0x13
    133c:	9c 89       	ldd	r25, Y+20	; 0x14
    133e:	98 8b       	std	Y+16, r25	; 0x10
    1340:	8f 87       	std	Y+15, r24	; 0x0f
    1342:	8f 85       	ldd	r24, Y+15	; 0x0f
    1344:	98 89       	ldd	r25, Y+16	; 0x10
    1346:	01 97       	sbiw	r24, 0x01	; 1
    1348:	f1 f7       	brne	.-4      	; 0x1346 <lcd_set_4bit+0x8ba>
    134a:	98 8b       	std	Y+16, r25	; 0x10
    134c:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
    134e:	a8 e2       	ldi	r26, 0x28	; 40
    1350:	b0 e0       	ldi	r27, 0x00	; 0
    1352:	e8 e2       	ldi	r30, 0x28	; 40
    1354:	f0 e0       	ldi	r31, 0x00	; 0
    1356:	80 81       	ld	r24, Z
    1358:	8e 7f       	andi	r24, 0xFE	; 254
    135a:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
    135c:	a8 e2       	ldi	r26, 0x28	; 40
    135e:	b0 e0       	ldi	r27, 0x00	; 0
    1360:	e8 e2       	ldi	r30, 0x28	; 40
    1362:	f0 e0       	ldi	r31, 0x00	; 0
    1364:	80 81       	ld	r24, Z
    1366:	8d 7f       	andi	r24, 0xFD	; 253
    1368:	8c 93       	st	X, r24
	lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
    136a:	e8 e2       	ldi	r30, 0x28	; 40
    136c:	f0 e0       	ldi	r31, 0x00	; 0
    136e:	80 e2       	ldi	r24, 0x20	; 32
    1370:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
    1372:	a8 e2       	ldi	r26, 0x28	; 40
    1374:	b0 e0       	ldi	r27, 0x00	; 0
    1376:	e8 e2       	ldi	r30, 0x28	; 40
    1378:	f0 e0       	ldi	r31, 0x00	; 0
    137a:	80 81       	ld	r24, Z
    137c:	84 60       	ori	r24, 0x04	; 4
    137e:	8c 93       	st	X, r24
    1380:	80 e0       	ldi	r24, 0x00	; 0
    1382:	90 e0       	ldi	r25, 0x00	; 0
    1384:	a0 ea       	ldi	r26, 0xA0	; 160
    1386:	b0 e4       	ldi	r27, 0x40	; 64
    1388:	8b 87       	std	Y+11, r24	; 0x0b
    138a:	9c 87       	std	Y+12, r25	; 0x0c
    138c:	ad 87       	std	Y+13, r26	; 0x0d
    138e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1390:	6b 85       	ldd	r22, Y+11	; 0x0b
    1392:	7c 85       	ldd	r23, Y+12	; 0x0c
    1394:	8d 85       	ldd	r24, Y+13	; 0x0d
    1396:	9e 85       	ldd	r25, Y+14	; 0x0e
    1398:	2d ec       	ldi	r18, 0xCD	; 205
    139a:	3c ec       	ldi	r19, 0xCC	; 204
    139c:	4c e2       	ldi	r20, 0x2C	; 44
    139e:	55 e4       	ldi	r21, 0x45	; 69
    13a0:	0e 94 58 26 	call	0x4cb0	; 0x4cb0 <__mulsf3>
    13a4:	dc 01       	movw	r26, r24
    13a6:	cb 01       	movw	r24, r22
    13a8:	8f 83       	std	Y+7, r24	; 0x07
    13aa:	98 87       	std	Y+8, r25	; 0x08
    13ac:	a9 87       	std	Y+9, r26	; 0x09
    13ae:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    13b0:	6f 81       	ldd	r22, Y+7	; 0x07
    13b2:	78 85       	ldd	r23, Y+8	; 0x08
    13b4:	89 85       	ldd	r24, Y+9	; 0x09
    13b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    13b8:	20 e0       	ldi	r18, 0x00	; 0
    13ba:	30 e0       	ldi	r19, 0x00	; 0
    13bc:	40 e8       	ldi	r20, 0x80	; 128
    13be:	5f e3       	ldi	r21, 0x3F	; 63
    13c0:	0e 94 5e 28 	call	0x50bc	; 0x50bc <__ltsf2>
    13c4:	88 23       	and	r24, r24
    13c6:	2c f4       	brge	.+10     	; 0x13d2 <lcd_set_4bit+0x946>
		__ticks = 1;
    13c8:	81 e0       	ldi	r24, 0x01	; 1
    13ca:	90 e0       	ldi	r25, 0x00	; 0
    13cc:	9e 83       	std	Y+6, r25	; 0x06
    13ce:	8d 83       	std	Y+5, r24	; 0x05
    13d0:	3f c0       	rjmp	.+126    	; 0x1450 <lcd_set_4bit+0x9c4>
	else if (__tmp > 65535)
    13d2:	6f 81       	ldd	r22, Y+7	; 0x07
    13d4:	78 85       	ldd	r23, Y+8	; 0x08
    13d6:	89 85       	ldd	r24, Y+9	; 0x09
    13d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    13da:	20 e0       	ldi	r18, 0x00	; 0
    13dc:	3f ef       	ldi	r19, 0xFF	; 255
    13de:	4f e7       	ldi	r20, 0x7F	; 127
    13e0:	57 e4       	ldi	r21, 0x47	; 71
    13e2:	0e 94 fe 27 	call	0x4ffc	; 0x4ffc <__gtsf2>
    13e6:	18 16       	cp	r1, r24
    13e8:	4c f5       	brge	.+82     	; 0x143c <lcd_set_4bit+0x9b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    13ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    13ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    13f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    13f2:	20 e0       	ldi	r18, 0x00	; 0
    13f4:	30 e0       	ldi	r19, 0x00	; 0
    13f6:	40 e2       	ldi	r20, 0x20	; 32
    13f8:	51 e4       	ldi	r21, 0x41	; 65
    13fa:	0e 94 58 26 	call	0x4cb0	; 0x4cb0 <__mulsf3>
    13fe:	dc 01       	movw	r26, r24
    1400:	cb 01       	movw	r24, r22
    1402:	bc 01       	movw	r22, r24
    1404:	cd 01       	movw	r24, r26
    1406:	0e 94 82 24 	call	0x4904	; 0x4904 <__fixunssfsi>
    140a:	dc 01       	movw	r26, r24
    140c:	cb 01       	movw	r24, r22
    140e:	9e 83       	std	Y+6, r25	; 0x06
    1410:	8d 83       	std	Y+5, r24	; 0x05
    1412:	0f c0       	rjmp	.+30     	; 0x1432 <lcd_set_4bit+0x9a6>
    1414:	84 e1       	ldi	r24, 0x14	; 20
    1416:	91 e0       	ldi	r25, 0x01	; 1
    1418:	9c 83       	std	Y+4, r25	; 0x04
    141a:	8b 83       	std	Y+3, r24	; 0x03
    141c:	8b 81       	ldd	r24, Y+3	; 0x03
    141e:	9c 81       	ldd	r25, Y+4	; 0x04
    1420:	01 97       	sbiw	r24, 0x01	; 1
    1422:	f1 f7       	brne	.-4      	; 0x1420 <lcd_set_4bit+0x994>
    1424:	9c 83       	std	Y+4, r25	; 0x04
    1426:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1428:	8d 81       	ldd	r24, Y+5	; 0x05
    142a:	9e 81       	ldd	r25, Y+6	; 0x06
    142c:	01 97       	sbiw	r24, 0x01	; 1
    142e:	9e 83       	std	Y+6, r25	; 0x06
    1430:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1432:	8d 81       	ldd	r24, Y+5	; 0x05
    1434:	9e 81       	ldd	r25, Y+6	; 0x06
    1436:	00 97       	sbiw	r24, 0x00	; 0
    1438:	69 f7       	brne	.-38     	; 0x1414 <lcd_set_4bit+0x988>
    143a:	14 c0       	rjmp	.+40     	; 0x1464 <lcd_set_4bit+0x9d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    143c:	6f 81       	ldd	r22, Y+7	; 0x07
    143e:	78 85       	ldd	r23, Y+8	; 0x08
    1440:	89 85       	ldd	r24, Y+9	; 0x09
    1442:	9a 85       	ldd	r25, Y+10	; 0x0a
    1444:	0e 94 82 24 	call	0x4904	; 0x4904 <__fixunssfsi>
    1448:	dc 01       	movw	r26, r24
    144a:	cb 01       	movw	r24, r22
    144c:	9e 83       	std	Y+6, r25	; 0x06
    144e:	8d 83       	std	Y+5, r24	; 0x05
    1450:	8d 81       	ldd	r24, Y+5	; 0x05
    1452:	9e 81       	ldd	r25, Y+6	; 0x06
    1454:	9a 83       	std	Y+2, r25	; 0x02
    1456:	89 83       	std	Y+1, r24	; 0x01
    1458:	89 81       	ldd	r24, Y+1	; 0x01
    145a:	9a 81       	ldd	r25, Y+2	; 0x02
    145c:	01 97       	sbiw	r24, 0x01	; 1
    145e:	f1 f7       	brne	.-4      	; 0x145c <lcd_set_4bit+0x9d0>
    1460:	9a 83       	std	Y+2, r25	; 0x02
    1462:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
    1464:	a8 e2       	ldi	r26, 0x28	; 40
    1466:	b0 e0       	ldi	r27, 0x00	; 0
    1468:	e8 e2       	ldi	r30, 0x28	; 40
    146a:	f0 e0       	ldi	r31, 0x00	; 0
    146c:	80 81       	ld	r24, Z
    146e:	8b 7f       	andi	r24, 0xFB	; 251
    1470:	8c 93       	st	X, r24

	
}
    1472:	c0 59       	subi	r28, 0x90	; 144
    1474:	df 4f       	sbci	r29, 0xFF	; 255
    1476:	0f b6       	in	r0, 0x3f	; 63
    1478:	f8 94       	cli
    147a:	de bf       	out	0x3e, r29	; 62
    147c:	0f be       	out	0x3f, r0	; 63
    147e:	cd bf       	out	0x3d, r28	; 61
    1480:	cf 91       	pop	r28
    1482:	df 91       	pop	r29
    1484:	1f 91       	pop	r17
    1486:	0f 91       	pop	r16
    1488:	08 95       	ret

0000148a <lcd_init>:

/*****Function to Initialize LCD*****/
void lcd_init()
{
    148a:	df 93       	push	r29
    148c:	cf 93       	push	r28
    148e:	cd b7       	in	r28, 0x3d	; 61
    1490:	de b7       	in	r29, 0x3e	; 62
    1492:	2e 97       	sbiw	r28, 0x0e	; 14
    1494:	0f b6       	in	r0, 0x3f	; 63
    1496:	f8 94       	cli
    1498:	de bf       	out	0x3e, r29	; 62
    149a:	0f be       	out	0x3f, r0	; 63
    149c:	cd bf       	out	0x3d, r28	; 61
    149e:	80 e0       	ldi	r24, 0x00	; 0
    14a0:	90 e0       	ldi	r25, 0x00	; 0
    14a2:	a0 e8       	ldi	r26, 0x80	; 128
    14a4:	bf e3       	ldi	r27, 0x3F	; 63
    14a6:	8b 87       	std	Y+11, r24	; 0x0b
    14a8:	9c 87       	std	Y+12, r25	; 0x0c
    14aa:	ad 87       	std	Y+13, r26	; 0x0d
    14ac:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    14b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    14b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    14b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    14b6:	2d ec       	ldi	r18, 0xCD	; 205
    14b8:	3c ec       	ldi	r19, 0xCC	; 204
    14ba:	4c e2       	ldi	r20, 0x2C	; 44
    14bc:	55 e4       	ldi	r21, 0x45	; 69
    14be:	0e 94 58 26 	call	0x4cb0	; 0x4cb0 <__mulsf3>
    14c2:	dc 01       	movw	r26, r24
    14c4:	cb 01       	movw	r24, r22
    14c6:	8f 83       	std	Y+7, r24	; 0x07
    14c8:	98 87       	std	Y+8, r25	; 0x08
    14ca:	a9 87       	std	Y+9, r26	; 0x09
    14cc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    14ce:	6f 81       	ldd	r22, Y+7	; 0x07
    14d0:	78 85       	ldd	r23, Y+8	; 0x08
    14d2:	89 85       	ldd	r24, Y+9	; 0x09
    14d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    14d6:	20 e0       	ldi	r18, 0x00	; 0
    14d8:	30 e0       	ldi	r19, 0x00	; 0
    14da:	40 e8       	ldi	r20, 0x80	; 128
    14dc:	5f e3       	ldi	r21, 0x3F	; 63
    14de:	0e 94 5e 28 	call	0x50bc	; 0x50bc <__ltsf2>
    14e2:	88 23       	and	r24, r24
    14e4:	2c f4       	brge	.+10     	; 0x14f0 <lcd_init+0x66>
		__ticks = 1;
    14e6:	81 e0       	ldi	r24, 0x01	; 1
    14e8:	90 e0       	ldi	r25, 0x00	; 0
    14ea:	9e 83       	std	Y+6, r25	; 0x06
    14ec:	8d 83       	std	Y+5, r24	; 0x05
    14ee:	3f c0       	rjmp	.+126    	; 0x156e <lcd_init+0xe4>
	else if (__tmp > 65535)
    14f0:	6f 81       	ldd	r22, Y+7	; 0x07
    14f2:	78 85       	ldd	r23, Y+8	; 0x08
    14f4:	89 85       	ldd	r24, Y+9	; 0x09
    14f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    14f8:	20 e0       	ldi	r18, 0x00	; 0
    14fa:	3f ef       	ldi	r19, 0xFF	; 255
    14fc:	4f e7       	ldi	r20, 0x7F	; 127
    14fe:	57 e4       	ldi	r21, 0x47	; 71
    1500:	0e 94 fe 27 	call	0x4ffc	; 0x4ffc <__gtsf2>
    1504:	18 16       	cp	r1, r24
    1506:	4c f5       	brge	.+82     	; 0x155a <lcd_init+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1508:	6b 85       	ldd	r22, Y+11	; 0x0b
    150a:	7c 85       	ldd	r23, Y+12	; 0x0c
    150c:	8d 85       	ldd	r24, Y+13	; 0x0d
    150e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1510:	20 e0       	ldi	r18, 0x00	; 0
    1512:	30 e0       	ldi	r19, 0x00	; 0
    1514:	40 e2       	ldi	r20, 0x20	; 32
    1516:	51 e4       	ldi	r21, 0x41	; 65
    1518:	0e 94 58 26 	call	0x4cb0	; 0x4cb0 <__mulsf3>
    151c:	dc 01       	movw	r26, r24
    151e:	cb 01       	movw	r24, r22
    1520:	bc 01       	movw	r22, r24
    1522:	cd 01       	movw	r24, r26
    1524:	0e 94 82 24 	call	0x4904	; 0x4904 <__fixunssfsi>
    1528:	dc 01       	movw	r26, r24
    152a:	cb 01       	movw	r24, r22
    152c:	9e 83       	std	Y+6, r25	; 0x06
    152e:	8d 83       	std	Y+5, r24	; 0x05
    1530:	0f c0       	rjmp	.+30     	; 0x1550 <lcd_init+0xc6>
    1532:	84 e1       	ldi	r24, 0x14	; 20
    1534:	91 e0       	ldi	r25, 0x01	; 1
    1536:	9c 83       	std	Y+4, r25	; 0x04
    1538:	8b 83       	std	Y+3, r24	; 0x03
    153a:	8b 81       	ldd	r24, Y+3	; 0x03
    153c:	9c 81       	ldd	r25, Y+4	; 0x04
    153e:	01 97       	sbiw	r24, 0x01	; 1
    1540:	f1 f7       	brne	.-4      	; 0x153e <lcd_init+0xb4>
    1542:	9c 83       	std	Y+4, r25	; 0x04
    1544:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1546:	8d 81       	ldd	r24, Y+5	; 0x05
    1548:	9e 81       	ldd	r25, Y+6	; 0x06
    154a:	01 97       	sbiw	r24, 0x01	; 1
    154c:	9e 83       	std	Y+6, r25	; 0x06
    154e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1550:	8d 81       	ldd	r24, Y+5	; 0x05
    1552:	9e 81       	ldd	r25, Y+6	; 0x06
    1554:	00 97       	sbiw	r24, 0x00	; 0
    1556:	69 f7       	brne	.-38     	; 0x1532 <lcd_init+0xa8>
    1558:	14 c0       	rjmp	.+40     	; 0x1582 <lcd_init+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    155a:	6f 81       	ldd	r22, Y+7	; 0x07
    155c:	78 85       	ldd	r23, Y+8	; 0x08
    155e:	89 85       	ldd	r24, Y+9	; 0x09
    1560:	9a 85       	ldd	r25, Y+10	; 0x0a
    1562:	0e 94 82 24 	call	0x4904	; 0x4904 <__fixunssfsi>
    1566:	dc 01       	movw	r26, r24
    1568:	cb 01       	movw	r24, r22
    156a:	9e 83       	std	Y+6, r25	; 0x06
    156c:	8d 83       	std	Y+5, r24	; 0x05
    156e:	8d 81       	ldd	r24, Y+5	; 0x05
    1570:	9e 81       	ldd	r25, Y+6	; 0x06
    1572:	9a 83       	std	Y+2, r25	; 0x02
    1574:	89 83       	std	Y+1, r24	; 0x01
    1576:	89 81       	ldd	r24, Y+1	; 0x01
    1578:	9a 81       	ldd	r25, Y+2	; 0x02
    157a:	01 97       	sbiw	r24, 0x01	; 1
    157c:	f1 f7       	brne	.-4      	; 0x157a <lcd_init+0xf0>
    157e:	9a 83       	std	Y+2, r25	; 0x02
    1580:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

	lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
    1582:	88 e2       	ldi	r24, 0x28	; 40
    1584:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <lcd_wr_command>
	lcd_wr_command(0x01);
    1588:	81 e0       	ldi	r24, 0x01	; 1
    158a:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <lcd_wr_command>
	lcd_wr_command(0x06);
    158e:	86 e0       	ldi	r24, 0x06	; 6
    1590:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <lcd_wr_command>
	lcd_wr_command(0x0E);
    1594:	8e e0       	ldi	r24, 0x0E	; 14
    1596:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <lcd_wr_command>
	lcd_wr_command(0x80);
    159a:	80 e8       	ldi	r24, 0x80	; 128
    159c:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <lcd_wr_command>
		
}
    15a0:	2e 96       	adiw	r28, 0x0e	; 14
    15a2:	0f b6       	in	r0, 0x3f	; 63
    15a4:	f8 94       	cli
    15a6:	de bf       	out	0x3e, r29	; 62
    15a8:	0f be       	out	0x3f, r0	; 63
    15aa:	cd bf       	out	0x3d, r28	; 61
    15ac:	cf 91       	pop	r28
    15ae:	df 91       	pop	r29
    15b0:	08 95       	ret

000015b2 <lcd_wr_command>:

	 
/*****Function to Write Command on LCD*****/
void lcd_wr_command(unsigned char cmd)
{
    15b2:	df 93       	push	r29
    15b4:	cf 93       	push	r28
    15b6:	cd b7       	in	r28, 0x3d	; 61
    15b8:	de b7       	in	r29, 0x3e	; 62
    15ba:	6e 97       	sbiw	r28, 0x1e	; 30
    15bc:	0f b6       	in	r0, 0x3f	; 63
    15be:	f8 94       	cli
    15c0:	de bf       	out	0x3e, r29	; 62
    15c2:	0f be       	out	0x3f, r0	; 63
    15c4:	cd bf       	out	0x3d, r28	; 61
    15c6:	8e 8f       	std	Y+30, r24	; 0x1e
	unsigned char temp;
	temp = cmd;
    15c8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    15ca:	8d 8f       	std	Y+29, r24	; 0x1d
	temp = temp & 0xF0;
    15cc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    15ce:	80 7f       	andi	r24, 0xF0	; 240
    15d0:	8d 8f       	std	Y+29, r24	; 0x1d
	lcd_port &= 0x0F;
    15d2:	a8 e2       	ldi	r26, 0x28	; 40
    15d4:	b0 e0       	ldi	r27, 0x00	; 0
    15d6:	e8 e2       	ldi	r30, 0x28	; 40
    15d8:	f0 e0       	ldi	r31, 0x00	; 0
    15da:	80 81       	ld	r24, Z
    15dc:	8f 70       	andi	r24, 0x0F	; 15
    15de:	8c 93       	st	X, r24
	lcd_port |= temp;
    15e0:	a8 e2       	ldi	r26, 0x28	; 40
    15e2:	b0 e0       	ldi	r27, 0x00	; 0
    15e4:	e8 e2       	ldi	r30, 0x28	; 40
    15e6:	f0 e0       	ldi	r31, 0x00	; 0
    15e8:	90 81       	ld	r25, Z
    15ea:	8d 8d       	ldd	r24, Y+29	; 0x1d
    15ec:	89 2b       	or	r24, r25
    15ee:	8c 93       	st	X, r24
	cbit(lcd_port,RS);
    15f0:	a8 e2       	ldi	r26, 0x28	; 40
    15f2:	b0 e0       	ldi	r27, 0x00	; 0
    15f4:	e8 e2       	ldi	r30, 0x28	; 40
    15f6:	f0 e0       	ldi	r31, 0x00	; 0
    15f8:	80 81       	ld	r24, Z
    15fa:	8e 7f       	andi	r24, 0xFE	; 254
    15fc:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
    15fe:	a8 e2       	ldi	r26, 0x28	; 40
    1600:	b0 e0       	ldi	r27, 0x00	; 0
    1602:	e8 e2       	ldi	r30, 0x28	; 40
    1604:	f0 e0       	ldi	r31, 0x00	; 0
    1606:	80 81       	ld	r24, Z
    1608:	8d 7f       	andi	r24, 0xFD	; 253
    160a:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
    160c:	a8 e2       	ldi	r26, 0x28	; 40
    160e:	b0 e0       	ldi	r27, 0x00	; 0
    1610:	e8 e2       	ldi	r30, 0x28	; 40
    1612:	f0 e0       	ldi	r31, 0x00	; 0
    1614:	80 81       	ld	r24, Z
    1616:	84 60       	ori	r24, 0x04	; 4
    1618:	8c 93       	st	X, r24
    161a:	80 e0       	ldi	r24, 0x00	; 0
    161c:	90 e0       	ldi	r25, 0x00	; 0
    161e:	a0 ea       	ldi	r26, 0xA0	; 160
    1620:	b0 e4       	ldi	r27, 0x40	; 64
    1622:	89 8f       	std	Y+25, r24	; 0x19
    1624:	9a 8f       	std	Y+26, r25	; 0x1a
    1626:	ab 8f       	std	Y+27, r26	; 0x1b
    1628:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    162a:	69 8d       	ldd	r22, Y+25	; 0x19
    162c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    162e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1630:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1632:	2d ec       	ldi	r18, 0xCD	; 205
    1634:	3c ec       	ldi	r19, 0xCC	; 204
    1636:	4c e2       	ldi	r20, 0x2C	; 44
    1638:	55 e4       	ldi	r21, 0x45	; 69
    163a:	0e 94 58 26 	call	0x4cb0	; 0x4cb0 <__mulsf3>
    163e:	dc 01       	movw	r26, r24
    1640:	cb 01       	movw	r24, r22
    1642:	8d 8b       	std	Y+21, r24	; 0x15
    1644:	9e 8b       	std	Y+22, r25	; 0x16
    1646:	af 8b       	std	Y+23, r26	; 0x17
    1648:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    164a:	6d 89       	ldd	r22, Y+21	; 0x15
    164c:	7e 89       	ldd	r23, Y+22	; 0x16
    164e:	8f 89       	ldd	r24, Y+23	; 0x17
    1650:	98 8d       	ldd	r25, Y+24	; 0x18
    1652:	20 e0       	ldi	r18, 0x00	; 0
    1654:	30 e0       	ldi	r19, 0x00	; 0
    1656:	40 e8       	ldi	r20, 0x80	; 128
    1658:	5f e3       	ldi	r21, 0x3F	; 63
    165a:	0e 94 5e 28 	call	0x50bc	; 0x50bc <__ltsf2>
    165e:	88 23       	and	r24, r24
    1660:	2c f4       	brge	.+10     	; 0x166c <lcd_wr_command+0xba>
		__ticks = 1;
    1662:	81 e0       	ldi	r24, 0x01	; 1
    1664:	90 e0       	ldi	r25, 0x00	; 0
    1666:	9c 8b       	std	Y+20, r25	; 0x14
    1668:	8b 8b       	std	Y+19, r24	; 0x13
    166a:	3f c0       	rjmp	.+126    	; 0x16ea <lcd_wr_command+0x138>
	else if (__tmp > 65535)
    166c:	6d 89       	ldd	r22, Y+21	; 0x15
    166e:	7e 89       	ldd	r23, Y+22	; 0x16
    1670:	8f 89       	ldd	r24, Y+23	; 0x17
    1672:	98 8d       	ldd	r25, Y+24	; 0x18
    1674:	20 e0       	ldi	r18, 0x00	; 0
    1676:	3f ef       	ldi	r19, 0xFF	; 255
    1678:	4f e7       	ldi	r20, 0x7F	; 127
    167a:	57 e4       	ldi	r21, 0x47	; 71
    167c:	0e 94 fe 27 	call	0x4ffc	; 0x4ffc <__gtsf2>
    1680:	18 16       	cp	r1, r24
    1682:	4c f5       	brge	.+82     	; 0x16d6 <lcd_wr_command+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1684:	69 8d       	ldd	r22, Y+25	; 0x19
    1686:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1688:	8b 8d       	ldd	r24, Y+27	; 0x1b
    168a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    168c:	20 e0       	ldi	r18, 0x00	; 0
    168e:	30 e0       	ldi	r19, 0x00	; 0
    1690:	40 e2       	ldi	r20, 0x20	; 32
    1692:	51 e4       	ldi	r21, 0x41	; 65
    1694:	0e 94 58 26 	call	0x4cb0	; 0x4cb0 <__mulsf3>
    1698:	dc 01       	movw	r26, r24
    169a:	cb 01       	movw	r24, r22
    169c:	bc 01       	movw	r22, r24
    169e:	cd 01       	movw	r24, r26
    16a0:	0e 94 82 24 	call	0x4904	; 0x4904 <__fixunssfsi>
    16a4:	dc 01       	movw	r26, r24
    16a6:	cb 01       	movw	r24, r22
    16a8:	9c 8b       	std	Y+20, r25	; 0x14
    16aa:	8b 8b       	std	Y+19, r24	; 0x13
    16ac:	0f c0       	rjmp	.+30     	; 0x16cc <lcd_wr_command+0x11a>
    16ae:	84 e1       	ldi	r24, 0x14	; 20
    16b0:	91 e0       	ldi	r25, 0x01	; 1
    16b2:	9a 8b       	std	Y+18, r25	; 0x12
    16b4:	89 8b       	std	Y+17, r24	; 0x11
    16b6:	89 89       	ldd	r24, Y+17	; 0x11
    16b8:	9a 89       	ldd	r25, Y+18	; 0x12
    16ba:	01 97       	sbiw	r24, 0x01	; 1
    16bc:	f1 f7       	brne	.-4      	; 0x16ba <lcd_wr_command+0x108>
    16be:	9a 8b       	std	Y+18, r25	; 0x12
    16c0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16c2:	8b 89       	ldd	r24, Y+19	; 0x13
    16c4:	9c 89       	ldd	r25, Y+20	; 0x14
    16c6:	01 97       	sbiw	r24, 0x01	; 1
    16c8:	9c 8b       	std	Y+20, r25	; 0x14
    16ca:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16cc:	8b 89       	ldd	r24, Y+19	; 0x13
    16ce:	9c 89       	ldd	r25, Y+20	; 0x14
    16d0:	00 97       	sbiw	r24, 0x00	; 0
    16d2:	69 f7       	brne	.-38     	; 0x16ae <lcd_wr_command+0xfc>
    16d4:	14 c0       	rjmp	.+40     	; 0x16fe <lcd_wr_command+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16d6:	6d 89       	ldd	r22, Y+21	; 0x15
    16d8:	7e 89       	ldd	r23, Y+22	; 0x16
    16da:	8f 89       	ldd	r24, Y+23	; 0x17
    16dc:	98 8d       	ldd	r25, Y+24	; 0x18
    16de:	0e 94 82 24 	call	0x4904	; 0x4904 <__fixunssfsi>
    16e2:	dc 01       	movw	r26, r24
    16e4:	cb 01       	movw	r24, r22
    16e6:	9c 8b       	std	Y+20, r25	; 0x14
    16e8:	8b 8b       	std	Y+19, r24	; 0x13
    16ea:	8b 89       	ldd	r24, Y+19	; 0x13
    16ec:	9c 89       	ldd	r25, Y+20	; 0x14
    16ee:	98 8b       	std	Y+16, r25	; 0x10
    16f0:	8f 87       	std	Y+15, r24	; 0x0f
    16f2:	8f 85       	ldd	r24, Y+15	; 0x0f
    16f4:	98 89       	ldd	r25, Y+16	; 0x10
    16f6:	01 97       	sbiw	r24, 0x01	; 1
    16f8:	f1 f7       	brne	.-4      	; 0x16f6 <lcd_wr_command+0x144>
    16fa:	98 8b       	std	Y+16, r25	; 0x10
    16fc:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	cbit(lcd_port,EN);
    16fe:	a8 e2       	ldi	r26, 0x28	; 40
    1700:	b0 e0       	ldi	r27, 0x00	; 0
    1702:	e8 e2       	ldi	r30, 0x28	; 40
    1704:	f0 e0       	ldi	r31, 0x00	; 0
    1706:	80 81       	ld	r24, Z
    1708:	8b 7f       	andi	r24, 0xFB	; 251
    170a:	8c 93       	st	X, r24
	
	cmd = cmd & 0x0F;
    170c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    170e:	8f 70       	andi	r24, 0x0F	; 15
    1710:	8e 8f       	std	Y+30, r24	; 0x1e
	cmd = cmd<<4;
    1712:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1714:	82 95       	swap	r24
    1716:	80 7f       	andi	r24, 0xF0	; 240
    1718:	8e 8f       	std	Y+30, r24	; 0x1e
	lcd_port &= 0x0F;
    171a:	a8 e2       	ldi	r26, 0x28	; 40
    171c:	b0 e0       	ldi	r27, 0x00	; 0
    171e:	e8 e2       	ldi	r30, 0x28	; 40
    1720:	f0 e0       	ldi	r31, 0x00	; 0
    1722:	80 81       	ld	r24, Z
    1724:	8f 70       	andi	r24, 0x0F	; 15
    1726:	8c 93       	st	X, r24
	lcd_port |= cmd;
    1728:	a8 e2       	ldi	r26, 0x28	; 40
    172a:	b0 e0       	ldi	r27, 0x00	; 0
    172c:	e8 e2       	ldi	r30, 0x28	; 40
    172e:	f0 e0       	ldi	r31, 0x00	; 0
    1730:	90 81       	ld	r25, Z
    1732:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1734:	89 2b       	or	r24, r25
    1736:	8c 93       	st	X, r24
	cbit(lcd_port,RS);
    1738:	a8 e2       	ldi	r26, 0x28	; 40
    173a:	b0 e0       	ldi	r27, 0x00	; 0
    173c:	e8 e2       	ldi	r30, 0x28	; 40
    173e:	f0 e0       	ldi	r31, 0x00	; 0
    1740:	80 81       	ld	r24, Z
    1742:	8e 7f       	andi	r24, 0xFE	; 254
    1744:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
    1746:	a8 e2       	ldi	r26, 0x28	; 40
    1748:	b0 e0       	ldi	r27, 0x00	; 0
    174a:	e8 e2       	ldi	r30, 0x28	; 40
    174c:	f0 e0       	ldi	r31, 0x00	; 0
    174e:	80 81       	ld	r24, Z
    1750:	8d 7f       	andi	r24, 0xFD	; 253
    1752:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
    1754:	a8 e2       	ldi	r26, 0x28	; 40
    1756:	b0 e0       	ldi	r27, 0x00	; 0
    1758:	e8 e2       	ldi	r30, 0x28	; 40
    175a:	f0 e0       	ldi	r31, 0x00	; 0
    175c:	80 81       	ld	r24, Z
    175e:	84 60       	ori	r24, 0x04	; 4
    1760:	8c 93       	st	X, r24
    1762:	80 e0       	ldi	r24, 0x00	; 0
    1764:	90 e0       	ldi	r25, 0x00	; 0
    1766:	a0 ea       	ldi	r26, 0xA0	; 160
    1768:	b0 e4       	ldi	r27, 0x40	; 64
    176a:	8b 87       	std	Y+11, r24	; 0x0b
    176c:	9c 87       	std	Y+12, r25	; 0x0c
    176e:	ad 87       	std	Y+13, r26	; 0x0d
    1770:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1772:	6b 85       	ldd	r22, Y+11	; 0x0b
    1774:	7c 85       	ldd	r23, Y+12	; 0x0c
    1776:	8d 85       	ldd	r24, Y+13	; 0x0d
    1778:	9e 85       	ldd	r25, Y+14	; 0x0e
    177a:	2d ec       	ldi	r18, 0xCD	; 205
    177c:	3c ec       	ldi	r19, 0xCC	; 204
    177e:	4c e2       	ldi	r20, 0x2C	; 44
    1780:	55 e4       	ldi	r21, 0x45	; 69
    1782:	0e 94 58 26 	call	0x4cb0	; 0x4cb0 <__mulsf3>
    1786:	dc 01       	movw	r26, r24
    1788:	cb 01       	movw	r24, r22
    178a:	8f 83       	std	Y+7, r24	; 0x07
    178c:	98 87       	std	Y+8, r25	; 0x08
    178e:	a9 87       	std	Y+9, r26	; 0x09
    1790:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1792:	6f 81       	ldd	r22, Y+7	; 0x07
    1794:	78 85       	ldd	r23, Y+8	; 0x08
    1796:	89 85       	ldd	r24, Y+9	; 0x09
    1798:	9a 85       	ldd	r25, Y+10	; 0x0a
    179a:	20 e0       	ldi	r18, 0x00	; 0
    179c:	30 e0       	ldi	r19, 0x00	; 0
    179e:	40 e8       	ldi	r20, 0x80	; 128
    17a0:	5f e3       	ldi	r21, 0x3F	; 63
    17a2:	0e 94 5e 28 	call	0x50bc	; 0x50bc <__ltsf2>
    17a6:	88 23       	and	r24, r24
    17a8:	2c f4       	brge	.+10     	; 0x17b4 <lcd_wr_command+0x202>
		__ticks = 1;
    17aa:	81 e0       	ldi	r24, 0x01	; 1
    17ac:	90 e0       	ldi	r25, 0x00	; 0
    17ae:	9e 83       	std	Y+6, r25	; 0x06
    17b0:	8d 83       	std	Y+5, r24	; 0x05
    17b2:	3f c0       	rjmp	.+126    	; 0x1832 <lcd_wr_command+0x280>
	else if (__tmp > 65535)
    17b4:	6f 81       	ldd	r22, Y+7	; 0x07
    17b6:	78 85       	ldd	r23, Y+8	; 0x08
    17b8:	89 85       	ldd	r24, Y+9	; 0x09
    17ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    17bc:	20 e0       	ldi	r18, 0x00	; 0
    17be:	3f ef       	ldi	r19, 0xFF	; 255
    17c0:	4f e7       	ldi	r20, 0x7F	; 127
    17c2:	57 e4       	ldi	r21, 0x47	; 71
    17c4:	0e 94 fe 27 	call	0x4ffc	; 0x4ffc <__gtsf2>
    17c8:	18 16       	cp	r1, r24
    17ca:	4c f5       	brge	.+82     	; 0x181e <lcd_wr_command+0x26c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    17ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    17d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    17d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    17d4:	20 e0       	ldi	r18, 0x00	; 0
    17d6:	30 e0       	ldi	r19, 0x00	; 0
    17d8:	40 e2       	ldi	r20, 0x20	; 32
    17da:	51 e4       	ldi	r21, 0x41	; 65
    17dc:	0e 94 58 26 	call	0x4cb0	; 0x4cb0 <__mulsf3>
    17e0:	dc 01       	movw	r26, r24
    17e2:	cb 01       	movw	r24, r22
    17e4:	bc 01       	movw	r22, r24
    17e6:	cd 01       	movw	r24, r26
    17e8:	0e 94 82 24 	call	0x4904	; 0x4904 <__fixunssfsi>
    17ec:	dc 01       	movw	r26, r24
    17ee:	cb 01       	movw	r24, r22
    17f0:	9e 83       	std	Y+6, r25	; 0x06
    17f2:	8d 83       	std	Y+5, r24	; 0x05
    17f4:	0f c0       	rjmp	.+30     	; 0x1814 <lcd_wr_command+0x262>
    17f6:	84 e1       	ldi	r24, 0x14	; 20
    17f8:	91 e0       	ldi	r25, 0x01	; 1
    17fa:	9c 83       	std	Y+4, r25	; 0x04
    17fc:	8b 83       	std	Y+3, r24	; 0x03
    17fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1800:	9c 81       	ldd	r25, Y+4	; 0x04
    1802:	01 97       	sbiw	r24, 0x01	; 1
    1804:	f1 f7       	brne	.-4      	; 0x1802 <lcd_wr_command+0x250>
    1806:	9c 83       	std	Y+4, r25	; 0x04
    1808:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    180a:	8d 81       	ldd	r24, Y+5	; 0x05
    180c:	9e 81       	ldd	r25, Y+6	; 0x06
    180e:	01 97       	sbiw	r24, 0x01	; 1
    1810:	9e 83       	std	Y+6, r25	; 0x06
    1812:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1814:	8d 81       	ldd	r24, Y+5	; 0x05
    1816:	9e 81       	ldd	r25, Y+6	; 0x06
    1818:	00 97       	sbiw	r24, 0x00	; 0
    181a:	69 f7       	brne	.-38     	; 0x17f6 <lcd_wr_command+0x244>
    181c:	14 c0       	rjmp	.+40     	; 0x1846 <lcd_wr_command+0x294>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    181e:	6f 81       	ldd	r22, Y+7	; 0x07
    1820:	78 85       	ldd	r23, Y+8	; 0x08
    1822:	89 85       	ldd	r24, Y+9	; 0x09
    1824:	9a 85       	ldd	r25, Y+10	; 0x0a
    1826:	0e 94 82 24 	call	0x4904	; 0x4904 <__fixunssfsi>
    182a:	dc 01       	movw	r26, r24
    182c:	cb 01       	movw	r24, r22
    182e:	9e 83       	std	Y+6, r25	; 0x06
    1830:	8d 83       	std	Y+5, r24	; 0x05
    1832:	8d 81       	ldd	r24, Y+5	; 0x05
    1834:	9e 81       	ldd	r25, Y+6	; 0x06
    1836:	9a 83       	std	Y+2, r25	; 0x02
    1838:	89 83       	std	Y+1, r24	; 0x01
    183a:	89 81       	ldd	r24, Y+1	; 0x01
    183c:	9a 81       	ldd	r25, Y+2	; 0x02
    183e:	01 97       	sbiw	r24, 0x01	; 1
    1840:	f1 f7       	brne	.-4      	; 0x183e <lcd_wr_command+0x28c>
    1842:	9a 83       	std	Y+2, r25	; 0x02
    1844:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	cbit(lcd_port,EN);
    1846:	a8 e2       	ldi	r26, 0x28	; 40
    1848:	b0 e0       	ldi	r27, 0x00	; 0
    184a:	e8 e2       	ldi	r30, 0x28	; 40
    184c:	f0 e0       	ldi	r31, 0x00	; 0
    184e:	80 81       	ld	r24, Z
    1850:	8b 7f       	andi	r24, 0xFB	; 251
    1852:	8c 93       	st	X, r24
}
    1854:	6e 96       	adiw	r28, 0x1e	; 30
    1856:	0f b6       	in	r0, 0x3f	; 63
    1858:	f8 94       	cli
    185a:	de bf       	out	0x3e, r29	; 62
    185c:	0f be       	out	0x3f, r0	; 63
    185e:	cd bf       	out	0x3d, r28	; 61
    1860:	cf 91       	pop	r28
    1862:	df 91       	pop	r29
    1864:	08 95       	ret

00001866 <lcd_wr_char>:

/*****Function to Write Data on LCD*****/
void lcd_wr_char(char letter)
{
    1866:	df 93       	push	r29
    1868:	cf 93       	push	r28
    186a:	cd b7       	in	r28, 0x3d	; 61
    186c:	de b7       	in	r29, 0x3e	; 62
    186e:	6e 97       	sbiw	r28, 0x1e	; 30
    1870:	0f b6       	in	r0, 0x3f	; 63
    1872:	f8 94       	cli
    1874:	de bf       	out	0x3e, r29	; 62
    1876:	0f be       	out	0x3f, r0	; 63
    1878:	cd bf       	out	0x3d, r28	; 61
    187a:	8e 8f       	std	Y+30, r24	; 0x1e
	char temp;
	temp = letter;
    187c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    187e:	8d 8f       	std	Y+29, r24	; 0x1d
	temp = (temp & 0xF0);
    1880:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1882:	80 7f       	andi	r24, 0xF0	; 240
    1884:	8d 8f       	std	Y+29, r24	; 0x1d
	lcd_port &= 0x0F;
    1886:	a8 e2       	ldi	r26, 0x28	; 40
    1888:	b0 e0       	ldi	r27, 0x00	; 0
    188a:	e8 e2       	ldi	r30, 0x28	; 40
    188c:	f0 e0       	ldi	r31, 0x00	; 0
    188e:	80 81       	ld	r24, Z
    1890:	8f 70       	andi	r24, 0x0F	; 15
    1892:	8c 93       	st	X, r24
	lcd_port |= temp;
    1894:	a8 e2       	ldi	r26, 0x28	; 40
    1896:	b0 e0       	ldi	r27, 0x00	; 0
    1898:	e8 e2       	ldi	r30, 0x28	; 40
    189a:	f0 e0       	ldi	r31, 0x00	; 0
    189c:	90 81       	ld	r25, Z
    189e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    18a0:	89 2b       	or	r24, r25
    18a2:	8c 93       	st	X, r24
	sbit(lcd_port,RS);
    18a4:	a8 e2       	ldi	r26, 0x28	; 40
    18a6:	b0 e0       	ldi	r27, 0x00	; 0
    18a8:	e8 e2       	ldi	r30, 0x28	; 40
    18aa:	f0 e0       	ldi	r31, 0x00	; 0
    18ac:	80 81       	ld	r24, Z
    18ae:	81 60       	ori	r24, 0x01	; 1
    18b0:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
    18b2:	a8 e2       	ldi	r26, 0x28	; 40
    18b4:	b0 e0       	ldi	r27, 0x00	; 0
    18b6:	e8 e2       	ldi	r30, 0x28	; 40
    18b8:	f0 e0       	ldi	r31, 0x00	; 0
    18ba:	80 81       	ld	r24, Z
    18bc:	8d 7f       	andi	r24, 0xFD	; 253
    18be:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
    18c0:	a8 e2       	ldi	r26, 0x28	; 40
    18c2:	b0 e0       	ldi	r27, 0x00	; 0
    18c4:	e8 e2       	ldi	r30, 0x28	; 40
    18c6:	f0 e0       	ldi	r31, 0x00	; 0
    18c8:	80 81       	ld	r24, Z
    18ca:	84 60       	ori	r24, 0x04	; 4
    18cc:	8c 93       	st	X, r24
    18ce:	80 e0       	ldi	r24, 0x00	; 0
    18d0:	90 e0       	ldi	r25, 0x00	; 0
    18d2:	a0 ea       	ldi	r26, 0xA0	; 160
    18d4:	b0 e4       	ldi	r27, 0x40	; 64
    18d6:	89 8f       	std	Y+25, r24	; 0x19
    18d8:	9a 8f       	std	Y+26, r25	; 0x1a
    18da:	ab 8f       	std	Y+27, r26	; 0x1b
    18dc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18de:	69 8d       	ldd	r22, Y+25	; 0x19
    18e0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18e2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18e4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18e6:	2d ec       	ldi	r18, 0xCD	; 205
    18e8:	3c ec       	ldi	r19, 0xCC	; 204
    18ea:	4c e2       	ldi	r20, 0x2C	; 44
    18ec:	55 e4       	ldi	r21, 0x45	; 69
    18ee:	0e 94 58 26 	call	0x4cb0	; 0x4cb0 <__mulsf3>
    18f2:	dc 01       	movw	r26, r24
    18f4:	cb 01       	movw	r24, r22
    18f6:	8d 8b       	std	Y+21, r24	; 0x15
    18f8:	9e 8b       	std	Y+22, r25	; 0x16
    18fa:	af 8b       	std	Y+23, r26	; 0x17
    18fc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    18fe:	6d 89       	ldd	r22, Y+21	; 0x15
    1900:	7e 89       	ldd	r23, Y+22	; 0x16
    1902:	8f 89       	ldd	r24, Y+23	; 0x17
    1904:	98 8d       	ldd	r25, Y+24	; 0x18
    1906:	20 e0       	ldi	r18, 0x00	; 0
    1908:	30 e0       	ldi	r19, 0x00	; 0
    190a:	40 e8       	ldi	r20, 0x80	; 128
    190c:	5f e3       	ldi	r21, 0x3F	; 63
    190e:	0e 94 5e 28 	call	0x50bc	; 0x50bc <__ltsf2>
    1912:	88 23       	and	r24, r24
    1914:	2c f4       	brge	.+10     	; 0x1920 <lcd_wr_char+0xba>
		__ticks = 1;
    1916:	81 e0       	ldi	r24, 0x01	; 1
    1918:	90 e0       	ldi	r25, 0x00	; 0
    191a:	9c 8b       	std	Y+20, r25	; 0x14
    191c:	8b 8b       	std	Y+19, r24	; 0x13
    191e:	3f c0       	rjmp	.+126    	; 0x199e <lcd_wr_char+0x138>
	else if (__tmp > 65535)
    1920:	6d 89       	ldd	r22, Y+21	; 0x15
    1922:	7e 89       	ldd	r23, Y+22	; 0x16
    1924:	8f 89       	ldd	r24, Y+23	; 0x17
    1926:	98 8d       	ldd	r25, Y+24	; 0x18
    1928:	20 e0       	ldi	r18, 0x00	; 0
    192a:	3f ef       	ldi	r19, 0xFF	; 255
    192c:	4f e7       	ldi	r20, 0x7F	; 127
    192e:	57 e4       	ldi	r21, 0x47	; 71
    1930:	0e 94 fe 27 	call	0x4ffc	; 0x4ffc <__gtsf2>
    1934:	18 16       	cp	r1, r24
    1936:	4c f5       	brge	.+82     	; 0x198a <lcd_wr_char+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1938:	69 8d       	ldd	r22, Y+25	; 0x19
    193a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    193c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    193e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1940:	20 e0       	ldi	r18, 0x00	; 0
    1942:	30 e0       	ldi	r19, 0x00	; 0
    1944:	40 e2       	ldi	r20, 0x20	; 32
    1946:	51 e4       	ldi	r21, 0x41	; 65
    1948:	0e 94 58 26 	call	0x4cb0	; 0x4cb0 <__mulsf3>
    194c:	dc 01       	movw	r26, r24
    194e:	cb 01       	movw	r24, r22
    1950:	bc 01       	movw	r22, r24
    1952:	cd 01       	movw	r24, r26
    1954:	0e 94 82 24 	call	0x4904	; 0x4904 <__fixunssfsi>
    1958:	dc 01       	movw	r26, r24
    195a:	cb 01       	movw	r24, r22
    195c:	9c 8b       	std	Y+20, r25	; 0x14
    195e:	8b 8b       	std	Y+19, r24	; 0x13
    1960:	0f c0       	rjmp	.+30     	; 0x1980 <lcd_wr_char+0x11a>
    1962:	84 e1       	ldi	r24, 0x14	; 20
    1964:	91 e0       	ldi	r25, 0x01	; 1
    1966:	9a 8b       	std	Y+18, r25	; 0x12
    1968:	89 8b       	std	Y+17, r24	; 0x11
    196a:	89 89       	ldd	r24, Y+17	; 0x11
    196c:	9a 89       	ldd	r25, Y+18	; 0x12
    196e:	01 97       	sbiw	r24, 0x01	; 1
    1970:	f1 f7       	brne	.-4      	; 0x196e <lcd_wr_char+0x108>
    1972:	9a 8b       	std	Y+18, r25	; 0x12
    1974:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1976:	8b 89       	ldd	r24, Y+19	; 0x13
    1978:	9c 89       	ldd	r25, Y+20	; 0x14
    197a:	01 97       	sbiw	r24, 0x01	; 1
    197c:	9c 8b       	std	Y+20, r25	; 0x14
    197e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1980:	8b 89       	ldd	r24, Y+19	; 0x13
    1982:	9c 89       	ldd	r25, Y+20	; 0x14
    1984:	00 97       	sbiw	r24, 0x00	; 0
    1986:	69 f7       	brne	.-38     	; 0x1962 <lcd_wr_char+0xfc>
    1988:	14 c0       	rjmp	.+40     	; 0x19b2 <lcd_wr_char+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    198a:	6d 89       	ldd	r22, Y+21	; 0x15
    198c:	7e 89       	ldd	r23, Y+22	; 0x16
    198e:	8f 89       	ldd	r24, Y+23	; 0x17
    1990:	98 8d       	ldd	r25, Y+24	; 0x18
    1992:	0e 94 82 24 	call	0x4904	; 0x4904 <__fixunssfsi>
    1996:	dc 01       	movw	r26, r24
    1998:	cb 01       	movw	r24, r22
    199a:	9c 8b       	std	Y+20, r25	; 0x14
    199c:	8b 8b       	std	Y+19, r24	; 0x13
    199e:	8b 89       	ldd	r24, Y+19	; 0x13
    19a0:	9c 89       	ldd	r25, Y+20	; 0x14
    19a2:	98 8b       	std	Y+16, r25	; 0x10
    19a4:	8f 87       	std	Y+15, r24	; 0x0f
    19a6:	8f 85       	ldd	r24, Y+15	; 0x0f
    19a8:	98 89       	ldd	r25, Y+16	; 0x10
    19aa:	01 97       	sbiw	r24, 0x01	; 1
    19ac:	f1 f7       	brne	.-4      	; 0x19aa <lcd_wr_char+0x144>
    19ae:	98 8b       	std	Y+16, r25	; 0x10
    19b0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	cbit(lcd_port,EN);
    19b2:	a8 e2       	ldi	r26, 0x28	; 40
    19b4:	b0 e0       	ldi	r27, 0x00	; 0
    19b6:	e8 e2       	ldi	r30, 0x28	; 40
    19b8:	f0 e0       	ldi	r31, 0x00	; 0
    19ba:	80 81       	ld	r24, Z
    19bc:	8b 7f       	andi	r24, 0xFB	; 251
    19be:	8c 93       	st	X, r24

	letter = letter & 0x0F;
    19c0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    19c2:	8f 70       	andi	r24, 0x0F	; 15
    19c4:	8e 8f       	std	Y+30, r24	; 0x1e
	letter = letter<<4;
    19c6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    19c8:	82 95       	swap	r24
    19ca:	80 7f       	andi	r24, 0xF0	; 240
    19cc:	8e 8f       	std	Y+30, r24	; 0x1e
	lcd_port &= 0x0F;
    19ce:	a8 e2       	ldi	r26, 0x28	; 40
    19d0:	b0 e0       	ldi	r27, 0x00	; 0
    19d2:	e8 e2       	ldi	r30, 0x28	; 40
    19d4:	f0 e0       	ldi	r31, 0x00	; 0
    19d6:	80 81       	ld	r24, Z
    19d8:	8f 70       	andi	r24, 0x0F	; 15
    19da:	8c 93       	st	X, r24
	lcd_port |= letter;
    19dc:	a8 e2       	ldi	r26, 0x28	; 40
    19de:	b0 e0       	ldi	r27, 0x00	; 0
    19e0:	e8 e2       	ldi	r30, 0x28	; 40
    19e2:	f0 e0       	ldi	r31, 0x00	; 0
    19e4:	90 81       	ld	r25, Z
    19e6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    19e8:	89 2b       	or	r24, r25
    19ea:	8c 93       	st	X, r24
	sbit(lcd_port,RS);
    19ec:	a8 e2       	ldi	r26, 0x28	; 40
    19ee:	b0 e0       	ldi	r27, 0x00	; 0
    19f0:	e8 e2       	ldi	r30, 0x28	; 40
    19f2:	f0 e0       	ldi	r31, 0x00	; 0
    19f4:	80 81       	ld	r24, Z
    19f6:	81 60       	ori	r24, 0x01	; 1
    19f8:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
    19fa:	a8 e2       	ldi	r26, 0x28	; 40
    19fc:	b0 e0       	ldi	r27, 0x00	; 0
    19fe:	e8 e2       	ldi	r30, 0x28	; 40
    1a00:	f0 e0       	ldi	r31, 0x00	; 0
    1a02:	80 81       	ld	r24, Z
    1a04:	8d 7f       	andi	r24, 0xFD	; 253
    1a06:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
    1a08:	a8 e2       	ldi	r26, 0x28	; 40
    1a0a:	b0 e0       	ldi	r27, 0x00	; 0
    1a0c:	e8 e2       	ldi	r30, 0x28	; 40
    1a0e:	f0 e0       	ldi	r31, 0x00	; 0
    1a10:	80 81       	ld	r24, Z
    1a12:	84 60       	ori	r24, 0x04	; 4
    1a14:	8c 93       	st	X, r24
    1a16:	80 e0       	ldi	r24, 0x00	; 0
    1a18:	90 e0       	ldi	r25, 0x00	; 0
    1a1a:	a0 ea       	ldi	r26, 0xA0	; 160
    1a1c:	b0 e4       	ldi	r27, 0x40	; 64
    1a1e:	8b 87       	std	Y+11, r24	; 0x0b
    1a20:	9c 87       	std	Y+12, r25	; 0x0c
    1a22:	ad 87       	std	Y+13, r26	; 0x0d
    1a24:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a26:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a28:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a2a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a2c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a2e:	2d ec       	ldi	r18, 0xCD	; 205
    1a30:	3c ec       	ldi	r19, 0xCC	; 204
    1a32:	4c e2       	ldi	r20, 0x2C	; 44
    1a34:	55 e4       	ldi	r21, 0x45	; 69
    1a36:	0e 94 58 26 	call	0x4cb0	; 0x4cb0 <__mulsf3>
    1a3a:	dc 01       	movw	r26, r24
    1a3c:	cb 01       	movw	r24, r22
    1a3e:	8f 83       	std	Y+7, r24	; 0x07
    1a40:	98 87       	std	Y+8, r25	; 0x08
    1a42:	a9 87       	std	Y+9, r26	; 0x09
    1a44:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a46:	6f 81       	ldd	r22, Y+7	; 0x07
    1a48:	78 85       	ldd	r23, Y+8	; 0x08
    1a4a:	89 85       	ldd	r24, Y+9	; 0x09
    1a4c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a4e:	20 e0       	ldi	r18, 0x00	; 0
    1a50:	30 e0       	ldi	r19, 0x00	; 0
    1a52:	40 e8       	ldi	r20, 0x80	; 128
    1a54:	5f e3       	ldi	r21, 0x3F	; 63
    1a56:	0e 94 5e 28 	call	0x50bc	; 0x50bc <__ltsf2>
    1a5a:	88 23       	and	r24, r24
    1a5c:	2c f4       	brge	.+10     	; 0x1a68 <lcd_wr_char+0x202>
		__ticks = 1;
    1a5e:	81 e0       	ldi	r24, 0x01	; 1
    1a60:	90 e0       	ldi	r25, 0x00	; 0
    1a62:	9e 83       	std	Y+6, r25	; 0x06
    1a64:	8d 83       	std	Y+5, r24	; 0x05
    1a66:	3f c0       	rjmp	.+126    	; 0x1ae6 <lcd_wr_char+0x280>
	else if (__tmp > 65535)
    1a68:	6f 81       	ldd	r22, Y+7	; 0x07
    1a6a:	78 85       	ldd	r23, Y+8	; 0x08
    1a6c:	89 85       	ldd	r24, Y+9	; 0x09
    1a6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a70:	20 e0       	ldi	r18, 0x00	; 0
    1a72:	3f ef       	ldi	r19, 0xFF	; 255
    1a74:	4f e7       	ldi	r20, 0x7F	; 127
    1a76:	57 e4       	ldi	r21, 0x47	; 71
    1a78:	0e 94 fe 27 	call	0x4ffc	; 0x4ffc <__gtsf2>
    1a7c:	18 16       	cp	r1, r24
    1a7e:	4c f5       	brge	.+82     	; 0x1ad2 <lcd_wr_char+0x26c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a80:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a82:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a84:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a86:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a88:	20 e0       	ldi	r18, 0x00	; 0
    1a8a:	30 e0       	ldi	r19, 0x00	; 0
    1a8c:	40 e2       	ldi	r20, 0x20	; 32
    1a8e:	51 e4       	ldi	r21, 0x41	; 65
    1a90:	0e 94 58 26 	call	0x4cb0	; 0x4cb0 <__mulsf3>
    1a94:	dc 01       	movw	r26, r24
    1a96:	cb 01       	movw	r24, r22
    1a98:	bc 01       	movw	r22, r24
    1a9a:	cd 01       	movw	r24, r26
    1a9c:	0e 94 82 24 	call	0x4904	; 0x4904 <__fixunssfsi>
    1aa0:	dc 01       	movw	r26, r24
    1aa2:	cb 01       	movw	r24, r22
    1aa4:	9e 83       	std	Y+6, r25	; 0x06
    1aa6:	8d 83       	std	Y+5, r24	; 0x05
    1aa8:	0f c0       	rjmp	.+30     	; 0x1ac8 <lcd_wr_char+0x262>
    1aaa:	84 e1       	ldi	r24, 0x14	; 20
    1aac:	91 e0       	ldi	r25, 0x01	; 1
    1aae:	9c 83       	std	Y+4, r25	; 0x04
    1ab0:	8b 83       	std	Y+3, r24	; 0x03
    1ab2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ab6:	01 97       	sbiw	r24, 0x01	; 1
    1ab8:	f1 f7       	brne	.-4      	; 0x1ab6 <lcd_wr_char+0x250>
    1aba:	9c 83       	std	Y+4, r25	; 0x04
    1abc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1abe:	8d 81       	ldd	r24, Y+5	; 0x05
    1ac0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ac2:	01 97       	sbiw	r24, 0x01	; 1
    1ac4:	9e 83       	std	Y+6, r25	; 0x06
    1ac6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ac8:	8d 81       	ldd	r24, Y+5	; 0x05
    1aca:	9e 81       	ldd	r25, Y+6	; 0x06
    1acc:	00 97       	sbiw	r24, 0x00	; 0
    1ace:	69 f7       	brne	.-38     	; 0x1aaa <lcd_wr_char+0x244>
    1ad0:	14 c0       	rjmp	.+40     	; 0x1afa <lcd_wr_char+0x294>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ad2:	6f 81       	ldd	r22, Y+7	; 0x07
    1ad4:	78 85       	ldd	r23, Y+8	; 0x08
    1ad6:	89 85       	ldd	r24, Y+9	; 0x09
    1ad8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ada:	0e 94 82 24 	call	0x4904	; 0x4904 <__fixunssfsi>
    1ade:	dc 01       	movw	r26, r24
    1ae0:	cb 01       	movw	r24, r22
    1ae2:	9e 83       	std	Y+6, r25	; 0x06
    1ae4:	8d 83       	std	Y+5, r24	; 0x05
    1ae6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ae8:	9e 81       	ldd	r25, Y+6	; 0x06
    1aea:	9a 83       	std	Y+2, r25	; 0x02
    1aec:	89 83       	std	Y+1, r24	; 0x01
    1aee:	89 81       	ldd	r24, Y+1	; 0x01
    1af0:	9a 81       	ldd	r25, Y+2	; 0x02
    1af2:	01 97       	sbiw	r24, 0x01	; 1
    1af4:	f1 f7       	brne	.-4      	; 0x1af2 <lcd_wr_char+0x28c>
    1af6:	9a 83       	std	Y+2, r25	; 0x02
    1af8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	cbit(lcd_port,EN);
    1afa:	a8 e2       	ldi	r26, 0x28	; 40
    1afc:	b0 e0       	ldi	r27, 0x00	; 0
    1afe:	e8 e2       	ldi	r30, 0x28	; 40
    1b00:	f0 e0       	ldi	r31, 0x00	; 0
    1b02:	80 81       	ld	r24, Z
    1b04:	8b 7f       	andi	r24, 0xFB	; 251
    1b06:	8c 93       	st	X, r24
}
    1b08:	6e 96       	adiw	r28, 0x1e	; 30
    1b0a:	0f b6       	in	r0, 0x3f	; 63
    1b0c:	f8 94       	cli
    1b0e:	de bf       	out	0x3e, r29	; 62
    1b10:	0f be       	out	0x3f, r0	; 63
    1b12:	cd bf       	out	0x3d, r28	; 61
    1b14:	cf 91       	pop	r28
    1b16:	df 91       	pop	r29
    1b18:	08 95       	ret

00001b1a <lcd_home>:


void lcd_home()
{
    1b1a:	df 93       	push	r29
    1b1c:	cf 93       	push	r28
    1b1e:	cd b7       	in	r28, 0x3d	; 61
    1b20:	de b7       	in	r29, 0x3e	; 62
	lcd_wr_command(0x80);
    1b22:	80 e8       	ldi	r24, 0x80	; 128
    1b24:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <lcd_wr_command>
}
    1b28:	cf 91       	pop	r28
    1b2a:	df 91       	pop	r29
    1b2c:	08 95       	ret

00001b2e <lcd_string>:


/*****Function to Print String on LCD*****/
void lcd_string(char *str)
{
    1b2e:	df 93       	push	r29
    1b30:	cf 93       	push	r28
    1b32:	0f 92       	push	r0
    1b34:	0f 92       	push	r0
    1b36:	cd b7       	in	r28, 0x3d	; 61
    1b38:	de b7       	in	r29, 0x3e	; 62
    1b3a:	9a 83       	std	Y+2, r25	; 0x02
    1b3c:	89 83       	std	Y+1, r24	; 0x01
    1b3e:	0a c0       	rjmp	.+20     	; 0x1b54 <lcd_string+0x26>
	while(*str != '\0')
	{
		lcd_wr_char(*str);
    1b40:	e9 81       	ldd	r30, Y+1	; 0x01
    1b42:	fa 81       	ldd	r31, Y+2	; 0x02
    1b44:	80 81       	ld	r24, Z
    1b46:	0e 94 33 0c 	call	0x1866	; 0x1866 <lcd_wr_char>
		str++;
    1b4a:	89 81       	ldd	r24, Y+1	; 0x01
    1b4c:	9a 81       	ldd	r25, Y+2	; 0x02
    1b4e:	01 96       	adiw	r24, 0x01	; 1
    1b50:	9a 83       	std	Y+2, r25	; 0x02
    1b52:	89 83       	std	Y+1, r24	; 0x01


/*****Function to Print String on LCD*****/
void lcd_string(char *str)
{
	while(*str != '\0')
    1b54:	e9 81       	ldd	r30, Y+1	; 0x01
    1b56:	fa 81       	ldd	r31, Y+2	; 0x02
    1b58:	80 81       	ld	r24, Z
    1b5a:	88 23       	and	r24, r24
    1b5c:	89 f7       	brne	.-30     	; 0x1b40 <lcd_string+0x12>
	{
		lcd_wr_char(*str);
		str++;
	}
}
    1b5e:	0f 90       	pop	r0
    1b60:	0f 90       	pop	r0
    1b62:	cf 91       	pop	r28
    1b64:	df 91       	pop	r29
    1b66:	08 95       	ret

00001b68 <lcd_cursor>:

/*** Position the LCD cursor at "row", "column". ***/

void lcd_cursor (char row, char column)
{
    1b68:	df 93       	push	r29
    1b6a:	cf 93       	push	r28
    1b6c:	00 d0       	rcall	.+0      	; 0x1b6e <lcd_cursor+0x6>
    1b6e:	0f 92       	push	r0
    1b70:	cd b7       	in	r28, 0x3d	; 61
    1b72:	de b7       	in	r29, 0x3e	; 62
    1b74:	89 83       	std	Y+1, r24	; 0x01
    1b76:	6a 83       	std	Y+2, r22	; 0x02
	switch (row) {
    1b78:	89 81       	ldd	r24, Y+1	; 0x01
    1b7a:	28 2f       	mov	r18, r24
    1b7c:	30 e0       	ldi	r19, 0x00	; 0
    1b7e:	3c 83       	std	Y+4, r19	; 0x04
    1b80:	2b 83       	std	Y+3, r18	; 0x03
    1b82:	8b 81       	ldd	r24, Y+3	; 0x03
    1b84:	9c 81       	ldd	r25, Y+4	; 0x04
    1b86:	82 30       	cpi	r24, 0x02	; 2
    1b88:	91 05       	cpc	r25, r1
    1b8a:	d9 f0       	breq	.+54     	; 0x1bc2 <lcd_cursor+0x5a>
    1b8c:	2b 81       	ldd	r18, Y+3	; 0x03
    1b8e:	3c 81       	ldd	r19, Y+4	; 0x04
    1b90:	23 30       	cpi	r18, 0x03	; 3
    1b92:	31 05       	cpc	r19, r1
    1b94:	34 f4       	brge	.+12     	; 0x1ba2 <lcd_cursor+0x3a>
    1b96:	8b 81       	ldd	r24, Y+3	; 0x03
    1b98:	9c 81       	ldd	r25, Y+4	; 0x04
    1b9a:	81 30       	cpi	r24, 0x01	; 1
    1b9c:	91 05       	cpc	r25, r1
    1b9e:	61 f0       	breq	.+24     	; 0x1bb8 <lcd_cursor+0x50>
    1ba0:	1e c0       	rjmp	.+60     	; 0x1bde <lcd_cursor+0x76>
    1ba2:	2b 81       	ldd	r18, Y+3	; 0x03
    1ba4:	3c 81       	ldd	r19, Y+4	; 0x04
    1ba6:	23 30       	cpi	r18, 0x03	; 3
    1ba8:	31 05       	cpc	r19, r1
    1baa:	81 f0       	breq	.+32     	; 0x1bcc <lcd_cursor+0x64>
    1bac:	8b 81       	ldd	r24, Y+3	; 0x03
    1bae:	9c 81       	ldd	r25, Y+4	; 0x04
    1bb0:	84 30       	cpi	r24, 0x04	; 4
    1bb2:	91 05       	cpc	r25, r1
    1bb4:	81 f0       	breq	.+32     	; 0x1bd6 <lcd_cursor+0x6e>
    1bb6:	13 c0       	rjmp	.+38     	; 0x1bde <lcd_cursor+0x76>
		case 1: lcd_wr_command (0x80 + column - 1); break;
    1bb8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bba:	81 58       	subi	r24, 0x81	; 129
    1bbc:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <lcd_wr_command>
    1bc0:	0e c0       	rjmp	.+28     	; 0x1bde <lcd_cursor+0x76>
		case 2: lcd_wr_command (0xc0 + column - 1); break;
    1bc2:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc4:	81 54       	subi	r24, 0x41	; 65
    1bc6:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <lcd_wr_command>
    1bca:	09 c0       	rjmp	.+18     	; 0x1bde <lcd_cursor+0x76>
		case 3: lcd_wr_command (0x94 + column - 1); break;
    1bcc:	8a 81       	ldd	r24, Y+2	; 0x02
    1bce:	8d 56       	subi	r24, 0x6D	; 109
    1bd0:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <lcd_wr_command>
    1bd4:	04 c0       	rjmp	.+8      	; 0x1bde <lcd_cursor+0x76>
		case 4: lcd_wr_command (0xd4 + column - 1); break;
    1bd6:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd8:	8d 52       	subi	r24, 0x2D	; 45
    1bda:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <lcd_wr_command>
		default: break;
	}
}
    1bde:	0f 90       	pop	r0
    1be0:	0f 90       	pop	r0
    1be2:	0f 90       	pop	r0
    1be4:	0f 90       	pop	r0
    1be6:	cf 91       	pop	r28
    1be8:	df 91       	pop	r29
    1bea:	08 95       	ret

00001bec <lcd_print>:

/***** Function To Print Any input value upto the desired digit on LCD *****/
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
    1bec:	df 93       	push	r29
    1bee:	cf 93       	push	r28
    1bf0:	cd b7       	in	r28, 0x3d	; 61
    1bf2:	de b7       	in	r29, 0x3e	; 62
    1bf4:	27 97       	sbiw	r28, 0x07	; 7
    1bf6:	0f b6       	in	r0, 0x3f	; 63
    1bf8:	f8 94       	cli
    1bfa:	de bf       	out	0x3e, r29	; 62
    1bfc:	0f be       	out	0x3f, r0	; 63
    1bfe:	cd bf       	out	0x3d, r28	; 61
    1c00:	8a 83       	std	Y+2, r24	; 0x02
    1c02:	6b 83       	std	Y+3, r22	; 0x03
    1c04:	5d 83       	std	Y+5, r21	; 0x05
    1c06:	4c 83       	std	Y+4, r20	; 0x04
    1c08:	3f 83       	std	Y+7, r19	; 0x07
    1c0a:	2e 83       	std	Y+6, r18	; 0x06
	unsigned char flag=0;
    1c0c:	19 82       	std	Y+1, r1	; 0x01
	if(row==0||coloumn==0)
    1c0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c10:	88 23       	and	r24, r24
    1c12:	19 f0       	breq	.+6      	; 0x1c1a <lcd_print+0x2e>
    1c14:	8b 81       	ldd	r24, Y+3	; 0x03
    1c16:	88 23       	and	r24, r24
    1c18:	19 f4       	brne	.+6      	; 0x1c20 <lcd_print+0x34>
	{
		lcd_home();
    1c1a:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <lcd_home>
    1c1e:	04 c0       	rjmp	.+8      	; 0x1c28 <lcd_print+0x3c>
	}
	else
	{
		lcd_cursor(row,coloumn);
    1c20:	8a 81       	ldd	r24, Y+2	; 0x02
    1c22:	6b 81       	ldd	r22, Y+3	; 0x03
    1c24:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <lcd_cursor>
	}
	if(digits==5 || flag==1)
    1c28:	8e 81       	ldd	r24, Y+6	; 0x06
    1c2a:	9f 81       	ldd	r25, Y+7	; 0x07
    1c2c:	85 30       	cpi	r24, 0x05	; 5
    1c2e:	91 05       	cpc	r25, r1
    1c30:	19 f0       	breq	.+6      	; 0x1c38 <lcd_print+0x4c>
    1c32:	89 81       	ldd	r24, Y+1	; 0x01
    1c34:	81 30       	cpi	r24, 0x01	; 1
    1c36:	a9 f4       	brne	.+42     	; 0x1c62 <lcd_print+0x76>
	{
		million=value/10000+48;
    1c38:	8c 81       	ldd	r24, Y+4	; 0x04
    1c3a:	9d 81       	ldd	r25, Y+5	; 0x05
    1c3c:	20 e1       	ldi	r18, 0x10	; 16
    1c3e:	37 e2       	ldi	r19, 0x27	; 39
    1c40:	b9 01       	movw	r22, r18
    1c42:	0e 94 b7 2b 	call	0x576e	; 0x576e <__udivmodhi4>
    1c46:	cb 01       	movw	r24, r22
    1c48:	c0 96       	adiw	r24, 0x30	; 48
    1c4a:	90 93 48 03 	sts	0x0348, r25
    1c4e:	80 93 47 03 	sts	0x0347, r24
		lcd_wr_char(million);
    1c52:	80 91 47 03 	lds	r24, 0x0347
    1c56:	90 91 48 03 	lds	r25, 0x0348
    1c5a:	0e 94 33 0c 	call	0x1866	; 0x1866 <lcd_wr_char>
		flag=1;
    1c5e:	81 e0       	ldi	r24, 0x01	; 1
    1c60:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==4 || flag==1)
    1c62:	8e 81       	ldd	r24, Y+6	; 0x06
    1c64:	9f 81       	ldd	r25, Y+7	; 0x07
    1c66:	84 30       	cpi	r24, 0x04	; 4
    1c68:	91 05       	cpc	r25, r1
    1c6a:	19 f0       	breq	.+6      	; 0x1c72 <lcd_print+0x86>
    1c6c:	89 81       	ldd	r24, Y+1	; 0x01
    1c6e:	81 30       	cpi	r24, 0x01	; 1
    1c70:	11 f5       	brne	.+68     	; 0x1cb6 <lcd_print+0xca>
	{
		temp = value/1000;
    1c72:	8c 81       	ldd	r24, Y+4	; 0x04
    1c74:	9d 81       	ldd	r25, Y+5	; 0x05
    1c76:	28 ee       	ldi	r18, 0xE8	; 232
    1c78:	33 e0       	ldi	r19, 0x03	; 3
    1c7a:	b9 01       	movw	r22, r18
    1c7c:	0e 94 b7 2b 	call	0x576e	; 0x576e <__udivmodhi4>
    1c80:	cb 01       	movw	r24, r22
    1c82:	90 93 4d 03 	sts	0x034D, r25
    1c86:	80 93 4c 03 	sts	0x034C, r24
		thousand = temp%10 + 48;
    1c8a:	80 91 4c 03 	lds	r24, 0x034C
    1c8e:	90 91 4d 03 	lds	r25, 0x034D
    1c92:	2a e0       	ldi	r18, 0x0A	; 10
    1c94:	30 e0       	ldi	r19, 0x00	; 0
    1c96:	b9 01       	movw	r22, r18
    1c98:	0e 94 b7 2b 	call	0x576e	; 0x576e <__udivmodhi4>
    1c9c:	c0 96       	adiw	r24, 0x30	; 48
    1c9e:	90 93 72 03 	sts	0x0372, r25
    1ca2:	80 93 71 03 	sts	0x0371, r24
		lcd_wr_char(thousand);
    1ca6:	80 91 71 03 	lds	r24, 0x0371
    1caa:	90 91 72 03 	lds	r25, 0x0372
    1cae:	0e 94 33 0c 	call	0x1866	; 0x1866 <lcd_wr_char>
		flag=1;
    1cb2:	81 e0       	ldi	r24, 0x01	; 1
    1cb4:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==3 || flag==1)
    1cb6:	8e 81       	ldd	r24, Y+6	; 0x06
    1cb8:	9f 81       	ldd	r25, Y+7	; 0x07
    1cba:	83 30       	cpi	r24, 0x03	; 3
    1cbc:	91 05       	cpc	r25, r1
    1cbe:	19 f0       	breq	.+6      	; 0x1cc6 <lcd_print+0xda>
    1cc0:	89 81       	ldd	r24, Y+1	; 0x01
    1cc2:	81 30       	cpi	r24, 0x01	; 1
    1cc4:	11 f5       	brne	.+68     	; 0x1d0a <lcd_print+0x11e>
	{
		temp = value/100;
    1cc6:	8c 81       	ldd	r24, Y+4	; 0x04
    1cc8:	9d 81       	ldd	r25, Y+5	; 0x05
    1cca:	24 e6       	ldi	r18, 0x64	; 100
    1ccc:	30 e0       	ldi	r19, 0x00	; 0
    1cce:	b9 01       	movw	r22, r18
    1cd0:	0e 94 b7 2b 	call	0x576e	; 0x576e <__udivmodhi4>
    1cd4:	cb 01       	movw	r24, r22
    1cd6:	90 93 4d 03 	sts	0x034D, r25
    1cda:	80 93 4c 03 	sts	0x034C, r24
		hundred = temp%10 + 48;
    1cde:	80 91 4c 03 	lds	r24, 0x034C
    1ce2:	90 91 4d 03 	lds	r25, 0x034D
    1ce6:	2a e0       	ldi	r18, 0x0A	; 10
    1ce8:	30 e0       	ldi	r19, 0x00	; 0
    1cea:	b9 01       	movw	r22, r18
    1cec:	0e 94 b7 2b 	call	0x576e	; 0x576e <__udivmodhi4>
    1cf0:	c0 96       	adiw	r24, 0x30	; 48
    1cf2:	90 93 6e 03 	sts	0x036E, r25
    1cf6:	80 93 6d 03 	sts	0x036D, r24
		lcd_wr_char(hundred);
    1cfa:	80 91 6d 03 	lds	r24, 0x036D
    1cfe:	90 91 6e 03 	lds	r25, 0x036E
    1d02:	0e 94 33 0c 	call	0x1866	; 0x1866 <lcd_wr_char>
		flag=1;
    1d06:	81 e0       	ldi	r24, 0x01	; 1
    1d08:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==2 || flag==1)
    1d0a:	8e 81       	ldd	r24, Y+6	; 0x06
    1d0c:	9f 81       	ldd	r25, Y+7	; 0x07
    1d0e:	82 30       	cpi	r24, 0x02	; 2
    1d10:	91 05       	cpc	r25, r1
    1d12:	19 f0       	breq	.+6      	; 0x1d1a <lcd_print+0x12e>
    1d14:	89 81       	ldd	r24, Y+1	; 0x01
    1d16:	81 30       	cpi	r24, 0x01	; 1
    1d18:	11 f5       	brne	.+68     	; 0x1d5e <lcd_print+0x172>
	{
		temp = value/10;
    1d1a:	8c 81       	ldd	r24, Y+4	; 0x04
    1d1c:	9d 81       	ldd	r25, Y+5	; 0x05
    1d1e:	2a e0       	ldi	r18, 0x0A	; 10
    1d20:	30 e0       	ldi	r19, 0x00	; 0
    1d22:	b9 01       	movw	r22, r18
    1d24:	0e 94 b7 2b 	call	0x576e	; 0x576e <__udivmodhi4>
    1d28:	cb 01       	movw	r24, r22
    1d2a:	90 93 4d 03 	sts	0x034D, r25
    1d2e:	80 93 4c 03 	sts	0x034C, r24
		tens = temp%10 + 48;
    1d32:	80 91 4c 03 	lds	r24, 0x034C
    1d36:	90 91 4d 03 	lds	r25, 0x034D
    1d3a:	2a e0       	ldi	r18, 0x0A	; 10
    1d3c:	30 e0       	ldi	r19, 0x00	; 0
    1d3e:	b9 01       	movw	r22, r18
    1d40:	0e 94 b7 2b 	call	0x576e	; 0x576e <__udivmodhi4>
    1d44:	c0 96       	adiw	r24, 0x30	; 48
    1d46:	90 93 68 03 	sts	0x0368, r25
    1d4a:	80 93 67 03 	sts	0x0367, r24
		lcd_wr_char(tens);
    1d4e:	80 91 67 03 	lds	r24, 0x0367
    1d52:	90 91 68 03 	lds	r25, 0x0368
    1d56:	0e 94 33 0c 	call	0x1866	; 0x1866 <lcd_wr_char>
		flag=1;
    1d5a:	81 e0       	ldi	r24, 0x01	; 1
    1d5c:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==1 || flag==1)
    1d5e:	8e 81       	ldd	r24, Y+6	; 0x06
    1d60:	9f 81       	ldd	r25, Y+7	; 0x07
    1d62:	81 30       	cpi	r24, 0x01	; 1
    1d64:	91 05       	cpc	r25, r1
    1d66:	19 f0       	breq	.+6      	; 0x1d6e <lcd_print+0x182>
    1d68:	89 81       	ldd	r24, Y+1	; 0x01
    1d6a:	81 30       	cpi	r24, 0x01	; 1
    1d6c:	91 f4       	brne	.+36     	; 0x1d92 <lcd_print+0x1a6>
	{
		unit = value%10 + 48;
    1d6e:	8c 81       	ldd	r24, Y+4	; 0x04
    1d70:	9d 81       	ldd	r25, Y+5	; 0x05
    1d72:	2a e0       	ldi	r18, 0x0A	; 10
    1d74:	30 e0       	ldi	r19, 0x00	; 0
    1d76:	b9 01       	movw	r22, r18
    1d78:	0e 94 b7 2b 	call	0x576e	; 0x576e <__udivmodhi4>
    1d7c:	c0 96       	adiw	r24, 0x30	; 48
    1d7e:	90 93 70 03 	sts	0x0370, r25
    1d82:	80 93 6f 03 	sts	0x036F, r24
		lcd_wr_char(unit);
    1d86:	80 91 6f 03 	lds	r24, 0x036F
    1d8a:	90 91 70 03 	lds	r25, 0x0370
    1d8e:	0e 94 33 0c 	call	0x1866	; 0x1866 <lcd_wr_char>
	}
	if(digits>5)
    1d92:	8e 81       	ldd	r24, Y+6	; 0x06
    1d94:	9f 81       	ldd	r25, Y+7	; 0x07
    1d96:	86 30       	cpi	r24, 0x06	; 6
    1d98:	91 05       	cpc	r25, r1
    1d9a:	1c f0       	brlt	.+6      	; 0x1da2 <lcd_print+0x1b6>
	{
		lcd_wr_char('E');
    1d9c:	85 e4       	ldi	r24, 0x45	; 69
    1d9e:	0e 94 33 0c 	call	0x1866	; 0x1866 <lcd_wr_char>
	}
	
}
    1da2:	27 96       	adiw	r28, 0x07	; 7
    1da4:	0f b6       	in	r0, 0x3f	; 63
    1da6:	f8 94       	cli
    1da8:	de bf       	out	0x3e, r29	; 62
    1daa:	0f be       	out	0x3f, r0	; 63
    1dac:	cd bf       	out	0x3d, r28	; 61
    1dae:	cf 91       	pop	r28
    1db0:	df 91       	pop	r29
    1db2:	08 95       	ret

00001db4 <LCD_DISPLAY_INT_1>:


void LCD_DISPLAY_INT_1(int val)
{
    1db4:	df 93       	push	r29
    1db6:	cf 93       	push	r28
    1db8:	0f 92       	push	r0
    1dba:	0f 92       	push	r0
    1dbc:	cd b7       	in	r28, 0x3d	; 61
    1dbe:	de b7       	in	r29, 0x3e	; 62
    1dc0:	9a 83       	std	Y+2, r25	; 0x02
    1dc2:	89 83       	std	Y+1, r24	; 0x01


 lcd_print(1,1,val,4);
    1dc4:	29 81       	ldd	r18, Y+1	; 0x01
    1dc6:	3a 81       	ldd	r19, Y+2	; 0x02
    1dc8:	81 e0       	ldi	r24, 0x01	; 1
    1dca:	61 e0       	ldi	r22, 0x01	; 1
    1dcc:	a9 01       	movw	r20, r18
    1dce:	24 e0       	ldi	r18, 0x04	; 4
    1dd0:	30 e0       	ldi	r19, 0x00	; 0
    1dd2:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <lcd_print>

}
    1dd6:	0f 90       	pop	r0
    1dd8:	0f 90       	pop	r0
    1dda:	cf 91       	pop	r28
    1ddc:	df 91       	pop	r29
    1dde:	08 95       	ret

00001de0 <reverse>:

/* reverse: reverse string s in place */
void reverse(char s[])
{
    1de0:	df 93       	push	r29
    1de2:	cf 93       	push	r28
    1de4:	cd b7       	in	r28, 0x3d	; 61
    1de6:	de b7       	in	r29, 0x3e	; 62
    1de8:	28 97       	sbiw	r28, 0x08	; 8
    1dea:	0f b6       	in	r0, 0x3f	; 63
    1dec:	f8 94       	cli
    1dee:	de bf       	out	0x3e, r29	; 62
    1df0:	0f be       	out	0x3f, r0	; 63
    1df2:	cd bf       	out	0x3d, r28	; 61
    1df4:	98 87       	std	Y+8, r25	; 0x08
    1df6:	8f 83       	std	Y+7, r24	; 0x07
    int c, i, j;
    for (i = 0, j = strlen(s)-1; i < j; i++, j--) {
    1df8:	1c 82       	std	Y+4, r1	; 0x04
    1dfa:	1b 82       	std	Y+3, r1	; 0x03
    1dfc:	8f 81       	ldd	r24, Y+7	; 0x07
    1dfe:	98 85       	ldd	r25, Y+8	; 0x08
    1e00:	0e 94 ae 2b 	call	0x575c	; 0x575c <strlen>
    1e04:	01 97       	sbiw	r24, 0x01	; 1
    1e06:	9a 83       	std	Y+2, r25	; 0x02
    1e08:	89 83       	std	Y+1, r24	; 0x01
    1e0a:	2f c0       	rjmp	.+94     	; 0x1e6a <reverse+0x8a>
        c = s[i];
    1e0c:	2b 81       	ldd	r18, Y+3	; 0x03
    1e0e:	3c 81       	ldd	r19, Y+4	; 0x04
    1e10:	8f 81       	ldd	r24, Y+7	; 0x07
    1e12:	98 85       	ldd	r25, Y+8	; 0x08
    1e14:	fc 01       	movw	r30, r24
    1e16:	e2 0f       	add	r30, r18
    1e18:	f3 1f       	adc	r31, r19
    1e1a:	80 81       	ld	r24, Z
    1e1c:	88 2f       	mov	r24, r24
    1e1e:	90 e0       	ldi	r25, 0x00	; 0
    1e20:	9e 83       	std	Y+6, r25	; 0x06
    1e22:	8d 83       	std	Y+5, r24	; 0x05
        s[i] = s[j];
    1e24:	2b 81       	ldd	r18, Y+3	; 0x03
    1e26:	3c 81       	ldd	r19, Y+4	; 0x04
    1e28:	8f 81       	ldd	r24, Y+7	; 0x07
    1e2a:	98 85       	ldd	r25, Y+8	; 0x08
    1e2c:	dc 01       	movw	r26, r24
    1e2e:	a2 0f       	add	r26, r18
    1e30:	b3 1f       	adc	r27, r19
    1e32:	29 81       	ldd	r18, Y+1	; 0x01
    1e34:	3a 81       	ldd	r19, Y+2	; 0x02
    1e36:	8f 81       	ldd	r24, Y+7	; 0x07
    1e38:	98 85       	ldd	r25, Y+8	; 0x08
    1e3a:	fc 01       	movw	r30, r24
    1e3c:	e2 0f       	add	r30, r18
    1e3e:	f3 1f       	adc	r31, r19
    1e40:	80 81       	ld	r24, Z
    1e42:	8c 93       	st	X, r24
        s[j] = c;
    1e44:	29 81       	ldd	r18, Y+1	; 0x01
    1e46:	3a 81       	ldd	r19, Y+2	; 0x02
    1e48:	8f 81       	ldd	r24, Y+7	; 0x07
    1e4a:	98 85       	ldd	r25, Y+8	; 0x08
    1e4c:	fc 01       	movw	r30, r24
    1e4e:	e2 0f       	add	r30, r18
    1e50:	f3 1f       	adc	r31, r19
    1e52:	8d 81       	ldd	r24, Y+5	; 0x05
    1e54:	80 83       	st	Z, r24

/* reverse: reverse string s in place */
void reverse(char s[])
{
    int c, i, j;
    for (i = 0, j = strlen(s)-1; i < j; i++, j--) {
    1e56:	8b 81       	ldd	r24, Y+3	; 0x03
    1e58:	9c 81       	ldd	r25, Y+4	; 0x04
    1e5a:	01 96       	adiw	r24, 0x01	; 1
    1e5c:	9c 83       	std	Y+4, r25	; 0x04
    1e5e:	8b 83       	std	Y+3, r24	; 0x03
    1e60:	89 81       	ldd	r24, Y+1	; 0x01
    1e62:	9a 81       	ldd	r25, Y+2	; 0x02
    1e64:	01 97       	sbiw	r24, 0x01	; 1
    1e66:	9a 83       	std	Y+2, r25	; 0x02
    1e68:	89 83       	std	Y+1, r24	; 0x01
    1e6a:	2b 81       	ldd	r18, Y+3	; 0x03
    1e6c:	3c 81       	ldd	r19, Y+4	; 0x04
    1e6e:	89 81       	ldd	r24, Y+1	; 0x01
    1e70:	9a 81       	ldd	r25, Y+2	; 0x02
    1e72:	28 17       	cp	r18, r24
    1e74:	39 07       	cpc	r19, r25
    1e76:	54 f2       	brlt	.-108    	; 0x1e0c <reverse+0x2c>
        c = s[i];
        s[i] = s[j];
        s[j] = c;
    }
}
    1e78:	28 96       	adiw	r28, 0x08	; 8
    1e7a:	0f b6       	in	r0, 0x3f	; 63
    1e7c:	f8 94       	cli
    1e7e:	de bf       	out	0x3e, r29	; 62
    1e80:	0f be       	out	0x3f, r0	; 63
    1e82:	cd bf       	out	0x3d, r28	; 61
    1e84:	cf 91       	pop	r28
    1e86:	df 91       	pop	r29
    1e88:	08 95       	ret

00001e8a <itoa1>:
void itoa1(int n, char s[])
{
    1e8a:	df 93       	push	r29
    1e8c:	cf 93       	push	r28
    1e8e:	cd b7       	in	r28, 0x3d	; 61
    1e90:	de b7       	in	r29, 0x3e	; 62
    1e92:	28 97       	sbiw	r28, 0x08	; 8
    1e94:	0f b6       	in	r0, 0x3f	; 63
    1e96:	f8 94       	cli
    1e98:	de bf       	out	0x3e, r29	; 62
    1e9a:	0f be       	out	0x3f, r0	; 63
    1e9c:	cd bf       	out	0x3d, r28	; 61
    1e9e:	9e 83       	std	Y+6, r25	; 0x06
    1ea0:	8d 83       	std	Y+5, r24	; 0x05
    1ea2:	78 87       	std	Y+8, r23	; 0x08
    1ea4:	6f 83       	std	Y+7, r22	; 0x07
    int i, sign;
    if ((sign = n) < 0) /* record sign */
    1ea6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ea8:	9e 81       	ldd	r25, Y+6	; 0x06
    1eaa:	9a 83       	std	Y+2, r25	; 0x02
    1eac:	89 83       	std	Y+1, r24	; 0x01
    1eae:	89 81       	ldd	r24, Y+1	; 0x01
    1eb0:	9a 81       	ldd	r25, Y+2	; 0x02
    1eb2:	99 23       	and	r25, r25
    1eb4:	3c f4       	brge	.+14     	; 0x1ec4 <itoa1+0x3a>
         n = -n;          /* make n positive */
    1eb6:	8d 81       	ldd	r24, Y+5	; 0x05
    1eb8:	9e 81       	ldd	r25, Y+6	; 0x06
    1eba:	90 95       	com	r25
    1ebc:	81 95       	neg	r24
    1ebe:	9f 4f       	sbci	r25, 0xFF	; 255
    1ec0:	9e 83       	std	Y+6, r25	; 0x06
    1ec2:	8d 83       	std	Y+5, r24	; 0x05
    i = 0;
    1ec4:	1c 82       	std	Y+4, r1	; 0x04
    1ec6:	1b 82       	std	Y+3, r1	; 0x03
    do {       /* generate digits in reverse order */
         s[i++] = n % 10 + '0'; /* get next digit */
    1ec8:	2b 81       	ldd	r18, Y+3	; 0x03
    1eca:	3c 81       	ldd	r19, Y+4	; 0x04
    1ecc:	8f 81       	ldd	r24, Y+7	; 0x07
    1ece:	98 85       	ldd	r25, Y+8	; 0x08
    1ed0:	fc 01       	movw	r30, r24
    1ed2:	e2 0f       	add	r30, r18
    1ed4:	f3 1f       	adc	r31, r19
    1ed6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ed8:	9e 81       	ldd	r25, Y+6	; 0x06
    1eda:	2a e0       	ldi	r18, 0x0A	; 10
    1edc:	30 e0       	ldi	r19, 0x00	; 0
    1ede:	b9 01       	movw	r22, r18
    1ee0:	0e 94 cb 2b 	call	0x5796	; 0x5796 <__divmodhi4>
    1ee4:	80 5d       	subi	r24, 0xD0	; 208
    1ee6:	80 83       	st	Z, r24
    1ee8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eea:	9c 81       	ldd	r25, Y+4	; 0x04
    1eec:	01 96       	adiw	r24, 0x01	; 1
    1eee:	9c 83       	std	Y+4, r25	; 0x04
    1ef0:	8b 83       	std	Y+3, r24	; 0x03
    } while ((n /= 10) > 0);     /* delete it */
    1ef2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ef4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ef6:	2a e0       	ldi	r18, 0x0A	; 10
    1ef8:	30 e0       	ldi	r19, 0x00	; 0
    1efa:	b9 01       	movw	r22, r18
    1efc:	0e 94 cb 2b 	call	0x5796	; 0x5796 <__divmodhi4>
    1f00:	cb 01       	movw	r24, r22
    1f02:	9e 83       	std	Y+6, r25	; 0x06
    1f04:	8d 83       	std	Y+5, r24	; 0x05
    1f06:	8d 81       	ldd	r24, Y+5	; 0x05
    1f08:	9e 81       	ldd	r25, Y+6	; 0x06
    1f0a:	18 16       	cp	r1, r24
    1f0c:	19 06       	cpc	r1, r25
    1f0e:	e4 f2       	brlt	.-72     	; 0x1ec8 <itoa1+0x3e>
    if (sign < 0)
    1f10:	89 81       	ldd	r24, Y+1	; 0x01
    1f12:	9a 81       	ldd	r25, Y+2	; 0x02
    1f14:	99 23       	and	r25, r25
    1f16:	74 f4       	brge	.+28     	; 0x1f34 <itoa1+0xaa>
         s[i++] = '-';
    1f18:	2b 81       	ldd	r18, Y+3	; 0x03
    1f1a:	3c 81       	ldd	r19, Y+4	; 0x04
    1f1c:	8f 81       	ldd	r24, Y+7	; 0x07
    1f1e:	98 85       	ldd	r25, Y+8	; 0x08
    1f20:	fc 01       	movw	r30, r24
    1f22:	e2 0f       	add	r30, r18
    1f24:	f3 1f       	adc	r31, r19
    1f26:	8d e2       	ldi	r24, 0x2D	; 45
    1f28:	80 83       	st	Z, r24
    1f2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f2c:	9c 81       	ldd	r25, Y+4	; 0x04
    1f2e:	01 96       	adiw	r24, 0x01	; 1
    1f30:	9c 83       	std	Y+4, r25	; 0x04
    1f32:	8b 83       	std	Y+3, r24	; 0x03
    s[i] = '\0';
    1f34:	2b 81       	ldd	r18, Y+3	; 0x03
    1f36:	3c 81       	ldd	r19, Y+4	; 0x04
    1f38:	8f 81       	ldd	r24, Y+7	; 0x07
    1f3a:	98 85       	ldd	r25, Y+8	; 0x08
    1f3c:	fc 01       	movw	r30, r24
    1f3e:	e2 0f       	add	r30, r18
    1f40:	f3 1f       	adc	r31, r19
    1f42:	10 82       	st	Z, r1
    reverse(s);
    1f44:	8f 81       	ldd	r24, Y+7	; 0x07
    1f46:	98 85       	ldd	r25, Y+8	; 0x08
    1f48:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <reverse>
}
    1f4c:	28 96       	adiw	r28, 0x08	; 8
    1f4e:	0f b6       	in	r0, 0x3f	; 63
    1f50:	f8 94       	cli
    1f52:	de bf       	out	0x3e, r29	; 62
    1f54:	0f be       	out	0x3f, r0	; 63
    1f56:	cd bf       	out	0x3d, r28	; 61
    1f58:	cf 91       	pop	r28
    1f5a:	df 91       	pop	r29
    1f5c:	08 95       	ret

00001f5e <LCD_DISPLAY_INT_2>:

}*/
	

void LCD_DISPLAY_INT_2(int val)
{	
    1f5e:	df 93       	push	r29
    1f60:	cf 93       	push	r28
    1f62:	0f 92       	push	r0
    1f64:	0f 92       	push	r0
    1f66:	cd b7       	in	r28, 0x3d	; 61
    1f68:	de b7       	in	r29, 0x3e	; 62
    1f6a:	9a 83       	std	Y+2, r25	; 0x02
    1f6c:	89 83       	std	Y+1, r24	; 0x01


lcd_print(2,1,val,4);
    1f6e:	29 81       	ldd	r18, Y+1	; 0x01
    1f70:	3a 81       	ldd	r19, Y+2	; 0x02
    1f72:	82 e0       	ldi	r24, 0x02	; 2
    1f74:	61 e0       	ldi	r22, 0x01	; 1
    1f76:	a9 01       	movw	r20, r18
    1f78:	24 e0       	ldi	r18, 0x04	; 4
    1f7a:	30 e0       	ldi	r19, 0x00	; 0
    1f7c:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <lcd_print>

}
    1f80:	0f 90       	pop	r0
    1f82:	0f 90       	pop	r0
    1f84:	cf 91       	pop	r28
    1f86:	df 91       	pop	r29
    1f88:	08 95       	ret

00001f8a <init_buzzer>:

// BUZZER Functions

/*****Function to Initialize PORTS*****/
void init_buzzer()
{
    1f8a:	df 93       	push	r29
    1f8c:	cf 93       	push	r28
    1f8e:	cd b7       	in	r28, 0x3d	; 61
    1f90:	de b7       	in	r29, 0x3e	; 62
	DDRC = DDRC | 0x08;				//Setting PORTC pin3 as outpt
    1f92:	a7 e2       	ldi	r26, 0x27	; 39
    1f94:	b0 e0       	ldi	r27, 0x00	; 0
    1f96:	e7 e2       	ldi	r30, 0x27	; 39
    1f98:	f0 e0       	ldi	r31, 0x00	; 0
    1f9a:	80 81       	ld	r24, Z
    1f9c:	88 60       	ori	r24, 0x08	; 8
    1f9e:	8c 93       	st	X, r24
	PORTC = 0x00;				//Initialize Values of PORTC to 0.
    1fa0:	e8 e2       	ldi	r30, 0x28	; 40
    1fa2:	f0 e0       	ldi	r31, 0x00	; 0
    1fa4:	10 82       	st	Z, r1
}
    1fa6:	cf 91       	pop	r28
    1fa8:	df 91       	pop	r29
    1faa:	08 95       	ret

00001fac <buzzer_delay>:

/***** Buzzer Delay Function*****/
void buzzer_delay()
{
    1fac:	df 93       	push	r29
    1fae:	cf 93       	push	r28
    1fb0:	cd b7       	in	r28, 0x3d	; 61
    1fb2:	de b7       	in	r29, 0x3e	; 62
    1fb4:	6a 97       	sbiw	r28, 0x1a	; 26
    1fb6:	0f b6       	in	r0, 0x3f	; 63
    1fb8:	f8 94       	cli
    1fba:	de bf       	out	0x3e, r29	; 62
    1fbc:	0f be       	out	0x3f, r0	; 63
    1fbe:	cd bf       	out	0x3d, r28	; 61
	unsigned int i;
	for(i=0; i<10;i++)
    1fc0:	1a 8e       	std	Y+26, r1	; 0x1a
    1fc2:	19 8e       	std	Y+25, r1	; 0x19
    1fc4:	c3 c0       	rjmp	.+390    	; 0x214c <buzzer_delay+0x1a0>
    1fc6:	80 e0       	ldi	r24, 0x00	; 0
    1fc8:	90 e0       	ldi	r25, 0x00	; 0
    1fca:	a8 ec       	ldi	r26, 0xC8	; 200
    1fcc:	b2 e4       	ldi	r27, 0x42	; 66
    1fce:	8d 8b       	std	Y+21, r24	; 0x15
    1fd0:	9e 8b       	std	Y+22, r25	; 0x16
    1fd2:	af 8b       	std	Y+23, r26	; 0x17
    1fd4:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1fd6:	6d 89       	ldd	r22, Y+21	; 0x15
    1fd8:	7e 89       	ldd	r23, Y+22	; 0x16
    1fda:	8f 89       	ldd	r24, Y+23	; 0x17
    1fdc:	98 8d       	ldd	r25, Y+24	; 0x18
    1fde:	2a ef       	ldi	r18, 0xFA	; 250
    1fe0:	3d ee       	ldi	r19, 0xED	; 237
    1fe2:	4b e6       	ldi	r20, 0x6B	; 107
    1fe4:	50 e4       	ldi	r21, 0x40	; 64
    1fe6:	0e 94 58 26 	call	0x4cb0	; 0x4cb0 <__mulsf3>
    1fea:	dc 01       	movw	r26, r24
    1fec:	cb 01       	movw	r24, r22
    1fee:	89 8b       	std	Y+17, r24	; 0x11
    1ff0:	9a 8b       	std	Y+18, r25	; 0x12
    1ff2:	ab 8b       	std	Y+19, r26	; 0x13
    1ff4:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1ff6:	69 89       	ldd	r22, Y+17	; 0x11
    1ff8:	7a 89       	ldd	r23, Y+18	; 0x12
    1ffa:	8b 89       	ldd	r24, Y+19	; 0x13
    1ffc:	9c 89       	ldd	r25, Y+20	; 0x14
    1ffe:	20 e0       	ldi	r18, 0x00	; 0
    2000:	30 e0       	ldi	r19, 0x00	; 0
    2002:	40 e8       	ldi	r20, 0x80	; 128
    2004:	5f e3       	ldi	r21, 0x3F	; 63
    2006:	0e 94 5e 28 	call	0x50bc	; 0x50bc <__ltsf2>
    200a:	88 23       	and	r24, r24
    200c:	1c f4       	brge	.+6      	; 0x2014 <buzzer_delay+0x68>
		__ticks = 1;
    200e:	81 e0       	ldi	r24, 0x01	; 1
    2010:	88 8b       	std	Y+16, r24	; 0x10
    2012:	91 c0       	rjmp	.+290    	; 0x2136 <buzzer_delay+0x18a>
	else if (__tmp > 255)
    2014:	69 89       	ldd	r22, Y+17	; 0x11
    2016:	7a 89       	ldd	r23, Y+18	; 0x12
    2018:	8b 89       	ldd	r24, Y+19	; 0x13
    201a:	9c 89       	ldd	r25, Y+20	; 0x14
    201c:	20 e0       	ldi	r18, 0x00	; 0
    201e:	30 e0       	ldi	r19, 0x00	; 0
    2020:	4f e7       	ldi	r20, 0x7F	; 127
    2022:	53 e4       	ldi	r21, 0x43	; 67
    2024:	0e 94 fe 27 	call	0x4ffc	; 0x4ffc <__gtsf2>
    2028:	18 16       	cp	r1, r24
    202a:	0c f0       	brlt	.+2      	; 0x202e <buzzer_delay+0x82>
    202c:	7b c0       	rjmp	.+246    	; 0x2124 <buzzer_delay+0x178>
	{
		_delay_ms(__us / 1000.0);
    202e:	6d 89       	ldd	r22, Y+21	; 0x15
    2030:	7e 89       	ldd	r23, Y+22	; 0x16
    2032:	8f 89       	ldd	r24, Y+23	; 0x17
    2034:	98 8d       	ldd	r25, Y+24	; 0x18
    2036:	20 e0       	ldi	r18, 0x00	; 0
    2038:	30 e0       	ldi	r19, 0x00	; 0
    203a:	4a e7       	ldi	r20, 0x7A	; 122
    203c:	54 e4       	ldi	r21, 0x44	; 68
    203e:	0e 94 52 27 	call	0x4ea4	; 0x4ea4 <__divsf3>
    2042:	dc 01       	movw	r26, r24
    2044:	cb 01       	movw	r24, r22
    2046:	8c 87       	std	Y+12, r24	; 0x0c
    2048:	9d 87       	std	Y+13, r25	; 0x0d
    204a:	ae 87       	std	Y+14, r26	; 0x0e
    204c:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    204e:	6c 85       	ldd	r22, Y+12	; 0x0c
    2050:	7d 85       	ldd	r23, Y+13	; 0x0d
    2052:	8e 85       	ldd	r24, Y+14	; 0x0e
    2054:	9f 85       	ldd	r25, Y+15	; 0x0f
    2056:	2d ec       	ldi	r18, 0xCD	; 205
    2058:	3c ec       	ldi	r19, 0xCC	; 204
    205a:	4c e2       	ldi	r20, 0x2C	; 44
    205c:	55 e4       	ldi	r21, 0x45	; 69
    205e:	0e 94 58 26 	call	0x4cb0	; 0x4cb0 <__mulsf3>
    2062:	dc 01       	movw	r26, r24
    2064:	cb 01       	movw	r24, r22
    2066:	88 87       	std	Y+8, r24	; 0x08
    2068:	99 87       	std	Y+9, r25	; 0x09
    206a:	aa 87       	std	Y+10, r26	; 0x0a
    206c:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    206e:	68 85       	ldd	r22, Y+8	; 0x08
    2070:	79 85       	ldd	r23, Y+9	; 0x09
    2072:	8a 85       	ldd	r24, Y+10	; 0x0a
    2074:	9b 85       	ldd	r25, Y+11	; 0x0b
    2076:	20 e0       	ldi	r18, 0x00	; 0
    2078:	30 e0       	ldi	r19, 0x00	; 0
    207a:	40 e8       	ldi	r20, 0x80	; 128
    207c:	5f e3       	ldi	r21, 0x3F	; 63
    207e:	0e 94 5e 28 	call	0x50bc	; 0x50bc <__ltsf2>
    2082:	88 23       	and	r24, r24
    2084:	2c f4       	brge	.+10     	; 0x2090 <buzzer_delay+0xe4>
		__ticks = 1;
    2086:	81 e0       	ldi	r24, 0x01	; 1
    2088:	90 e0       	ldi	r25, 0x00	; 0
    208a:	9f 83       	std	Y+7, r25	; 0x07
    208c:	8e 83       	std	Y+6, r24	; 0x06
    208e:	3f c0       	rjmp	.+126    	; 0x210e <buzzer_delay+0x162>
	else if (__tmp > 65535)
    2090:	68 85       	ldd	r22, Y+8	; 0x08
    2092:	79 85       	ldd	r23, Y+9	; 0x09
    2094:	8a 85       	ldd	r24, Y+10	; 0x0a
    2096:	9b 85       	ldd	r25, Y+11	; 0x0b
    2098:	20 e0       	ldi	r18, 0x00	; 0
    209a:	3f ef       	ldi	r19, 0xFF	; 255
    209c:	4f e7       	ldi	r20, 0x7F	; 127
    209e:	57 e4       	ldi	r21, 0x47	; 71
    20a0:	0e 94 fe 27 	call	0x4ffc	; 0x4ffc <__gtsf2>
    20a4:	18 16       	cp	r1, r24
    20a6:	4c f5       	brge	.+82     	; 0x20fa <buzzer_delay+0x14e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20a8:	6c 85       	ldd	r22, Y+12	; 0x0c
    20aa:	7d 85       	ldd	r23, Y+13	; 0x0d
    20ac:	8e 85       	ldd	r24, Y+14	; 0x0e
    20ae:	9f 85       	ldd	r25, Y+15	; 0x0f
    20b0:	20 e0       	ldi	r18, 0x00	; 0
    20b2:	30 e0       	ldi	r19, 0x00	; 0
    20b4:	40 e2       	ldi	r20, 0x20	; 32
    20b6:	51 e4       	ldi	r21, 0x41	; 65
    20b8:	0e 94 58 26 	call	0x4cb0	; 0x4cb0 <__mulsf3>
    20bc:	dc 01       	movw	r26, r24
    20be:	cb 01       	movw	r24, r22
    20c0:	bc 01       	movw	r22, r24
    20c2:	cd 01       	movw	r24, r26
    20c4:	0e 94 82 24 	call	0x4904	; 0x4904 <__fixunssfsi>
    20c8:	dc 01       	movw	r26, r24
    20ca:	cb 01       	movw	r24, r22
    20cc:	9f 83       	std	Y+7, r25	; 0x07
    20ce:	8e 83       	std	Y+6, r24	; 0x06
    20d0:	0f c0       	rjmp	.+30     	; 0x20f0 <buzzer_delay+0x144>
    20d2:	84 e1       	ldi	r24, 0x14	; 20
    20d4:	91 e0       	ldi	r25, 0x01	; 1
    20d6:	9d 83       	std	Y+5, r25	; 0x05
    20d8:	8c 83       	std	Y+4, r24	; 0x04
    20da:	8c 81       	ldd	r24, Y+4	; 0x04
    20dc:	9d 81       	ldd	r25, Y+5	; 0x05
    20de:	01 97       	sbiw	r24, 0x01	; 1
    20e0:	f1 f7       	brne	.-4      	; 0x20de <buzzer_delay+0x132>
    20e2:	9d 83       	std	Y+5, r25	; 0x05
    20e4:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20e6:	8e 81       	ldd	r24, Y+6	; 0x06
    20e8:	9f 81       	ldd	r25, Y+7	; 0x07
    20ea:	01 97       	sbiw	r24, 0x01	; 1
    20ec:	9f 83       	std	Y+7, r25	; 0x07
    20ee:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20f0:	8e 81       	ldd	r24, Y+6	; 0x06
    20f2:	9f 81       	ldd	r25, Y+7	; 0x07
    20f4:	00 97       	sbiw	r24, 0x00	; 0
    20f6:	69 f7       	brne	.-38     	; 0x20d2 <buzzer_delay+0x126>
    20f8:	24 c0       	rjmp	.+72     	; 0x2142 <buzzer_delay+0x196>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20fa:	68 85       	ldd	r22, Y+8	; 0x08
    20fc:	79 85       	ldd	r23, Y+9	; 0x09
    20fe:	8a 85       	ldd	r24, Y+10	; 0x0a
    2100:	9b 85       	ldd	r25, Y+11	; 0x0b
    2102:	0e 94 82 24 	call	0x4904	; 0x4904 <__fixunssfsi>
    2106:	dc 01       	movw	r26, r24
    2108:	cb 01       	movw	r24, r22
    210a:	9f 83       	std	Y+7, r25	; 0x07
    210c:	8e 83       	std	Y+6, r24	; 0x06
    210e:	8e 81       	ldd	r24, Y+6	; 0x06
    2110:	9f 81       	ldd	r25, Y+7	; 0x07
    2112:	9b 83       	std	Y+3, r25	; 0x03
    2114:	8a 83       	std	Y+2, r24	; 0x02
    2116:	8a 81       	ldd	r24, Y+2	; 0x02
    2118:	9b 81       	ldd	r25, Y+3	; 0x03
    211a:	01 97       	sbiw	r24, 0x01	; 1
    211c:	f1 f7       	brne	.-4      	; 0x211a <buzzer_delay+0x16e>
    211e:	9b 83       	std	Y+3, r25	; 0x03
    2120:	8a 83       	std	Y+2, r24	; 0x02
    2122:	0f c0       	rjmp	.+30     	; 0x2142 <buzzer_delay+0x196>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2124:	69 89       	ldd	r22, Y+17	; 0x11
    2126:	7a 89       	ldd	r23, Y+18	; 0x12
    2128:	8b 89       	ldd	r24, Y+19	; 0x13
    212a:	9c 89       	ldd	r25, Y+20	; 0x14
    212c:	0e 94 82 24 	call	0x4904	; 0x4904 <__fixunssfsi>
    2130:	dc 01       	movw	r26, r24
    2132:	cb 01       	movw	r24, r22
    2134:	88 8b       	std	Y+16, r24	; 0x10
    2136:	88 89       	ldd	r24, Y+16	; 0x10
    2138:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    213a:	89 81       	ldd	r24, Y+1	; 0x01
    213c:	8a 95       	dec	r24
    213e:	f1 f7       	brne	.-4      	; 0x213c <buzzer_delay+0x190>
    2140:	89 83       	std	Y+1, r24	; 0x01
    2142:	89 8d       	ldd	r24, Y+25	; 0x19
    2144:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2146:	01 96       	adiw	r24, 0x01	; 1
    2148:	9a 8f       	std	Y+26, r25	; 0x1a
    214a:	89 8f       	std	Y+25, r24	; 0x19
    214c:	89 8d       	ldd	r24, Y+25	; 0x19
    214e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2150:	8a 30       	cpi	r24, 0x0A	; 10
    2152:	91 05       	cpc	r25, r1
    2154:	08 f4       	brcc	.+2      	; 0x2158 <buzzer_delay+0x1ac>
    2156:	37 cf       	rjmp	.-402    	; 0x1fc6 <buzzer_delay+0x1a>
	{
		_delay_us(100);
	}
}
    2158:	6a 96       	adiw	r28, 0x1a	; 26
    215a:	0f b6       	in	r0, 0x3f	; 63
    215c:	f8 94       	cli
    215e:	de bf       	out	0x3e, r29	; 62
    2160:	0f be       	out	0x3f, r0	; 63
    2162:	cd bf       	out	0x3d, r28	; 61
    2164:	cf 91       	pop	r28
    2166:	df 91       	pop	r29
    2168:	08 95       	ret

0000216a <BUZZER_ON>:

void BUZZER_ON()
{
    216a:	df 93       	push	r29
    216c:	cf 93       	push	r28
    216e:	00 d0       	rcall	.+0      	; 0x2170 <BUZZER_ON+0x6>
    2170:	cd b7       	in	r28, 0x3d	; 61
    2172:	de b7       	in	r29, 0x3e	; 62

int i=0; 
    2174:	1b 82       	std	Y+3, r1	; 0x03
    2176:	1a 82       	std	Y+2, r1	; 0x02
   unsigned char port_C_copy;
   port_C_copy = PORTC;
    2178:	e8 e2       	ldi	r30, 0x28	; 40
    217a:	f0 e0       	ldi	r31, 0x00	; 0
    217c:	80 81       	ld	r24, Z
    217e:	89 83       	std	Y+1, r24	; 0x01
   port_C_copy = port_C_copy | 0x08;
    2180:	89 81       	ldd	r24, Y+1	; 0x01
    2182:	88 60       	ori	r24, 0x08	; 8
    2184:	89 83       	std	Y+1, r24	; 0x01
   PORTC = port_C_copy;	
    2186:	e8 e2       	ldi	r30, 0x28	; 40
    2188:	f0 e0       	ldi	r31, 0x00	; 0
    218a:	89 81       	ldd	r24, Y+1	; 0x01
    218c:	80 83       	st	Z, r24
   //for(i=0;i<10;i++)
	//tick_timer();
	buzzer_delay();
    218e:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <buzzer_delay>
   port_C_copy = PORTC;
    2192:	e8 e2       	ldi	r30, 0x28	; 40
    2194:	f0 e0       	ldi	r31, 0x00	; 0
    2196:	80 81       	ld	r24, Z
    2198:	89 83       	std	Y+1, r24	; 0x01
   port_C_copy = port_C_copy & 0xF7;
    219a:	89 81       	ldd	r24, Y+1	; 0x01
    219c:	87 7f       	andi	r24, 0xF7	; 247
    219e:	89 83       	std	Y+1, r24	; 0x01
   PORTC = port_C_copy;	
    21a0:	e8 e2       	ldi	r30, 0x28	; 40
    21a2:	f0 e0       	ldi	r31, 0x00	; 0
    21a4:	89 81       	ldd	r24, Y+1	; 0x01
    21a6:	80 83       	st	Z, r24

//PORTC = 0x08;			//Set pin3 to turn the "buzzer ON"
//buzzer_delay();			//delay


}
    21a8:	0f 90       	pop	r0
    21aa:	0f 90       	pop	r0
    21ac:	0f 90       	pop	r0
    21ae:	cf 91       	pop	r28
    21b0:	df 91       	pop	r29
    21b2:	08 95       	ret

000021b4 <BUZZER_OFF>:


void BUZZER_OFF()
{
    21b4:	df 93       	push	r29
    21b6:	cf 93       	push	r28
    21b8:	cd b7       	in	r28, 0x3d	; 61
    21ba:	de b7       	in	r29, 0x3e	; 62

PORTC = 0x00;			//Clear pin3 to turn the "buzzer OFF"
    21bc:	e8 e2       	ldi	r30, 0x28	; 40
    21be:	f0 e0       	ldi	r31, 0x00	; 0
    21c0:	10 82       	st	Z, r1
buzzer_delay();			//delay
    21c2:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <buzzer_delay>

}
    21c6:	cf 91       	pop	r28
    21c8:	df 91       	pop	r29
    21ca:	08 95       	ret

000021cc <servo1_pin_config>:
unsigned const int grabberClose = 122;


//Configure PORTB 5 pin for servo motor 1 operation
void servo1_pin_config (void)
{
    21cc:	df 93       	push	r29
    21ce:	cf 93       	push	r28
    21d0:	cd b7       	in	r28, 0x3d	; 61
    21d2:	de b7       	in	r29, 0x3e	; 62
 DDRB  = DDRB | 0x20;  //making PORTB 5 pin output
    21d4:	a4 e2       	ldi	r26, 0x24	; 36
    21d6:	b0 e0       	ldi	r27, 0x00	; 0
    21d8:	e4 e2       	ldi	r30, 0x24	; 36
    21da:	f0 e0       	ldi	r31, 0x00	; 0
    21dc:	80 81       	ld	r24, Z
    21de:	80 62       	ori	r24, 0x20	; 32
    21e0:	8c 93       	st	X, r24
 PORTB = PORTB | 0x20; //setting PORTB 5 pin to logic 1
    21e2:	a5 e2       	ldi	r26, 0x25	; 37
    21e4:	b0 e0       	ldi	r27, 0x00	; 0
    21e6:	e5 e2       	ldi	r30, 0x25	; 37
    21e8:	f0 e0       	ldi	r31, 0x00	; 0
    21ea:	80 81       	ld	r24, Z
    21ec:	80 62       	ori	r24, 0x20	; 32
    21ee:	8c 93       	st	X, r24
}
    21f0:	cf 91       	pop	r28
    21f2:	df 91       	pop	r29
    21f4:	08 95       	ret

000021f6 <servo2_pin_config>:

//Configure PORTB 6 pin for servo motor 2 operation
void servo2_pin_config (void)
{
    21f6:	df 93       	push	r29
    21f8:	cf 93       	push	r28
    21fa:	cd b7       	in	r28, 0x3d	; 61
    21fc:	de b7       	in	r29, 0x3e	; 62
 DDRB  = DDRB | 0x40;  //making PORTB 6 pin output
    21fe:	a4 e2       	ldi	r26, 0x24	; 36
    2200:	b0 e0       	ldi	r27, 0x00	; 0
    2202:	e4 e2       	ldi	r30, 0x24	; 36
    2204:	f0 e0       	ldi	r31, 0x00	; 0
    2206:	80 81       	ld	r24, Z
    2208:	80 64       	ori	r24, 0x40	; 64
    220a:	8c 93       	st	X, r24
 PORTB = PORTB | 0x40; //setting PORTB 6 pin to logic 1
    220c:	a5 e2       	ldi	r26, 0x25	; 37
    220e:	b0 e0       	ldi	r27, 0x00	; 0
    2210:	e5 e2       	ldi	r30, 0x25	; 37
    2212:	f0 e0       	ldi	r31, 0x00	; 0
    2214:	80 81       	ld	r24, Z
    2216:	80 64       	ori	r24, 0x40	; 64
    2218:	8c 93       	st	X, r24
}
    221a:	cf 91       	pop	r28
    221c:	df 91       	pop	r29
    221e:	08 95       	ret

00002220 <servo3_pin_config>:

//Configure PORTB 7 pin for servo motor 3 operation
void servo3_pin_config (void)
{
    2220:	df 93       	push	r29
    2222:	cf 93       	push	r28
    2224:	cd b7       	in	r28, 0x3d	; 61
    2226:	de b7       	in	r29, 0x3e	; 62
 DDRB  = DDRB | 0x80;  //making PORTB 7 pin output
    2228:	a4 e2       	ldi	r26, 0x24	; 36
    222a:	b0 e0       	ldi	r27, 0x00	; 0
    222c:	e4 e2       	ldi	r30, 0x24	; 36
    222e:	f0 e0       	ldi	r31, 0x00	; 0
    2230:	80 81       	ld	r24, Z
    2232:	80 68       	ori	r24, 0x80	; 128
    2234:	8c 93       	st	X, r24
 PORTB = PORTB | 0x80; //setting PORTB 7 pin to logic 1
    2236:	a5 e2       	ldi	r26, 0x25	; 37
    2238:	b0 e0       	ldi	r27, 0x00	; 0
    223a:	e5 e2       	ldi	r30, 0x25	; 37
    223c:	f0 e0       	ldi	r31, 0x00	; 0
    223e:	80 81       	ld	r24, Z
    2240:	80 68       	ori	r24, 0x80	; 128
    2242:	8c 93       	st	X, r24
}
    2244:	cf 91       	pop	r28
    2246:	df 91       	pop	r29
    2248:	08 95       	ret

0000224a <arm_port_init>:

//Initialize the ports
void arm_port_init(void)
{
    224a:	df 93       	push	r29
    224c:	cf 93       	push	r28
    224e:	cd b7       	in	r28, 0x3d	; 61
    2250:	de b7       	in	r29, 0x3e	; 62
 servo1_pin_config(); //Configure PORTB 5 pin for servo motor 1 operation
    2252:	0e 94 e6 10 	call	0x21cc	; 0x21cc <servo1_pin_config>
 servo2_pin_config(); //Configure PORTB 6 pin for servo motor 2 operation
    2256:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <servo2_pin_config>
 servo3_pin_config(); //Configure PORTB 7 pin for servo motor 3 operation
    225a:	0e 94 10 11 	call	0x2220	; 0x2220 <servo3_pin_config>
}
    225e:	cf 91       	pop	r28
    2260:	df 91       	pop	r29
    2262:	08 95       	ret

00002264 <timer1_init>:
//TIMER1 initialization in 10 bit fast PWM mode
//prescale:256
// WGM: 7) PWM 10bit fast, TOP=0x03FF
// actual value: 42.187Hz
void timer1_init(void)
{
    2264:	df 93       	push	r29
    2266:	cf 93       	push	r28
    2268:	cd b7       	in	r28, 0x3d	; 61
    226a:	de b7       	in	r29, 0x3e	; 62
 TCCR1B = 0x00; //stop
    226c:	e1 e8       	ldi	r30, 0x81	; 129
    226e:	f0 e0       	ldi	r31, 0x00	; 0
    2270:	10 82       	st	Z, r1
 TCNT1H = 0xFC; //Counter high value to which OCR1xH value is to be compared with
    2272:	e5 e8       	ldi	r30, 0x85	; 133
    2274:	f0 e0       	ldi	r31, 0x00	; 0
    2276:	8c ef       	ldi	r24, 0xFC	; 252
    2278:	80 83       	st	Z, r24
 TCNT1L = 0x01;        //Counter low value to which OCR1xH value is to be compared with
    227a:	e4 e8       	ldi	r30, 0x84	; 132
    227c:	f0 e0       	ldi	r31, 0x00	; 0
    227e:	81 e0       	ldi	r24, 0x01	; 1
    2280:	80 83       	st	Z, r24
 OCR1AH = 0x03;        //Output compare eegister high value for servo 1
    2282:	e9 e8       	ldi	r30, 0x89	; 137
    2284:	f0 e0       	ldi	r31, 0x00	; 0
    2286:	83 e0       	ldi	r24, 0x03	; 3
    2288:	80 83       	st	Z, r24
 OCR1AL = 0xFF;        //Output Compare Register low Value For servo 1
    228a:	e8 e8       	ldi	r30, 0x88	; 136
    228c:	f0 e0       	ldi	r31, 0x00	; 0
    228e:	8f ef       	ldi	r24, 0xFF	; 255
    2290:	80 83       	st	Z, r24
 OCR1BH = 0x03;        //Output compare eegister high value for servo 2
    2292:	eb e8       	ldi	r30, 0x8B	; 139
    2294:	f0 e0       	ldi	r31, 0x00	; 0
    2296:	83 e0       	ldi	r24, 0x03	; 3
    2298:	80 83       	st	Z, r24
 OCR1BL = 0xFF;        //Output Compare Register low Value For servo 2
    229a:	ea e8       	ldi	r30, 0x8A	; 138
    229c:	f0 e0       	ldi	r31, 0x00	; 0
    229e:	8f ef       	ldi	r24, 0xFF	; 255
    22a0:	80 83       	st	Z, r24
 OCR1CH = 0x03;        ///Output compare eegister high value for servo 3
    22a2:	ed e8       	ldi	r30, 0x8D	; 141
    22a4:	f0 e0       	ldi	r31, 0x00	; 0
    22a6:	83 e0       	ldi	r24, 0x03	; 3
    22a8:	80 83       	st	Z, r24
 OCR1CL = 0xFF;        //Output Compare Register low Value For servo 3
    22aa:	ec e8       	ldi	r30, 0x8C	; 140
    22ac:	f0 e0       	ldi	r31, 0x00	; 0
    22ae:	8f ef       	ldi	r24, 0xFF	; 255
    22b0:	80 83       	st	Z, r24
 ICR1H  = 0x03;
    22b2:	e7 e8       	ldi	r30, 0x87	; 135
    22b4:	f0 e0       	ldi	r31, 0x00	; 0
    22b6:	83 e0       	ldi	r24, 0x03	; 3
    22b8:	80 83       	st	Z, r24
 ICR1L  = 0xFF;
    22ba:	e6 e8       	ldi	r30, 0x86	; 134
    22bc:	f0 e0       	ldi	r31, 0x00	; 0
    22be:	8f ef       	ldi	r24, 0xFF	; 255
    22c0:	80 83       	st	Z, r24
 TCCR1A = 0xAB; /*{COM1A1=1, COM1A0=0; COM1B1=1, COM1B0=0; COM1C1=1 COM1C0=0}
    22c2:	e0 e8       	ldi	r30, 0x80	; 128
    22c4:	f0 e0       	ldi	r31, 0x00	; 0
    22c6:	8b ea       	ldi	r24, 0xAB	; 171
    22c8:	80 83       	st	Z, r24
                                         For Overriding normal port functionalit to OCRnA outputs.
                                  {WGM11=1, WGM10=1} Along With WGM12 in TCCR1B for Selecting FAST PWM Mode*/
 TCCR1C = 0x00;
    22ca:	e2 e8       	ldi	r30, 0x82	; 130
    22cc:	f0 e0       	ldi	r31, 0x00	; 0
    22ce:	10 82       	st	Z, r1
 TCCR1B = 0x0C; //WGM12=1; CS12=1, CS11=0, CS10=0 (Prescaler=256)
    22d0:	e1 e8       	ldi	r30, 0x81	; 129
    22d2:	f0 e0       	ldi	r31, 0x00	; 0
    22d4:	8c e0       	ldi	r24, 0x0C	; 12
    22d6:	80 83       	st	Z, r24
}
    22d8:	cf 91       	pop	r28
    22da:	df 91       	pop	r29
    22dc:	08 95       	ret

000022de <arm_init_devices>:


//Function to initialize all the peripherals
void arm_init_devices(void)
{
    22de:	df 93       	push	r29
    22e0:	cf 93       	push	r28
    22e2:	cd b7       	in	r28, 0x3d	; 61
    22e4:	de b7       	in	r29, 0x3e	; 62
 cli(); //disable all interrupts
    22e6:	f8 94       	cli
 arm_port_init();
    22e8:	0e 94 25 11 	call	0x224a	; 0x224a <arm_port_init>
 timer1_init();
    22ec:	0e 94 32 11 	call	0x2264	; 0x2264 <timer1_init>
 sei(); //re-enable interrupts
    22f0:	78 94       	sei
}
    22f2:	cf 91       	pop	r28
    22f4:	df 91       	pop	r29
    22f6:	08 95       	ret

000022f8 <servo_1>:


//Function to rotate Servo 1 by a specified angle in the multiples of 2.25 degrees
void servo_1(unsigned char degrees)
{
    22f8:	0f 93       	push	r16
    22fa:	1f 93       	push	r17
    22fc:	df 93       	push	r29
    22fe:	cf 93       	push	r28
    2300:	00 d0       	rcall	.+0      	; 0x2302 <servo_1+0xa>
    2302:	0f 92       	push	r0
    2304:	0f 92       	push	r0
    2306:	cd b7       	in	r28, 0x3d	; 61
    2308:	de b7       	in	r29, 0x3e	; 62
    230a:	8d 83       	std	Y+5, r24	; 0x05
 float PositionPanServo = 0;
    230c:	80 e0       	ldi	r24, 0x00	; 0
    230e:	90 e0       	ldi	r25, 0x00	; 0
    2310:	a0 e0       	ldi	r26, 0x00	; 0
    2312:	b0 e0       	ldi	r27, 0x00	; 0
    2314:	89 83       	std	Y+1, r24	; 0x01
    2316:	9a 83       	std	Y+2, r25	; 0x02
    2318:	ab 83       	std	Y+3, r26	; 0x03
    231a:	bc 83       	std	Y+4, r27	; 0x04
 PositionPanServo = ((float)degrees / 2.25) + 21.0;
    231c:	8d 81       	ldd	r24, Y+5	; 0x05
    231e:	88 2f       	mov	r24, r24
    2320:	90 e0       	ldi	r25, 0x00	; 0
    2322:	a0 e0       	ldi	r26, 0x00	; 0
    2324:	b0 e0       	ldi	r27, 0x00	; 0
    2326:	bc 01       	movw	r22, r24
    2328:	cd 01       	movw	r24, r26
    232a:	0e 94 40 29 	call	0x5280	; 0x5280 <__floatunsisf>
    232e:	dc 01       	movw	r26, r24
    2330:	cb 01       	movw	r24, r22
    2332:	bc 01       	movw	r22, r24
    2334:	cd 01       	movw	r24, r26
    2336:	20 e0       	ldi	r18, 0x00	; 0
    2338:	30 e0       	ldi	r19, 0x00	; 0
    233a:	40 e1       	ldi	r20, 0x10	; 16
    233c:	50 e4       	ldi	r21, 0x40	; 64
    233e:	0e 94 52 27 	call	0x4ea4	; 0x4ea4 <__divsf3>
    2342:	dc 01       	movw	r26, r24
    2344:	cb 01       	movw	r24, r22
    2346:	bc 01       	movw	r22, r24
    2348:	cd 01       	movw	r24, r26
    234a:	20 e0       	ldi	r18, 0x00	; 0
    234c:	30 e0       	ldi	r19, 0x00	; 0
    234e:	48 ea       	ldi	r20, 0xA8	; 168
    2350:	51 e4       	ldi	r21, 0x41	; 65
    2352:	0e 94 2b 26 	call	0x4c56	; 0x4c56 <__addsf3>
    2356:	dc 01       	movw	r26, r24
    2358:	cb 01       	movw	r24, r22
    235a:	89 83       	std	Y+1, r24	; 0x01
    235c:	9a 83       	std	Y+2, r25	; 0x02
    235e:	ab 83       	std	Y+3, r26	; 0x03
    2360:	bc 83       	std	Y+4, r27	; 0x04
 OCR1AH = 0x00;
    2362:	e9 e8       	ldi	r30, 0x89	; 137
    2364:	f0 e0       	ldi	r31, 0x00	; 0
    2366:	10 82       	st	Z, r1
 OCR1AL = (unsigned char) PositionPanServo;
    2368:	08 e8       	ldi	r16, 0x88	; 136
    236a:	10 e0       	ldi	r17, 0x00	; 0
    236c:	69 81       	ldd	r22, Y+1	; 0x01
    236e:	7a 81       	ldd	r23, Y+2	; 0x02
    2370:	8b 81       	ldd	r24, Y+3	; 0x03
    2372:	9c 81       	ldd	r25, Y+4	; 0x04
    2374:	0e 94 82 24 	call	0x4904	; 0x4904 <__fixunssfsi>
    2378:	dc 01       	movw	r26, r24
    237a:	cb 01       	movw	r24, r22
    237c:	f8 01       	movw	r30, r16
    237e:	80 83       	st	Z, r24
}
    2380:	0f 90       	pop	r0
    2382:	0f 90       	pop	r0
    2384:	0f 90       	pop	r0
    2386:	0f 90       	pop	r0
    2388:	0f 90       	pop	r0
    238a:	cf 91       	pop	r28
    238c:	df 91       	pop	r29
    238e:	1f 91       	pop	r17
    2390:	0f 91       	pop	r16
    2392:	08 95       	ret

00002394 <servo_2>:


//Function to rotate Servo 2 by a specified angle in the multiples of 2.25 degrees
void servo_2(unsigned char degrees)
{
    2394:	0f 93       	push	r16
    2396:	1f 93       	push	r17
    2398:	df 93       	push	r29
    239a:	cf 93       	push	r28
    239c:	00 d0       	rcall	.+0      	; 0x239e <servo_2+0xa>
    239e:	0f 92       	push	r0
    23a0:	0f 92       	push	r0
    23a2:	cd b7       	in	r28, 0x3d	; 61
    23a4:	de b7       	in	r29, 0x3e	; 62
    23a6:	8d 83       	std	Y+5, r24	; 0x05
 float PositionTiltServo = 0;
    23a8:	80 e0       	ldi	r24, 0x00	; 0
    23aa:	90 e0       	ldi	r25, 0x00	; 0
    23ac:	a0 e0       	ldi	r26, 0x00	; 0
    23ae:	b0 e0       	ldi	r27, 0x00	; 0
    23b0:	89 83       	std	Y+1, r24	; 0x01
    23b2:	9a 83       	std	Y+2, r25	; 0x02
    23b4:	ab 83       	std	Y+3, r26	; 0x03
    23b6:	bc 83       	std	Y+4, r27	; 0x04
 PositionTiltServo = ((float)degrees / 2.25) + 21.0;
    23b8:	8d 81       	ldd	r24, Y+5	; 0x05
    23ba:	88 2f       	mov	r24, r24
    23bc:	90 e0       	ldi	r25, 0x00	; 0
    23be:	a0 e0       	ldi	r26, 0x00	; 0
    23c0:	b0 e0       	ldi	r27, 0x00	; 0
    23c2:	bc 01       	movw	r22, r24
    23c4:	cd 01       	movw	r24, r26
    23c6:	0e 94 40 29 	call	0x5280	; 0x5280 <__floatunsisf>
    23ca:	dc 01       	movw	r26, r24
    23cc:	cb 01       	movw	r24, r22
    23ce:	bc 01       	movw	r22, r24
    23d0:	cd 01       	movw	r24, r26
    23d2:	20 e0       	ldi	r18, 0x00	; 0
    23d4:	30 e0       	ldi	r19, 0x00	; 0
    23d6:	40 e1       	ldi	r20, 0x10	; 16
    23d8:	50 e4       	ldi	r21, 0x40	; 64
    23da:	0e 94 52 27 	call	0x4ea4	; 0x4ea4 <__divsf3>
    23de:	dc 01       	movw	r26, r24
    23e0:	cb 01       	movw	r24, r22
    23e2:	bc 01       	movw	r22, r24
    23e4:	cd 01       	movw	r24, r26
    23e6:	20 e0       	ldi	r18, 0x00	; 0
    23e8:	30 e0       	ldi	r19, 0x00	; 0
    23ea:	48 ea       	ldi	r20, 0xA8	; 168
    23ec:	51 e4       	ldi	r21, 0x41	; 65
    23ee:	0e 94 2b 26 	call	0x4c56	; 0x4c56 <__addsf3>
    23f2:	dc 01       	movw	r26, r24
    23f4:	cb 01       	movw	r24, r22
    23f6:	89 83       	std	Y+1, r24	; 0x01
    23f8:	9a 83       	std	Y+2, r25	; 0x02
    23fa:	ab 83       	std	Y+3, r26	; 0x03
    23fc:	bc 83       	std	Y+4, r27	; 0x04
 OCR1BH = 0x00;
    23fe:	eb e8       	ldi	r30, 0x8B	; 139
    2400:	f0 e0       	ldi	r31, 0x00	; 0
    2402:	10 82       	st	Z, r1
 OCR1BL = (unsigned char) PositionTiltServo;
    2404:	0a e8       	ldi	r16, 0x8A	; 138
    2406:	10 e0       	ldi	r17, 0x00	; 0
    2408:	69 81       	ldd	r22, Y+1	; 0x01
    240a:	7a 81       	ldd	r23, Y+2	; 0x02
    240c:	8b 81       	ldd	r24, Y+3	; 0x03
    240e:	9c 81       	ldd	r25, Y+4	; 0x04
    2410:	0e 94 82 24 	call	0x4904	; 0x4904 <__fixunssfsi>
    2414:	dc 01       	movw	r26, r24
    2416:	cb 01       	movw	r24, r22
    2418:	f8 01       	movw	r30, r16
    241a:	80 83       	st	Z, r24
}
    241c:	0f 90       	pop	r0
    241e:	0f 90       	pop	r0
    2420:	0f 90       	pop	r0
    2422:	0f 90       	pop	r0
    2424:	0f 90       	pop	r0
    2426:	cf 91       	pop	r28
    2428:	df 91       	pop	r29
    242a:	1f 91       	pop	r17
    242c:	0f 91       	pop	r16
    242e:	08 95       	ret

00002430 <servo_3>:

//Function to rotate Servo 3 by a specified angle in the multiples of 2.25 degrees
void servo_3(unsigned char degrees)
{
    2430:	0f 93       	push	r16
    2432:	1f 93       	push	r17
    2434:	df 93       	push	r29
    2436:	cf 93       	push	r28
    2438:	00 d0       	rcall	.+0      	; 0x243a <servo_3+0xa>
    243a:	0f 92       	push	r0
    243c:	0f 92       	push	r0
    243e:	cd b7       	in	r28, 0x3d	; 61
    2440:	de b7       	in	r29, 0x3e	; 62
    2442:	8d 83       	std	Y+5, r24	; 0x05
 float PositionTiltServo = 0;
    2444:	80 e0       	ldi	r24, 0x00	; 0
    2446:	90 e0       	ldi	r25, 0x00	; 0
    2448:	a0 e0       	ldi	r26, 0x00	; 0
    244a:	b0 e0       	ldi	r27, 0x00	; 0
    244c:	89 83       	std	Y+1, r24	; 0x01
    244e:	9a 83       	std	Y+2, r25	; 0x02
    2450:	ab 83       	std	Y+3, r26	; 0x03
    2452:	bc 83       	std	Y+4, r27	; 0x04
 PositionTiltServo = ((float)degrees / 2.25) + 21.0;
    2454:	8d 81       	ldd	r24, Y+5	; 0x05
    2456:	88 2f       	mov	r24, r24
    2458:	90 e0       	ldi	r25, 0x00	; 0
    245a:	a0 e0       	ldi	r26, 0x00	; 0
    245c:	b0 e0       	ldi	r27, 0x00	; 0
    245e:	bc 01       	movw	r22, r24
    2460:	cd 01       	movw	r24, r26
    2462:	0e 94 40 29 	call	0x5280	; 0x5280 <__floatunsisf>
    2466:	dc 01       	movw	r26, r24
    2468:	cb 01       	movw	r24, r22
    246a:	bc 01       	movw	r22, r24
    246c:	cd 01       	movw	r24, r26
    246e:	20 e0       	ldi	r18, 0x00	; 0
    2470:	30 e0       	ldi	r19, 0x00	; 0
    2472:	40 e1       	ldi	r20, 0x10	; 16
    2474:	50 e4       	ldi	r21, 0x40	; 64
    2476:	0e 94 52 27 	call	0x4ea4	; 0x4ea4 <__divsf3>
    247a:	dc 01       	movw	r26, r24
    247c:	cb 01       	movw	r24, r22
    247e:	bc 01       	movw	r22, r24
    2480:	cd 01       	movw	r24, r26
    2482:	20 e0       	ldi	r18, 0x00	; 0
    2484:	30 e0       	ldi	r19, 0x00	; 0
    2486:	48 ea       	ldi	r20, 0xA8	; 168
    2488:	51 e4       	ldi	r21, 0x41	; 65
    248a:	0e 94 2b 26 	call	0x4c56	; 0x4c56 <__addsf3>
    248e:	dc 01       	movw	r26, r24
    2490:	cb 01       	movw	r24, r22
    2492:	89 83       	std	Y+1, r24	; 0x01
    2494:	9a 83       	std	Y+2, r25	; 0x02
    2496:	ab 83       	std	Y+3, r26	; 0x03
    2498:	bc 83       	std	Y+4, r27	; 0x04
 OCR1CH = 0x00;
    249a:	ed e8       	ldi	r30, 0x8D	; 141
    249c:	f0 e0       	ldi	r31, 0x00	; 0
    249e:	10 82       	st	Z, r1
 OCR1CL = (unsigned char) PositionTiltServo;
    24a0:	0c e8       	ldi	r16, 0x8C	; 140
    24a2:	10 e0       	ldi	r17, 0x00	; 0
    24a4:	69 81       	ldd	r22, Y+1	; 0x01
    24a6:	7a 81       	ldd	r23, Y+2	; 0x02
    24a8:	8b 81       	ldd	r24, Y+3	; 0x03
    24aa:	9c 81       	ldd	r25, Y+4	; 0x04
    24ac:	0e 94 82 24 	call	0x4904	; 0x4904 <__fixunssfsi>
    24b0:	dc 01       	movw	r26, r24
    24b2:	cb 01       	movw	r24, r22
    24b4:	f8 01       	movw	r30, r16
    24b6:	80 83       	st	Z, r24
}
    24b8:	0f 90       	pop	r0
    24ba:	0f 90       	pop	r0
    24bc:	0f 90       	pop	r0
    24be:	0f 90       	pop	r0
    24c0:	0f 90       	pop	r0
    24c2:	cf 91       	pop	r28
    24c4:	df 91       	pop	r29
    24c6:	1f 91       	pop	r17
    24c8:	0f 91       	pop	r16
    24ca:	08 95       	ret

000024cc <servo_1_free>:
//servo_free functions unlocks the servo motors from the any angle
//and make them free by giving 100% duty cycle at the PWM. This function can be used to
//reduce the power consumption of the motor if it is holding load against the gravity.

void servo_1_free (void) //makes servo 1 free rotating
{
    24cc:	df 93       	push	r29
    24ce:	cf 93       	push	r28
    24d0:	cd b7       	in	r28, 0x3d	; 61
    24d2:	de b7       	in	r29, 0x3e	; 62
 OCR1AH = 0x03;
    24d4:	e9 e8       	ldi	r30, 0x89	; 137
    24d6:	f0 e0       	ldi	r31, 0x00	; 0
    24d8:	83 e0       	ldi	r24, 0x03	; 3
    24da:	80 83       	st	Z, r24
 OCR1AL = 0xFF; //Servo 1 off
    24dc:	e8 e8       	ldi	r30, 0x88	; 136
    24de:	f0 e0       	ldi	r31, 0x00	; 0
    24e0:	8f ef       	ldi	r24, 0xFF	; 255
    24e2:	80 83       	st	Z, r24
}
    24e4:	cf 91       	pop	r28
    24e6:	df 91       	pop	r29
    24e8:	08 95       	ret

000024ea <servo_2_free>:

void servo_2_free (void) //makes servo 2 free rotating
{
    24ea:	df 93       	push	r29
    24ec:	cf 93       	push	r28
    24ee:	cd b7       	in	r28, 0x3d	; 61
    24f0:	de b7       	in	r29, 0x3e	; 62
 OCR1BH = 0x03;
    24f2:	eb e8       	ldi	r30, 0x8B	; 139
    24f4:	f0 e0       	ldi	r31, 0x00	; 0
    24f6:	83 e0       	ldi	r24, 0x03	; 3
    24f8:	80 83       	st	Z, r24
 OCR1BL = 0xFF; //Servo 2 off
    24fa:	ea e8       	ldi	r30, 0x8A	; 138
    24fc:	f0 e0       	ldi	r31, 0x00	; 0
    24fe:	8f ef       	ldi	r24, 0xFF	; 255
    2500:	80 83       	st	Z, r24
}
    2502:	cf 91       	pop	r28
    2504:	df 91       	pop	r29
    2506:	08 95       	ret

00002508 <servo_3_free>:

void servo_3_free (void) //makes servo 3 free rotating
{
    2508:	df 93       	push	r29
    250a:	cf 93       	push	r28
    250c:	cd b7       	in	r28, 0x3d	; 61
    250e:	de b7       	in	r29, 0x3e	; 62
 OCR1CH = 0x03;
    2510:	ed e8       	ldi	r30, 0x8D	; 141
    2512:	f0 e0       	ldi	r31, 0x00	; 0
    2514:	83 e0       	ldi	r24, 0x03	; 3
    2516:	80 83       	st	Z, r24
 OCR1CL = 0xFF; //Servo 3 off
    2518:	ec e8       	ldi	r30, 0x8C	; 140
    251a:	f0 e0       	ldi	r31, 0x00	; 0
    251c:	8f ef       	ldi	r24, 0xFF	; 255
    251e:	80 83       	st	Z, r24
}
    2520:	cf 91       	pop	r28
    2522:	df 91       	pop	r29
    2524:	08 95       	ret

00002526 <CameraMiddle>:

void CameraMiddle()
{
    2526:	df 93       	push	r29
    2528:	cf 93       	push	r28
    252a:	cd b7       	in	r28, 0x3d	; 61
    252c:	de b7       	in	r29, 0x3e	; 62
    252e:	2e 97       	sbiw	r28, 0x0e	; 14
    2530:	0f b6       	in	r0, 0x3f	; 63
    2532:	f8 94       	cli
    2534:	de bf       	out	0x3e, r29	; 62
    2536:	0f be       	out	0x3f, r0	; 63
    2538:	cd bf       	out	0x3d, r28	; 61
	servo_3(cameraMiddle);
    253a:	80 91 02 02 	lds	r24, 0x0202
    253e:	90 91 03 02 	lds	r25, 0x0203
    2542:	0e 94 18 12 	call	0x2430	; 0x2430 <servo_3>
    2546:	80 e0       	ldi	r24, 0x00	; 0
    2548:	90 e0       	ldi	r25, 0x00	; 0
    254a:	a8 e4       	ldi	r26, 0x48	; 72
    254c:	b2 e4       	ldi	r27, 0x42	; 66
    254e:	8b 87       	std	Y+11, r24	; 0x0b
    2550:	9c 87       	std	Y+12, r25	; 0x0c
    2552:	ad 87       	std	Y+13, r26	; 0x0d
    2554:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2556:	6b 85       	ldd	r22, Y+11	; 0x0b
    2558:	7c 85       	ldd	r23, Y+12	; 0x0c
    255a:	8d 85       	ldd	r24, Y+13	; 0x0d
    255c:	9e 85       	ldd	r25, Y+14	; 0x0e
    255e:	2d ec       	ldi	r18, 0xCD	; 205
    2560:	3c ec       	ldi	r19, 0xCC	; 204
    2562:	4c e2       	ldi	r20, 0x2C	; 44
    2564:	55 e4       	ldi	r21, 0x45	; 69
    2566:	0e 94 58 26 	call	0x4cb0	; 0x4cb0 <__mulsf3>
    256a:	dc 01       	movw	r26, r24
    256c:	cb 01       	movw	r24, r22
    256e:	8f 83       	std	Y+7, r24	; 0x07
    2570:	98 87       	std	Y+8, r25	; 0x08
    2572:	a9 87       	std	Y+9, r26	; 0x09
    2574:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2576:	6f 81       	ldd	r22, Y+7	; 0x07
    2578:	78 85       	ldd	r23, Y+8	; 0x08
    257a:	89 85       	ldd	r24, Y+9	; 0x09
    257c:	9a 85       	ldd	r25, Y+10	; 0x0a
    257e:	20 e0       	ldi	r18, 0x00	; 0
    2580:	30 e0       	ldi	r19, 0x00	; 0
    2582:	40 e8       	ldi	r20, 0x80	; 128
    2584:	5f e3       	ldi	r21, 0x3F	; 63
    2586:	0e 94 5e 28 	call	0x50bc	; 0x50bc <__ltsf2>
    258a:	88 23       	and	r24, r24
    258c:	2c f4       	brge	.+10     	; 0x2598 <CameraMiddle+0x72>
		__ticks = 1;
    258e:	81 e0       	ldi	r24, 0x01	; 1
    2590:	90 e0       	ldi	r25, 0x00	; 0
    2592:	9e 83       	std	Y+6, r25	; 0x06
    2594:	8d 83       	std	Y+5, r24	; 0x05
    2596:	3f c0       	rjmp	.+126    	; 0x2616 <CameraMiddle+0xf0>
	else if (__tmp > 65535)
    2598:	6f 81       	ldd	r22, Y+7	; 0x07
    259a:	78 85       	ldd	r23, Y+8	; 0x08
    259c:	89 85       	ldd	r24, Y+9	; 0x09
    259e:	9a 85       	ldd	r25, Y+10	; 0x0a
    25a0:	20 e0       	ldi	r18, 0x00	; 0
    25a2:	3f ef       	ldi	r19, 0xFF	; 255
    25a4:	4f e7       	ldi	r20, 0x7F	; 127
    25a6:	57 e4       	ldi	r21, 0x47	; 71
    25a8:	0e 94 fe 27 	call	0x4ffc	; 0x4ffc <__gtsf2>
    25ac:	18 16       	cp	r1, r24
    25ae:	4c f5       	brge	.+82     	; 0x2602 <CameraMiddle+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25b0:	6b 85       	ldd	r22, Y+11	; 0x0b
    25b2:	7c 85       	ldd	r23, Y+12	; 0x0c
    25b4:	8d 85       	ldd	r24, Y+13	; 0x0d
    25b6:	9e 85       	ldd	r25, Y+14	; 0x0e
    25b8:	20 e0       	ldi	r18, 0x00	; 0
    25ba:	30 e0       	ldi	r19, 0x00	; 0
    25bc:	40 e2       	ldi	r20, 0x20	; 32
    25be:	51 e4       	ldi	r21, 0x41	; 65
    25c0:	0e 94 58 26 	call	0x4cb0	; 0x4cb0 <__mulsf3>
    25c4:	dc 01       	movw	r26, r24
    25c6:	cb 01       	movw	r24, r22
    25c8:	bc 01       	movw	r22, r24
    25ca:	cd 01       	movw	r24, r26
    25cc:	0e 94 82 24 	call	0x4904	; 0x4904 <__fixunssfsi>
    25d0:	dc 01       	movw	r26, r24
    25d2:	cb 01       	movw	r24, r22
    25d4:	9e 83       	std	Y+6, r25	; 0x06
    25d6:	8d 83       	std	Y+5, r24	; 0x05
    25d8:	0f c0       	rjmp	.+30     	; 0x25f8 <CameraMiddle+0xd2>
    25da:	84 e1       	ldi	r24, 0x14	; 20
    25dc:	91 e0       	ldi	r25, 0x01	; 1
    25de:	9c 83       	std	Y+4, r25	; 0x04
    25e0:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    25e2:	8b 81       	ldd	r24, Y+3	; 0x03
    25e4:	9c 81       	ldd	r25, Y+4	; 0x04
    25e6:	01 97       	sbiw	r24, 0x01	; 1
    25e8:	f1 f7       	brne	.-4      	; 0x25e6 <CameraMiddle+0xc0>
    25ea:	9c 83       	std	Y+4, r25	; 0x04
    25ec:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25ee:	8d 81       	ldd	r24, Y+5	; 0x05
    25f0:	9e 81       	ldd	r25, Y+6	; 0x06
    25f2:	01 97       	sbiw	r24, 0x01	; 1
    25f4:	9e 83       	std	Y+6, r25	; 0x06
    25f6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25f8:	8d 81       	ldd	r24, Y+5	; 0x05
    25fa:	9e 81       	ldd	r25, Y+6	; 0x06
    25fc:	00 97       	sbiw	r24, 0x00	; 0
    25fe:	69 f7       	brne	.-38     	; 0x25da <CameraMiddle+0xb4>
    2600:	14 c0       	rjmp	.+40     	; 0x262a <CameraMiddle+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2602:	6f 81       	ldd	r22, Y+7	; 0x07
    2604:	78 85       	ldd	r23, Y+8	; 0x08
    2606:	89 85       	ldd	r24, Y+9	; 0x09
    2608:	9a 85       	ldd	r25, Y+10	; 0x0a
    260a:	0e 94 82 24 	call	0x4904	; 0x4904 <__fixunssfsi>
    260e:	dc 01       	movw	r26, r24
    2610:	cb 01       	movw	r24, r22
    2612:	9e 83       	std	Y+6, r25	; 0x06
    2614:	8d 83       	std	Y+5, r24	; 0x05
    2616:	8d 81       	ldd	r24, Y+5	; 0x05
    2618:	9e 81       	ldd	r25, Y+6	; 0x06
    261a:	9a 83       	std	Y+2, r25	; 0x02
    261c:	89 83       	std	Y+1, r24	; 0x01
    261e:	89 81       	ldd	r24, Y+1	; 0x01
    2620:	9a 81       	ldd	r25, Y+2	; 0x02
    2622:	01 97       	sbiw	r24, 0x01	; 1
    2624:	f1 f7       	brne	.-4      	; 0x2622 <CameraMiddle+0xfc>
    2626:	9a 83       	std	Y+2, r25	; 0x02
    2628:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(50);
}
    262a:	2e 96       	adiw	r28, 0x0e	; 14
    262c:	0f b6       	in	r0, 0x3f	; 63
    262e:	f8 94       	cli
    2630:	de bf       	out	0x3e, r29	; 62
    2632:	0f be       	out	0x3f, r0	; 63
    2634:	cd bf       	out	0x3d, r28	; 61
    2636:	cf 91       	pop	r28
    2638:	df 91       	pop	r29
    263a:	08 95       	ret

0000263c <CameraRight>:

void CameraRight()
{
    263c:	df 93       	push	r29
    263e:	cf 93       	push	r28
    2640:	cd b7       	in	r28, 0x3d	; 61
    2642:	de b7       	in	r29, 0x3e	; 62
    2644:	2e 97       	sbiw	r28, 0x0e	; 14
    2646:	0f b6       	in	r0, 0x3f	; 63
    2648:	f8 94       	cli
    264a:	de bf       	out	0x3e, r29	; 62
    264c:	0f be       	out	0x3f, r0	; 63
    264e:	cd bf       	out	0x3d, r28	; 61
	servo_3(cameraRight);
    2650:	80 91 04 02 	lds	r24, 0x0204
    2654:	90 91 05 02 	lds	r25, 0x0205
    2658:	0e 94 18 12 	call	0x2430	; 0x2430 <servo_3>
    265c:	80 e0       	ldi	r24, 0x00	; 0
    265e:	90 e0       	ldi	r25, 0x00	; 0
    2660:	a8 e4       	ldi	r26, 0x48	; 72
    2662:	b2 e4       	ldi	r27, 0x42	; 66
    2664:	8b 87       	std	Y+11, r24	; 0x0b
    2666:	9c 87       	std	Y+12, r25	; 0x0c
    2668:	ad 87       	std	Y+13, r26	; 0x0d
    266a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    266c:	6b 85       	ldd	r22, Y+11	; 0x0b
    266e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2670:	8d 85       	ldd	r24, Y+13	; 0x0d
    2672:	9e 85       	ldd	r25, Y+14	; 0x0e
    2674:	2d ec       	ldi	r18, 0xCD	; 205
    2676:	3c ec       	ldi	r19, 0xCC	; 204
    2678:	4c e2       	ldi	r20, 0x2C	; 44
    267a:	55 e4       	ldi	r21, 0x45	; 69
    267c:	0e 94 58 26 	call	0x4cb0	; 0x4cb0 <__mulsf3>
    2680:	dc 01       	movw	r26, r24
    2682:	cb 01       	movw	r24, r22
    2684:	8f 83       	std	Y+7, r24	; 0x07
    2686:	98 87       	std	Y+8, r25	; 0x08
    2688:	a9 87       	std	Y+9, r26	; 0x09
    268a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    268c:	6f 81       	ldd	r22, Y+7	; 0x07
    268e:	78 85       	ldd	r23, Y+8	; 0x08
    2690:	89 85       	ldd	r24, Y+9	; 0x09
    2692:	9a 85       	ldd	r25, Y+10	; 0x0a
    2694:	20 e0       	ldi	r18, 0x00	; 0
    2696:	30 e0       	ldi	r19, 0x00	; 0
    2698:	40 e8       	ldi	r20, 0x80	; 128
    269a:	5f e3       	ldi	r21, 0x3F	; 63
    269c:	0e 94 5e 28 	call	0x50bc	; 0x50bc <__ltsf2>
    26a0:	88 23       	and	r24, r24
    26a2:	2c f4       	brge	.+10     	; 0x26ae <CameraRight+0x72>
		__ticks = 1;
    26a4:	81 e0       	ldi	r24, 0x01	; 1
    26a6:	90 e0       	ldi	r25, 0x00	; 0
    26a8:	9e 83       	std	Y+6, r25	; 0x06
    26aa:	8d 83       	std	Y+5, r24	; 0x05
    26ac:	3f c0       	rjmp	.+126    	; 0x272c <CameraRight+0xf0>
	else if (__tmp > 65535)
    26ae:	6f 81       	ldd	r22, Y+7	; 0x07
    26b0:	78 85       	ldd	r23, Y+8	; 0x08
    26b2:	89 85       	ldd	r24, Y+9	; 0x09
    26b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    26b6:	20 e0       	ldi	r18, 0x00	; 0
    26b8:	3f ef       	ldi	r19, 0xFF	; 255
    26ba:	4f e7       	ldi	r20, 0x7F	; 127
    26bc:	57 e4       	ldi	r21, 0x47	; 71
    26be:	0e 94 fe 27 	call	0x4ffc	; 0x4ffc <__gtsf2>
    26c2:	18 16       	cp	r1, r24
    26c4:	4c f5       	brge	.+82     	; 0x2718 <CameraRight+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26c6:	6b 85       	ldd	r22, Y+11	; 0x0b
    26c8:	7c 85       	ldd	r23, Y+12	; 0x0c
    26ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    26cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    26ce:	20 e0       	ldi	r18, 0x00	; 0
    26d0:	30 e0       	ldi	r19, 0x00	; 0
    26d2:	40 e2       	ldi	r20, 0x20	; 32
    26d4:	51 e4       	ldi	r21, 0x41	; 65
    26d6:	0e 94 58 26 	call	0x4cb0	; 0x4cb0 <__mulsf3>
    26da:	dc 01       	movw	r26, r24
    26dc:	cb 01       	movw	r24, r22
    26de:	bc 01       	movw	r22, r24
    26e0:	cd 01       	movw	r24, r26
    26e2:	0e 94 82 24 	call	0x4904	; 0x4904 <__fixunssfsi>
    26e6:	dc 01       	movw	r26, r24
    26e8:	cb 01       	movw	r24, r22
    26ea:	9e 83       	std	Y+6, r25	; 0x06
    26ec:	8d 83       	std	Y+5, r24	; 0x05
    26ee:	0f c0       	rjmp	.+30     	; 0x270e <CameraRight+0xd2>
    26f0:	84 e1       	ldi	r24, 0x14	; 20
    26f2:	91 e0       	ldi	r25, 0x01	; 1
    26f4:	9c 83       	std	Y+4, r25	; 0x04
    26f6:	8b 83       	std	Y+3, r24	; 0x03
    26f8:	8b 81       	ldd	r24, Y+3	; 0x03
    26fa:	9c 81       	ldd	r25, Y+4	; 0x04
    26fc:	01 97       	sbiw	r24, 0x01	; 1
    26fe:	f1 f7       	brne	.-4      	; 0x26fc <CameraRight+0xc0>
    2700:	9c 83       	std	Y+4, r25	; 0x04
    2702:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2704:	8d 81       	ldd	r24, Y+5	; 0x05
    2706:	9e 81       	ldd	r25, Y+6	; 0x06
    2708:	01 97       	sbiw	r24, 0x01	; 1
    270a:	9e 83       	std	Y+6, r25	; 0x06
    270c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    270e:	8d 81       	ldd	r24, Y+5	; 0x05
    2710:	9e 81       	ldd	r25, Y+6	; 0x06
    2712:	00 97       	sbiw	r24, 0x00	; 0
    2714:	69 f7       	brne	.-38     	; 0x26f0 <CameraRight+0xb4>
    2716:	14 c0       	rjmp	.+40     	; 0x2740 <CameraRight+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2718:	6f 81       	ldd	r22, Y+7	; 0x07
    271a:	78 85       	ldd	r23, Y+8	; 0x08
    271c:	89 85       	ldd	r24, Y+9	; 0x09
    271e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2720:	0e 94 82 24 	call	0x4904	; 0x4904 <__fixunssfsi>
    2724:	dc 01       	movw	r26, r24
    2726:	cb 01       	movw	r24, r22
    2728:	9e 83       	std	Y+6, r25	; 0x06
    272a:	8d 83       	std	Y+5, r24	; 0x05
    272c:	8d 81       	ldd	r24, Y+5	; 0x05
    272e:	9e 81       	ldd	r25, Y+6	; 0x06
    2730:	9a 83       	std	Y+2, r25	; 0x02
    2732:	89 83       	std	Y+1, r24	; 0x01
    2734:	89 81       	ldd	r24, Y+1	; 0x01
    2736:	9a 81       	ldd	r25, Y+2	; 0x02
    2738:	01 97       	sbiw	r24, 0x01	; 1
    273a:	f1 f7       	brne	.-4      	; 0x2738 <CameraRight+0xfc>
    273c:	9a 83       	std	Y+2, r25	; 0x02
    273e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(50);

}
    2740:	2e 96       	adiw	r28, 0x0e	; 14
    2742:	0f b6       	in	r0, 0x3f	; 63
    2744:	f8 94       	cli
    2746:	de bf       	out	0x3e, r29	; 62
    2748:	0f be       	out	0x3f, r0	; 63
    274a:	cd bf       	out	0x3d, r28	; 61
    274c:	cf 91       	pop	r28
    274e:	df 91       	pop	r29
    2750:	08 95       	ret

00002752 <CameraLeft>:
void CameraLeft()
{
    2752:	df 93       	push	r29
    2754:	cf 93       	push	r28
    2756:	cd b7       	in	r28, 0x3d	; 61
    2758:	de b7       	in	r29, 0x3e	; 62
    275a:	2e 97       	sbiw	r28, 0x0e	; 14
    275c:	0f b6       	in	r0, 0x3f	; 63
    275e:	f8 94       	cli
    2760:	de bf       	out	0x3e, r29	; 62
    2762:	0f be       	out	0x3f, r0	; 63
    2764:	cd bf       	out	0x3d, r28	; 61
	servo_3(cameraLeft);
    2766:	80 91 06 02 	lds	r24, 0x0206
    276a:	90 91 07 02 	lds	r25, 0x0207
    276e:	0e 94 18 12 	call	0x2430	; 0x2430 <servo_3>
    2772:	80 e0       	ldi	r24, 0x00	; 0
    2774:	90 e0       	ldi	r25, 0x00	; 0
    2776:	a8 e4       	ldi	r26, 0x48	; 72
    2778:	b2 e4       	ldi	r27, 0x42	; 66
    277a:	8b 87       	std	Y+11, r24	; 0x0b
    277c:	9c 87       	std	Y+12, r25	; 0x0c
    277e:	ad 87       	std	Y+13, r26	; 0x0d
    2780:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2782:	6b 85       	ldd	r22, Y+11	; 0x0b
    2784:	7c 85       	ldd	r23, Y+12	; 0x0c
    2786:	8d 85       	ldd	r24, Y+13	; 0x0d
    2788:	9e 85       	ldd	r25, Y+14	; 0x0e
    278a:	2d ec       	ldi	r18, 0xCD	; 205
    278c:	3c ec       	ldi	r19, 0xCC	; 204
    278e:	4c e2       	ldi	r20, 0x2C	; 44
    2790:	55 e4       	ldi	r21, 0x45	; 69
    2792:	0e 94 58 26 	call	0x4cb0	; 0x4cb0 <__mulsf3>
    2796:	dc 01       	movw	r26, r24
    2798:	cb 01       	movw	r24, r22
    279a:	8f 83       	std	Y+7, r24	; 0x07
    279c:	98 87       	std	Y+8, r25	; 0x08
    279e:	a9 87       	std	Y+9, r26	; 0x09
    27a0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    27a2:	6f 81       	ldd	r22, Y+7	; 0x07
    27a4:	78 85       	ldd	r23, Y+8	; 0x08
    27a6:	89 85       	ldd	r24, Y+9	; 0x09
    27a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    27aa:	20 e0       	ldi	r18, 0x00	; 0
    27ac:	30 e0       	ldi	r19, 0x00	; 0
    27ae:	40 e8       	ldi	r20, 0x80	; 128
    27b0:	5f e3       	ldi	r21, 0x3F	; 63
    27b2:	0e 94 5e 28 	call	0x50bc	; 0x50bc <__ltsf2>
    27b6:	88 23       	and	r24, r24
    27b8:	2c f4       	brge	.+10     	; 0x27c4 <CameraLeft+0x72>
		__ticks = 1;
    27ba:	81 e0       	ldi	r24, 0x01	; 1
    27bc:	90 e0       	ldi	r25, 0x00	; 0
    27be:	9e 83       	std	Y+6, r25	; 0x06
    27c0:	8d 83       	std	Y+5, r24	; 0x05
    27c2:	3f c0       	rjmp	.+126    	; 0x2842 <CameraLeft+0xf0>
	else if (__tmp > 65535)
    27c4:	6f 81       	ldd	r22, Y+7	; 0x07
    27c6:	78 85       	ldd	r23, Y+8	; 0x08
    27c8:	89 85       	ldd	r24, Y+9	; 0x09
    27ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    27cc:	20 e0       	ldi	r18, 0x00	; 0
    27ce:	3f ef       	ldi	r19, 0xFF	; 255
    27d0:	4f e7       	ldi	r20, 0x7F	; 127
    27d2:	57 e4       	ldi	r21, 0x47	; 71
    27d4:	0e 94 fe 27 	call	0x4ffc	; 0x4ffc <__gtsf2>
    27d8:	18 16       	cp	r1, r24
    27da:	4c f5       	brge	.+82     	; 0x282e <CameraLeft+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    27de:	7c 85       	ldd	r23, Y+12	; 0x0c
    27e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    27e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    27e4:	20 e0       	ldi	r18, 0x00	; 0
    27e6:	30 e0       	ldi	r19, 0x00	; 0
    27e8:	40 e2       	ldi	r20, 0x20	; 32
    27ea:	51 e4       	ldi	r21, 0x41	; 65
    27ec:	0e 94 58 26 	call	0x4cb0	; 0x4cb0 <__mulsf3>
    27f0:	dc 01       	movw	r26, r24
    27f2:	cb 01       	movw	r24, r22
    27f4:	bc 01       	movw	r22, r24
    27f6:	cd 01       	movw	r24, r26
    27f8:	0e 94 82 24 	call	0x4904	; 0x4904 <__fixunssfsi>
    27fc:	dc 01       	movw	r26, r24
    27fe:	cb 01       	movw	r24, r22
    2800:	9e 83       	std	Y+6, r25	; 0x06
    2802:	8d 83       	std	Y+5, r24	; 0x05
    2804:	0f c0       	rjmp	.+30     	; 0x2824 <CameraLeft+0xd2>
    2806:	84 e1       	ldi	r24, 0x14	; 20
    2808:	91 e0       	ldi	r25, 0x01	; 1
    280a:	9c 83       	std	Y+4, r25	; 0x04
    280c:	8b 83       	std	Y+3, r24	; 0x03
    280e:	8b 81       	ldd	r24, Y+3	; 0x03
    2810:	9c 81       	ldd	r25, Y+4	; 0x04
    2812:	01 97       	sbiw	r24, 0x01	; 1
    2814:	f1 f7       	brne	.-4      	; 0x2812 <CameraLeft+0xc0>
    2816:	9c 83       	std	Y+4, r25	; 0x04
    2818:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    281a:	8d 81       	ldd	r24, Y+5	; 0x05
    281c:	9e 81       	ldd	r25, Y+6	; 0x06
    281e:	01 97       	sbiw	r24, 0x01	; 1
    2820:	9e 83       	std	Y+6, r25	; 0x06
    2822:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2824:	8d 81       	ldd	r24, Y+5	; 0x05
    2826:	9e 81       	ldd	r25, Y+6	; 0x06
    2828:	00 97       	sbiw	r24, 0x00	; 0
    282a:	69 f7       	brne	.-38     	; 0x2806 <CameraLeft+0xb4>
    282c:	14 c0       	rjmp	.+40     	; 0x2856 <CameraLeft+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    282e:	6f 81       	ldd	r22, Y+7	; 0x07
    2830:	78 85       	ldd	r23, Y+8	; 0x08
    2832:	89 85       	ldd	r24, Y+9	; 0x09
    2834:	9a 85       	ldd	r25, Y+10	; 0x0a
    2836:	0e 94 82 24 	call	0x4904	; 0x4904 <__fixunssfsi>
    283a:	dc 01       	movw	r26, r24
    283c:	cb 01       	movw	r24, r22
    283e:	9e 83       	std	Y+6, r25	; 0x06
    2840:	8d 83       	std	Y+5, r24	; 0x05
    2842:	8d 81       	ldd	r24, Y+5	; 0x05
    2844:	9e 81       	ldd	r25, Y+6	; 0x06
    2846:	9a 83       	std	Y+2, r25	; 0x02
    2848:	89 83       	std	Y+1, r24	; 0x01
    284a:	89 81       	ldd	r24, Y+1	; 0x01
    284c:	9a 81       	ldd	r25, Y+2	; 0x02
    284e:	01 97       	sbiw	r24, 0x01	; 1
    2850:	f1 f7       	brne	.-4      	; 0x284e <CameraLeft+0xfc>
    2852:	9a 83       	std	Y+2, r25	; 0x02
    2854:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(50);

}
    2856:	2e 96       	adiw	r28, 0x0e	; 14
    2858:	0f b6       	in	r0, 0x3f	; 63
    285a:	f8 94       	cli
    285c:	de bf       	out	0x3e, r29	; 62
    285e:	0f be       	out	0x3f, r0	; 63
    2860:	cd bf       	out	0x3d, r28	; 61
    2862:	cf 91       	pop	r28
    2864:	df 91       	pop	r29
    2866:	08 95       	ret

00002868 <Lift>:

void Lift(float Height)
{
    2868:	0f 93       	push	r16
    286a:	1f 93       	push	r17
    286c:	df 93       	push	r29
    286e:	cf 93       	push	r28
    2870:	cd b7       	in	r28, 0x3d	; 61
    2872:	de b7       	in	r29, 0x3e	; 62
    2874:	6e 97       	sbiw	r28, 0x1e	; 30
    2876:	0f b6       	in	r0, 0x3f	; 63
    2878:	f8 94       	cli
    287a:	de bf       	out	0x3e, r29	; 62
    287c:	0f be       	out	0x3f, r0	; 63
    287e:	cd bf       	out	0x3d, r28	; 61
    2880:	6b 8f       	std	Y+27, r22	; 0x1b
    2882:	7c 8f       	std	Y+28, r23	; 0x1c
    2884:	8d 8f       	std	Y+29, r24	; 0x1d
    2886:	9e 8f       	std	Y+30, r25	; 0x1e
	//CONVERT Degree TO DEGREE
	float tempD = minDegree - maxDegree;
    2888:	20 91 0a 02 	lds	r18, 0x020A
    288c:	30 91 0b 02 	lds	r19, 0x020B
    2890:	80 91 08 02 	lds	r24, 0x0208
    2894:	90 91 09 02 	lds	r25, 0x0209
    2898:	a9 01       	movw	r20, r18
    289a:	48 1b       	sub	r20, r24
    289c:	59 0b       	sbc	r21, r25
    289e:	ca 01       	movw	r24, r20
    28a0:	cc 01       	movw	r24, r24
    28a2:	a0 e0       	ldi	r26, 0x00	; 0
    28a4:	b0 e0       	ldi	r27, 0x00	; 0
    28a6:	bc 01       	movw	r22, r24
    28a8:	cd 01       	movw	r24, r26
    28aa:	0e 94 40 29 	call	0x5280	; 0x5280 <__floatunsisf>
    28ae:	dc 01       	movw	r26, r24
    28b0:	cb 01       	movw	r24, r22
    28b2:	8f 8b       	std	Y+23, r24	; 0x17
    28b4:	98 8f       	std	Y+24, r25	; 0x18
    28b6:	a9 8f       	std	Y+25, r26	; 0x19
    28b8:	ba 8f       	std	Y+26, r27	; 0x1a


//	int Degree =  minDegree - ((Height * 10 * tempD )/ 960); //*10 to cover the unit of height from mm to 10mm
	
	float temp2 = (Height * 10 * tempD )/ 1010;			//this number needs to be optimized
    28ba:	6b 8d       	ldd	r22, Y+27	; 0x1b
    28bc:	7c 8d       	ldd	r23, Y+28	; 0x1c
    28be:	8d 8d       	ldd	r24, Y+29	; 0x1d
    28c0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    28c2:	20 e0       	ldi	r18, 0x00	; 0
    28c4:	30 e0       	ldi	r19, 0x00	; 0
    28c6:	40 e2       	ldi	r20, 0x20	; 32
    28c8:	51 e4       	ldi	r21, 0x41	; 65
    28ca:	0e 94 58 26 	call	0x4cb0	; 0x4cb0 <__mulsf3>
    28ce:	dc 01       	movw	r26, r24
    28d0:	cb 01       	movw	r24, r22
    28d2:	bc 01       	movw	r22, r24
    28d4:	cd 01       	movw	r24, r26
    28d6:	2f 89       	ldd	r18, Y+23	; 0x17
    28d8:	38 8d       	ldd	r19, Y+24	; 0x18
    28da:	49 8d       	ldd	r20, Y+25	; 0x19
    28dc:	5a 8d       	ldd	r21, Y+26	; 0x1a
    28de:	0e 94 58 26 	call	0x4cb0	; 0x4cb0 <__mulsf3>
    28e2:	dc 01       	movw	r26, r24
    28e4:	cb 01       	movw	r24, r22
    28e6:	bc 01       	movw	r22, r24
    28e8:	cd 01       	movw	r24, r26
    28ea:	20 e0       	ldi	r18, 0x00	; 0
    28ec:	30 e8       	ldi	r19, 0x80	; 128
    28ee:	4c e7       	ldi	r20, 0x7C	; 124
    28f0:	54 e4       	ldi	r21, 0x44	; 68
    28f2:	0e 94 52 27 	call	0x4ea4	; 0x4ea4 <__divsf3>
    28f6:	dc 01       	movw	r26, r24
    28f8:	cb 01       	movw	r24, r22
    28fa:	8b 8b       	std	Y+19, r24	; 0x13
    28fc:	9c 8b       	std	Y+20, r25	; 0x14
    28fe:	ad 8b       	std	Y+21, r26	; 0x15
    2900:	be 8b       	std	Y+22, r27	; 0x16
	
	int Degree = minDegree - (int) temp2;
    2902:	00 91 0a 02 	lds	r16, 0x020A
    2906:	10 91 0b 02 	lds	r17, 0x020B
    290a:	6b 89       	ldd	r22, Y+19	; 0x13
    290c:	7c 89       	ldd	r23, Y+20	; 0x14
    290e:	8d 89       	ldd	r24, Y+21	; 0x15
    2910:	9e 89       	ldd	r25, Y+22	; 0x16
    2912:	0e 94 ec 28 	call	0x51d8	; 0x51d8 <__fixsfsi>
    2916:	dc 01       	movw	r26, r24
    2918:	cb 01       	movw	r24, r22
    291a:	98 01       	movw	r18, r16
    291c:	28 1b       	sub	r18, r24
    291e:	39 0b       	sbc	r19, r25
    2920:	c9 01       	movw	r24, r18
    2922:	9a 8b       	std	Y+18, r25	; 0x12
    2924:	89 8b       	std	Y+17, r24	; 0x11
	
	int i = 0;
    2926:	18 8a       	std	Y+16, r1	; 0x10
    2928:	1f 86       	std	Y+15, r1	; 0x0f
	for (i = currentDegree; i > Degree; i--)
    292a:	80 91 0c 02 	lds	r24, 0x020C
    292e:	90 91 0d 02 	lds	r25, 0x020D
    2932:	98 8b       	std	Y+16, r25	; 0x10
    2934:	8f 87       	std	Y+15, r24	; 0x0f
    2936:	7a c0       	rjmp	.+244    	; 0x2a2c <Lift+0x1c4>
	{
		 servo_1(i);
    2938:	8f 85       	ldd	r24, Y+15	; 0x0f
    293a:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <servo_1>
    293e:	80 e0       	ldi	r24, 0x00	; 0
    2940:	90 e0       	ldi	r25, 0x00	; 0
    2942:	a0 ea       	ldi	r26, 0xA0	; 160
    2944:	b1 e4       	ldi	r27, 0x41	; 65
    2946:	8b 87       	std	Y+11, r24	; 0x0b
    2948:	9c 87       	std	Y+12, r25	; 0x0c
    294a:	ad 87       	std	Y+13, r26	; 0x0d
    294c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    294e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2950:	7c 85       	ldd	r23, Y+12	; 0x0c
    2952:	8d 85       	ldd	r24, Y+13	; 0x0d
    2954:	9e 85       	ldd	r25, Y+14	; 0x0e
    2956:	2d ec       	ldi	r18, 0xCD	; 205
    2958:	3c ec       	ldi	r19, 0xCC	; 204
    295a:	4c e2       	ldi	r20, 0x2C	; 44
    295c:	55 e4       	ldi	r21, 0x45	; 69
    295e:	0e 94 58 26 	call	0x4cb0	; 0x4cb0 <__mulsf3>
    2962:	dc 01       	movw	r26, r24
    2964:	cb 01       	movw	r24, r22
    2966:	8f 83       	std	Y+7, r24	; 0x07
    2968:	98 87       	std	Y+8, r25	; 0x08
    296a:	a9 87       	std	Y+9, r26	; 0x09
    296c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    296e:	6f 81       	ldd	r22, Y+7	; 0x07
    2970:	78 85       	ldd	r23, Y+8	; 0x08
    2972:	89 85       	ldd	r24, Y+9	; 0x09
    2974:	9a 85       	ldd	r25, Y+10	; 0x0a
    2976:	20 e0       	ldi	r18, 0x00	; 0
    2978:	30 e0       	ldi	r19, 0x00	; 0
    297a:	40 e8       	ldi	r20, 0x80	; 128
    297c:	5f e3       	ldi	r21, 0x3F	; 63
    297e:	0e 94 5e 28 	call	0x50bc	; 0x50bc <__ltsf2>
    2982:	88 23       	and	r24, r24
    2984:	2c f4       	brge	.+10     	; 0x2990 <Lift+0x128>
		__ticks = 1;
    2986:	81 e0       	ldi	r24, 0x01	; 1
    2988:	90 e0       	ldi	r25, 0x00	; 0
    298a:	9e 83       	std	Y+6, r25	; 0x06
    298c:	8d 83       	std	Y+5, r24	; 0x05
    298e:	3f c0       	rjmp	.+126    	; 0x2a0e <Lift+0x1a6>
	else if (__tmp > 65535)
    2990:	6f 81       	ldd	r22, Y+7	; 0x07
    2992:	78 85       	ldd	r23, Y+8	; 0x08
    2994:	89 85       	ldd	r24, Y+9	; 0x09
    2996:	9a 85       	ldd	r25, Y+10	; 0x0a
    2998:	20 e0       	ldi	r18, 0x00	; 0
    299a:	3f ef       	ldi	r19, 0xFF	; 255
    299c:	4f e7       	ldi	r20, 0x7F	; 127
    299e:	57 e4       	ldi	r21, 0x47	; 71
    29a0:	0e 94 fe 27 	call	0x4ffc	; 0x4ffc <__gtsf2>
    29a4:	18 16       	cp	r1, r24
    29a6:	4c f5       	brge	.+82     	; 0x29fa <Lift+0x192>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    29aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    29ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    29ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    29b0:	20 e0       	ldi	r18, 0x00	; 0
    29b2:	30 e0       	ldi	r19, 0x00	; 0
    29b4:	40 e2       	ldi	r20, 0x20	; 32
    29b6:	51 e4       	ldi	r21, 0x41	; 65
    29b8:	0e 94 58 26 	call	0x4cb0	; 0x4cb0 <__mulsf3>
    29bc:	dc 01       	movw	r26, r24
    29be:	cb 01       	movw	r24, r22
    29c0:	bc 01       	movw	r22, r24
    29c2:	cd 01       	movw	r24, r26
    29c4:	0e 94 82 24 	call	0x4904	; 0x4904 <__fixunssfsi>
    29c8:	dc 01       	movw	r26, r24
    29ca:	cb 01       	movw	r24, r22
    29cc:	9e 83       	std	Y+6, r25	; 0x06
    29ce:	8d 83       	std	Y+5, r24	; 0x05
    29d0:	0f c0       	rjmp	.+30     	; 0x29f0 <Lift+0x188>
    29d2:	84 e1       	ldi	r24, 0x14	; 20
    29d4:	91 e0       	ldi	r25, 0x01	; 1
    29d6:	9c 83       	std	Y+4, r25	; 0x04
    29d8:	8b 83       	std	Y+3, r24	; 0x03
    29da:	8b 81       	ldd	r24, Y+3	; 0x03
    29dc:	9c 81       	ldd	r25, Y+4	; 0x04
    29de:	01 97       	sbiw	r24, 0x01	; 1
    29e0:	f1 f7       	brne	.-4      	; 0x29de <Lift+0x176>
    29e2:	9c 83       	std	Y+4, r25	; 0x04
    29e4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29e6:	8d 81       	ldd	r24, Y+5	; 0x05
    29e8:	9e 81       	ldd	r25, Y+6	; 0x06
    29ea:	01 97       	sbiw	r24, 0x01	; 1
    29ec:	9e 83       	std	Y+6, r25	; 0x06
    29ee:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29f0:	8d 81       	ldd	r24, Y+5	; 0x05
    29f2:	9e 81       	ldd	r25, Y+6	; 0x06
    29f4:	00 97       	sbiw	r24, 0x00	; 0
    29f6:	69 f7       	brne	.-38     	; 0x29d2 <Lift+0x16a>
    29f8:	14 c0       	rjmp	.+40     	; 0x2a22 <Lift+0x1ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29fa:	6f 81       	ldd	r22, Y+7	; 0x07
    29fc:	78 85       	ldd	r23, Y+8	; 0x08
    29fe:	89 85       	ldd	r24, Y+9	; 0x09
    2a00:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a02:	0e 94 82 24 	call	0x4904	; 0x4904 <__fixunssfsi>
    2a06:	dc 01       	movw	r26, r24
    2a08:	cb 01       	movw	r24, r22
    2a0a:	9e 83       	std	Y+6, r25	; 0x06
    2a0c:	8d 83       	std	Y+5, r24	; 0x05
    2a0e:	8d 81       	ldd	r24, Y+5	; 0x05
    2a10:	9e 81       	ldd	r25, Y+6	; 0x06
    2a12:	9a 83       	std	Y+2, r25	; 0x02
    2a14:	89 83       	std	Y+1, r24	; 0x01
    2a16:	89 81       	ldd	r24, Y+1	; 0x01
    2a18:	9a 81       	ldd	r25, Y+2	; 0x02
    2a1a:	01 97       	sbiw	r24, 0x01	; 1
    2a1c:	f1 f7       	brne	.-4      	; 0x2a1a <Lift+0x1b2>
    2a1e:	9a 83       	std	Y+2, r25	; 0x02
    2a20:	89 83       	std	Y+1, r24	; 0x01
	float temp2 = (Height * 10 * tempD )/ 1010;			//this number needs to be optimized
	
	int Degree = minDegree - (int) temp2;
	
	int i = 0;
	for (i = currentDegree; i > Degree; i--)
    2a22:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a24:	98 89       	ldd	r25, Y+16	; 0x10
    2a26:	01 97       	sbiw	r24, 0x01	; 1
    2a28:	98 8b       	std	Y+16, r25	; 0x10
    2a2a:	8f 87       	std	Y+15, r24	; 0x0f
    2a2c:	2f 85       	ldd	r18, Y+15	; 0x0f
    2a2e:	38 89       	ldd	r19, Y+16	; 0x10
    2a30:	89 89       	ldd	r24, Y+17	; 0x11
    2a32:	9a 89       	ldd	r25, Y+18	; 0x12
    2a34:	82 17       	cp	r24, r18
    2a36:	93 07       	cpc	r25, r19
    2a38:	0c f4       	brge	.+2      	; 0x2a3c <Lift+0x1d4>
    2a3a:	7e cf       	rjmp	.-260    	; 0x2938 <Lift+0xd0>
	{
		 servo_1(i);
		 _delay_ms(20);
	}
	currentDegree = Degree;
    2a3c:	89 89       	ldd	r24, Y+17	; 0x11
    2a3e:	9a 89       	ldd	r25, Y+18	; 0x12
    2a40:	90 93 0d 02 	sts	0x020D, r25
    2a44:	80 93 0c 02 	sts	0x020C, r24
}
    2a48:	6e 96       	adiw	r28, 0x1e	; 30
    2a4a:	0f b6       	in	r0, 0x3f	; 63
    2a4c:	f8 94       	cli
    2a4e:	de bf       	out	0x3e, r29	; 62
    2a50:	0f be       	out	0x3f, r0	; 63
    2a52:	cd bf       	out	0x3d, r28	; 61
    2a54:	cf 91       	pop	r28
    2a56:	df 91       	pop	r29
    2a58:	1f 91       	pop	r17
    2a5a:	0f 91       	pop	r16
    2a5c:	08 95       	ret

00002a5e <Lower>:

void Lower()
{
    2a5e:	df 93       	push	r29
    2a60:	cf 93       	push	r28
    2a62:	cd b7       	in	r28, 0x3d	; 61
    2a64:	de b7       	in	r29, 0x3e	; 62
    2a66:	60 97       	sbiw	r28, 0x10	; 16
    2a68:	0f b6       	in	r0, 0x3f	; 63
    2a6a:	f8 94       	cli
    2a6c:	de bf       	out	0x3e, r29	; 62
    2a6e:	0f be       	out	0x3f, r0	; 63
    2a70:	cd bf       	out	0x3d, r28	; 61
	int i = 0;
    2a72:	18 8a       	std	Y+16, r1	; 0x10
    2a74:	1f 86       	std	Y+15, r1	; 0x0f

	 for (i = currentDegree; i <minDegree; i++)	//change max to current degree
    2a76:	80 91 0c 02 	lds	r24, 0x020C
    2a7a:	90 91 0d 02 	lds	r25, 0x020D
    2a7e:	98 8b       	std	Y+16, r25	; 0x10
    2a80:	8f 87       	std	Y+15, r24	; 0x0f
    2a82:	7a c0       	rjmp	.+244    	; 0x2b78 <Lower+0x11a>
	 {
	  servo_1(i);
    2a84:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a86:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <servo_1>
    2a8a:	80 e0       	ldi	r24, 0x00	; 0
    2a8c:	90 e0       	ldi	r25, 0x00	; 0
    2a8e:	a0 ea       	ldi	r26, 0xA0	; 160
    2a90:	b1 e4       	ldi	r27, 0x41	; 65
    2a92:	8b 87       	std	Y+11, r24	; 0x0b
    2a94:	9c 87       	std	Y+12, r25	; 0x0c
    2a96:	ad 87       	std	Y+13, r26	; 0x0d
    2a98:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a9a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a9c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a9e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2aa0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2aa2:	2d ec       	ldi	r18, 0xCD	; 205
    2aa4:	3c ec       	ldi	r19, 0xCC	; 204
    2aa6:	4c e2       	ldi	r20, 0x2C	; 44
    2aa8:	55 e4       	ldi	r21, 0x45	; 69
    2aaa:	0e 94 58 26 	call	0x4cb0	; 0x4cb0 <__mulsf3>
    2aae:	dc 01       	movw	r26, r24
    2ab0:	cb 01       	movw	r24, r22
    2ab2:	8f 83       	std	Y+7, r24	; 0x07
    2ab4:	98 87       	std	Y+8, r25	; 0x08
    2ab6:	a9 87       	std	Y+9, r26	; 0x09
    2ab8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2aba:	6f 81       	ldd	r22, Y+7	; 0x07
    2abc:	78 85       	ldd	r23, Y+8	; 0x08
    2abe:	89 85       	ldd	r24, Y+9	; 0x09
    2ac0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ac2:	20 e0       	ldi	r18, 0x00	; 0
    2ac4:	30 e0       	ldi	r19, 0x00	; 0
    2ac6:	40 e8       	ldi	r20, 0x80	; 128
    2ac8:	5f e3       	ldi	r21, 0x3F	; 63
    2aca:	0e 94 5e 28 	call	0x50bc	; 0x50bc <__ltsf2>
    2ace:	88 23       	and	r24, r24
    2ad0:	2c f4       	brge	.+10     	; 0x2adc <Lower+0x7e>
		__ticks = 1;
    2ad2:	81 e0       	ldi	r24, 0x01	; 1
    2ad4:	90 e0       	ldi	r25, 0x00	; 0
    2ad6:	9e 83       	std	Y+6, r25	; 0x06
    2ad8:	8d 83       	std	Y+5, r24	; 0x05
    2ada:	3f c0       	rjmp	.+126    	; 0x2b5a <Lower+0xfc>
	else if (__tmp > 65535)
    2adc:	6f 81       	ldd	r22, Y+7	; 0x07
    2ade:	78 85       	ldd	r23, Y+8	; 0x08
    2ae0:	89 85       	ldd	r24, Y+9	; 0x09
    2ae2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ae4:	20 e0       	ldi	r18, 0x00	; 0
    2ae6:	3f ef       	ldi	r19, 0xFF	; 255
    2ae8:	4f e7       	ldi	r20, 0x7F	; 127
    2aea:	57 e4       	ldi	r21, 0x47	; 71
    2aec:	0e 94 fe 27 	call	0x4ffc	; 0x4ffc <__gtsf2>
    2af0:	18 16       	cp	r1, r24
    2af2:	4c f5       	brge	.+82     	; 0x2b46 <Lower+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2af4:	6b 85       	ldd	r22, Y+11	; 0x0b
    2af6:	7c 85       	ldd	r23, Y+12	; 0x0c
    2af8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2afa:	9e 85       	ldd	r25, Y+14	; 0x0e
    2afc:	20 e0       	ldi	r18, 0x00	; 0
    2afe:	30 e0       	ldi	r19, 0x00	; 0
    2b00:	40 e2       	ldi	r20, 0x20	; 32
    2b02:	51 e4       	ldi	r21, 0x41	; 65
    2b04:	0e 94 58 26 	call	0x4cb0	; 0x4cb0 <__mulsf3>
    2b08:	dc 01       	movw	r26, r24
    2b0a:	cb 01       	movw	r24, r22
    2b0c:	bc 01       	movw	r22, r24
    2b0e:	cd 01       	movw	r24, r26
    2b10:	0e 94 82 24 	call	0x4904	; 0x4904 <__fixunssfsi>
    2b14:	dc 01       	movw	r26, r24
    2b16:	cb 01       	movw	r24, r22
    2b18:	9e 83       	std	Y+6, r25	; 0x06
    2b1a:	8d 83       	std	Y+5, r24	; 0x05
    2b1c:	0f c0       	rjmp	.+30     	; 0x2b3c <Lower+0xde>
    2b1e:	84 e1       	ldi	r24, 0x14	; 20
    2b20:	91 e0       	ldi	r25, 0x01	; 1
    2b22:	9c 83       	std	Y+4, r25	; 0x04
    2b24:	8b 83       	std	Y+3, r24	; 0x03
    2b26:	8b 81       	ldd	r24, Y+3	; 0x03
    2b28:	9c 81       	ldd	r25, Y+4	; 0x04
    2b2a:	01 97       	sbiw	r24, 0x01	; 1
    2b2c:	f1 f7       	brne	.-4      	; 0x2b2a <Lower+0xcc>
    2b2e:	9c 83       	std	Y+4, r25	; 0x04
    2b30:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b32:	8d 81       	ldd	r24, Y+5	; 0x05
    2b34:	9e 81       	ldd	r25, Y+6	; 0x06
    2b36:	01 97       	sbiw	r24, 0x01	; 1
    2b38:	9e 83       	std	Y+6, r25	; 0x06
    2b3a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b3c:	8d 81       	ldd	r24, Y+5	; 0x05
    2b3e:	9e 81       	ldd	r25, Y+6	; 0x06
    2b40:	00 97       	sbiw	r24, 0x00	; 0
    2b42:	69 f7       	brne	.-38     	; 0x2b1e <Lower+0xc0>
    2b44:	14 c0       	rjmp	.+40     	; 0x2b6e <Lower+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b46:	6f 81       	ldd	r22, Y+7	; 0x07
    2b48:	78 85       	ldd	r23, Y+8	; 0x08
    2b4a:	89 85       	ldd	r24, Y+9	; 0x09
    2b4c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b4e:	0e 94 82 24 	call	0x4904	; 0x4904 <__fixunssfsi>
    2b52:	dc 01       	movw	r26, r24
    2b54:	cb 01       	movw	r24, r22
    2b56:	9e 83       	std	Y+6, r25	; 0x06
    2b58:	8d 83       	std	Y+5, r24	; 0x05
    2b5a:	8d 81       	ldd	r24, Y+5	; 0x05
    2b5c:	9e 81       	ldd	r25, Y+6	; 0x06
    2b5e:	9a 83       	std	Y+2, r25	; 0x02
    2b60:	89 83       	std	Y+1, r24	; 0x01
    2b62:	89 81       	ldd	r24, Y+1	; 0x01
    2b64:	9a 81       	ldd	r25, Y+2	; 0x02
    2b66:	01 97       	sbiw	r24, 0x01	; 1
    2b68:	f1 f7       	brne	.-4      	; 0x2b66 <Lower+0x108>
    2b6a:	9a 83       	std	Y+2, r25	; 0x02
    2b6c:	89 83       	std	Y+1, r24	; 0x01

void Lower()
{
	int i = 0;

	 for (i = currentDegree; i <minDegree; i++)	//change max to current degree
    2b6e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b70:	98 89       	ldd	r25, Y+16	; 0x10
    2b72:	01 96       	adiw	r24, 0x01	; 1
    2b74:	98 8b       	std	Y+16, r25	; 0x10
    2b76:	8f 87       	std	Y+15, r24	; 0x0f
    2b78:	2f 85       	ldd	r18, Y+15	; 0x0f
    2b7a:	38 89       	ldd	r19, Y+16	; 0x10
    2b7c:	80 91 0a 02 	lds	r24, 0x020A
    2b80:	90 91 0b 02 	lds	r25, 0x020B
    2b84:	28 17       	cp	r18, r24
    2b86:	39 07       	cpc	r19, r25
    2b88:	08 f4       	brcc	.+2      	; 0x2b8c <Lower+0x12e>
    2b8a:	7c cf       	rjmp	.-264    	; 0x2a84 <Lower+0x26>
	 {
	  servo_1(i);
	  _delay_ms(20);
	 }
}
    2b8c:	60 96       	adiw	r28, 0x10	; 16
    2b8e:	0f b6       	in	r0, 0x3f	; 63
    2b90:	f8 94       	cli
    2b92:	de bf       	out	0x3e, r29	; 62
    2b94:	0f be       	out	0x3f, r0	; 63
    2b96:	cd bf       	out	0x3d, r28	; 61
    2b98:	cf 91       	pop	r28
    2b9a:	df 91       	pop	r29
    2b9c:	08 95       	ret

00002b9e <Grab>:

void Grab()
{
    2b9e:	df 93       	push	r29
    2ba0:	cf 93       	push	r28
    2ba2:	cd b7       	in	r28, 0x3d	; 61
    2ba4:	de b7       	in	r29, 0x3e	; 62
    2ba6:	60 97       	sbiw	r28, 0x10	; 16
    2ba8:	0f b6       	in	r0, 0x3f	; 63
    2baa:	f8 94       	cli
    2bac:	de bf       	out	0x3e, r29	; 62
    2bae:	0f be       	out	0x3f, r0	; 63
    2bb0:	cd bf       	out	0x3d, r28	; 61
	int i=0;
    2bb2:	18 8a       	std	Y+16, r1	; 0x10
    2bb4:	1f 86       	std	Y+15, r1	; 0x0f
	for (i = grabberOpen; i > grabberClose; i--)
    2bb6:	80 91 0e 02 	lds	r24, 0x020E
    2bba:	90 91 0f 02 	lds	r25, 0x020F
    2bbe:	98 8b       	std	Y+16, r25	; 0x10
    2bc0:	8f 87       	std	Y+15, r24	; 0x0f
    2bc2:	7a c0       	rjmp	.+244    	; 0x2cb8 <Grab+0x11a>
	 {
		  servo_2(i);
    2bc4:	8f 85       	ldd	r24, Y+15	; 0x0f
    2bc6:	0e 94 ca 11 	call	0x2394	; 0x2394 <servo_2>
    2bca:	80 e0       	ldi	r24, 0x00	; 0
    2bcc:	90 e0       	ldi	r25, 0x00	; 0
    2bce:	a0 ea       	ldi	r26, 0xA0	; 160
    2bd0:	b1 e4       	ldi	r27, 0x41	; 65
    2bd2:	8b 87       	std	Y+11, r24	; 0x0b
    2bd4:	9c 87       	std	Y+12, r25	; 0x0c
    2bd6:	ad 87       	std	Y+13, r26	; 0x0d
    2bd8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bda:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bdc:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bde:	8d 85       	ldd	r24, Y+13	; 0x0d
    2be0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2be2:	2d ec       	ldi	r18, 0xCD	; 205
    2be4:	3c ec       	ldi	r19, 0xCC	; 204
    2be6:	4c e2       	ldi	r20, 0x2C	; 44
    2be8:	55 e4       	ldi	r21, 0x45	; 69
    2bea:	0e 94 58 26 	call	0x4cb0	; 0x4cb0 <__mulsf3>
    2bee:	dc 01       	movw	r26, r24
    2bf0:	cb 01       	movw	r24, r22
    2bf2:	8f 83       	std	Y+7, r24	; 0x07
    2bf4:	98 87       	std	Y+8, r25	; 0x08
    2bf6:	a9 87       	std	Y+9, r26	; 0x09
    2bf8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2bfa:	6f 81       	ldd	r22, Y+7	; 0x07
    2bfc:	78 85       	ldd	r23, Y+8	; 0x08
    2bfe:	89 85       	ldd	r24, Y+9	; 0x09
    2c00:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c02:	20 e0       	ldi	r18, 0x00	; 0
    2c04:	30 e0       	ldi	r19, 0x00	; 0
    2c06:	40 e8       	ldi	r20, 0x80	; 128
    2c08:	5f e3       	ldi	r21, 0x3F	; 63
    2c0a:	0e 94 5e 28 	call	0x50bc	; 0x50bc <__ltsf2>
    2c0e:	88 23       	and	r24, r24
    2c10:	2c f4       	brge	.+10     	; 0x2c1c <Grab+0x7e>
		__ticks = 1;
    2c12:	81 e0       	ldi	r24, 0x01	; 1
    2c14:	90 e0       	ldi	r25, 0x00	; 0
    2c16:	9e 83       	std	Y+6, r25	; 0x06
    2c18:	8d 83       	std	Y+5, r24	; 0x05
    2c1a:	3f c0       	rjmp	.+126    	; 0x2c9a <Grab+0xfc>
	else if (__tmp > 65535)
    2c1c:	6f 81       	ldd	r22, Y+7	; 0x07
    2c1e:	78 85       	ldd	r23, Y+8	; 0x08
    2c20:	89 85       	ldd	r24, Y+9	; 0x09
    2c22:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c24:	20 e0       	ldi	r18, 0x00	; 0
    2c26:	3f ef       	ldi	r19, 0xFF	; 255
    2c28:	4f e7       	ldi	r20, 0x7F	; 127
    2c2a:	57 e4       	ldi	r21, 0x47	; 71
    2c2c:	0e 94 fe 27 	call	0x4ffc	; 0x4ffc <__gtsf2>
    2c30:	18 16       	cp	r1, r24
    2c32:	4c f5       	brge	.+82     	; 0x2c86 <Grab+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c34:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c36:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c38:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c3a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c3c:	20 e0       	ldi	r18, 0x00	; 0
    2c3e:	30 e0       	ldi	r19, 0x00	; 0
    2c40:	40 e2       	ldi	r20, 0x20	; 32
    2c42:	51 e4       	ldi	r21, 0x41	; 65
    2c44:	0e 94 58 26 	call	0x4cb0	; 0x4cb0 <__mulsf3>
    2c48:	dc 01       	movw	r26, r24
    2c4a:	cb 01       	movw	r24, r22
    2c4c:	bc 01       	movw	r22, r24
    2c4e:	cd 01       	movw	r24, r26
    2c50:	0e 94 82 24 	call	0x4904	; 0x4904 <__fixunssfsi>
    2c54:	dc 01       	movw	r26, r24
    2c56:	cb 01       	movw	r24, r22
    2c58:	9e 83       	std	Y+6, r25	; 0x06
    2c5a:	8d 83       	std	Y+5, r24	; 0x05
    2c5c:	0f c0       	rjmp	.+30     	; 0x2c7c <Grab+0xde>
    2c5e:	84 e1       	ldi	r24, 0x14	; 20
    2c60:	91 e0       	ldi	r25, 0x01	; 1
    2c62:	9c 83       	std	Y+4, r25	; 0x04
    2c64:	8b 83       	std	Y+3, r24	; 0x03
    2c66:	8b 81       	ldd	r24, Y+3	; 0x03
    2c68:	9c 81       	ldd	r25, Y+4	; 0x04
    2c6a:	01 97       	sbiw	r24, 0x01	; 1
    2c6c:	f1 f7       	brne	.-4      	; 0x2c6a <Grab+0xcc>
    2c6e:	9c 83       	std	Y+4, r25	; 0x04
    2c70:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c72:	8d 81       	ldd	r24, Y+5	; 0x05
    2c74:	9e 81       	ldd	r25, Y+6	; 0x06
    2c76:	01 97       	sbiw	r24, 0x01	; 1
    2c78:	9e 83       	std	Y+6, r25	; 0x06
    2c7a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c7c:	8d 81       	ldd	r24, Y+5	; 0x05
    2c7e:	9e 81       	ldd	r25, Y+6	; 0x06
    2c80:	00 97       	sbiw	r24, 0x00	; 0
    2c82:	69 f7       	brne	.-38     	; 0x2c5e <Grab+0xc0>
    2c84:	14 c0       	rjmp	.+40     	; 0x2cae <Grab+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c86:	6f 81       	ldd	r22, Y+7	; 0x07
    2c88:	78 85       	ldd	r23, Y+8	; 0x08
    2c8a:	89 85       	ldd	r24, Y+9	; 0x09
    2c8c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c8e:	0e 94 82 24 	call	0x4904	; 0x4904 <__fixunssfsi>
    2c92:	dc 01       	movw	r26, r24
    2c94:	cb 01       	movw	r24, r22
    2c96:	9e 83       	std	Y+6, r25	; 0x06
    2c98:	8d 83       	std	Y+5, r24	; 0x05
    2c9a:	8d 81       	ldd	r24, Y+5	; 0x05
    2c9c:	9e 81       	ldd	r25, Y+6	; 0x06
    2c9e:	9a 83       	std	Y+2, r25	; 0x02
    2ca0:	89 83       	std	Y+1, r24	; 0x01
    2ca2:	89 81       	ldd	r24, Y+1	; 0x01
    2ca4:	9a 81       	ldd	r25, Y+2	; 0x02
    2ca6:	01 97       	sbiw	r24, 0x01	; 1
    2ca8:	f1 f7       	brne	.-4      	; 0x2ca6 <Grab+0x108>
    2caa:	9a 83       	std	Y+2, r25	; 0x02
    2cac:	89 83       	std	Y+1, r24	; 0x01
}

void Grab()
{
	int i=0;
	for (i = grabberOpen; i > grabberClose; i--)
    2cae:	8f 85       	ldd	r24, Y+15	; 0x0f
    2cb0:	98 89       	ldd	r25, Y+16	; 0x10
    2cb2:	01 97       	sbiw	r24, 0x01	; 1
    2cb4:	98 8b       	std	Y+16, r25	; 0x10
    2cb6:	8f 87       	std	Y+15, r24	; 0x0f
    2cb8:	2f 85       	ldd	r18, Y+15	; 0x0f
    2cba:	38 89       	ldd	r19, Y+16	; 0x10
    2cbc:	80 91 10 02 	lds	r24, 0x0210
    2cc0:	90 91 11 02 	lds	r25, 0x0211
    2cc4:	82 17       	cp	r24, r18
    2cc6:	93 07       	cpc	r25, r19
    2cc8:	08 f4       	brcc	.+2      	; 0x2ccc <Grab+0x12e>
    2cca:	7c cf       	rjmp	.-264    	; 0x2bc4 <Grab+0x26>
	 {
		  servo_2(i);
		  _delay_ms(20);
	 }	
}
    2ccc:	60 96       	adiw	r28, 0x10	; 16
    2cce:	0f b6       	in	r0, 0x3f	; 63
    2cd0:	f8 94       	cli
    2cd2:	de bf       	out	0x3e, r29	; 62
    2cd4:	0f be       	out	0x3f, r0	; 63
    2cd6:	cd bf       	out	0x3d, r28	; 61
    2cd8:	cf 91       	pop	r28
    2cda:	df 91       	pop	r29
    2cdc:	08 95       	ret

00002cde <Release>:

void Release()
{
    2cde:	df 93       	push	r29
    2ce0:	cf 93       	push	r28
    2ce2:	cd b7       	in	r28, 0x3d	; 61
    2ce4:	de b7       	in	r29, 0x3e	; 62
    2ce6:	60 97       	sbiw	r28, 0x10	; 16
    2ce8:	0f b6       	in	r0, 0x3f	; 63
    2cea:	f8 94       	cli
    2cec:	de bf       	out	0x3e, r29	; 62
    2cee:	0f be       	out	0x3f, r0	; 63
    2cf0:	cd bf       	out	0x3d, r28	; 61
	int i=0;
    2cf2:	18 8a       	std	Y+16, r1	; 0x10
    2cf4:	1f 86       	std	Y+15, r1	; 0x0f
	for (i = grabberClose; i < grabberOpen; i++)
    2cf6:	80 91 10 02 	lds	r24, 0x0210
    2cfa:	90 91 11 02 	lds	r25, 0x0211
    2cfe:	98 8b       	std	Y+16, r25	; 0x10
    2d00:	8f 87       	std	Y+15, r24	; 0x0f
    2d02:	7a c0       	rjmp	.+244    	; 0x2df8 <Release+0x11a>
	{
		servo_2(i);
    2d04:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d06:	0e 94 ca 11 	call	0x2394	; 0x2394 <servo_2>
    2d0a:	80 e0       	ldi	r24, 0x00	; 0
    2d0c:	90 e0       	ldi	r25, 0x00	; 0
    2d0e:	a0 ea       	ldi	r26, 0xA0	; 160
    2d10:	b1 e4       	ldi	r27, 0x41	; 65
    2d12:	8b 87       	std	Y+11, r24	; 0x0b
    2d14:	9c 87       	std	Y+12, r25	; 0x0c
    2d16:	ad 87       	std	Y+13, r26	; 0x0d
    2d18:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d1a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d1c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d1e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d20:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d22:	2d ec       	ldi	r18, 0xCD	; 205
    2d24:	3c ec       	ldi	r19, 0xCC	; 204
    2d26:	4c e2       	ldi	r20, 0x2C	; 44
    2d28:	55 e4       	ldi	r21, 0x45	; 69
    2d2a:	0e 94 58 26 	call	0x4cb0	; 0x4cb0 <__mulsf3>
    2d2e:	dc 01       	movw	r26, r24
    2d30:	cb 01       	movw	r24, r22
    2d32:	8f 83       	std	Y+7, r24	; 0x07
    2d34:	98 87       	std	Y+8, r25	; 0x08
    2d36:	a9 87       	std	Y+9, r26	; 0x09
    2d38:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d3a:	6f 81       	ldd	r22, Y+7	; 0x07
    2d3c:	78 85       	ldd	r23, Y+8	; 0x08
    2d3e:	89 85       	ldd	r24, Y+9	; 0x09
    2d40:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d42:	20 e0       	ldi	r18, 0x00	; 0
    2d44:	30 e0       	ldi	r19, 0x00	; 0
    2d46:	40 e8       	ldi	r20, 0x80	; 128
    2d48:	5f e3       	ldi	r21, 0x3F	; 63
    2d4a:	0e 94 5e 28 	call	0x50bc	; 0x50bc <__ltsf2>
    2d4e:	88 23       	and	r24, r24
    2d50:	2c f4       	brge	.+10     	; 0x2d5c <Release+0x7e>
		__ticks = 1;
    2d52:	81 e0       	ldi	r24, 0x01	; 1
    2d54:	90 e0       	ldi	r25, 0x00	; 0
    2d56:	9e 83       	std	Y+6, r25	; 0x06
    2d58:	8d 83       	std	Y+5, r24	; 0x05
    2d5a:	3f c0       	rjmp	.+126    	; 0x2dda <Release+0xfc>
	else if (__tmp > 65535)
    2d5c:	6f 81       	ldd	r22, Y+7	; 0x07
    2d5e:	78 85       	ldd	r23, Y+8	; 0x08
    2d60:	89 85       	ldd	r24, Y+9	; 0x09
    2d62:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d64:	20 e0       	ldi	r18, 0x00	; 0
    2d66:	3f ef       	ldi	r19, 0xFF	; 255
    2d68:	4f e7       	ldi	r20, 0x7F	; 127
    2d6a:	57 e4       	ldi	r21, 0x47	; 71
    2d6c:	0e 94 fe 27 	call	0x4ffc	; 0x4ffc <__gtsf2>
    2d70:	18 16       	cp	r1, r24
    2d72:	4c f5       	brge	.+82     	; 0x2dc6 <Release+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d74:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d76:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d78:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d7a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d7c:	20 e0       	ldi	r18, 0x00	; 0
    2d7e:	30 e0       	ldi	r19, 0x00	; 0
    2d80:	40 e2       	ldi	r20, 0x20	; 32
    2d82:	51 e4       	ldi	r21, 0x41	; 65
    2d84:	0e 94 58 26 	call	0x4cb0	; 0x4cb0 <__mulsf3>
    2d88:	dc 01       	movw	r26, r24
    2d8a:	cb 01       	movw	r24, r22
    2d8c:	bc 01       	movw	r22, r24
    2d8e:	cd 01       	movw	r24, r26
    2d90:	0e 94 82 24 	call	0x4904	; 0x4904 <__fixunssfsi>
    2d94:	dc 01       	movw	r26, r24
    2d96:	cb 01       	movw	r24, r22
    2d98:	9e 83       	std	Y+6, r25	; 0x06
    2d9a:	8d 83       	std	Y+5, r24	; 0x05
    2d9c:	0f c0       	rjmp	.+30     	; 0x2dbc <Release+0xde>
    2d9e:	84 e1       	ldi	r24, 0x14	; 20
    2da0:	91 e0       	ldi	r25, 0x01	; 1
    2da2:	9c 83       	std	Y+4, r25	; 0x04
    2da4:	8b 83       	std	Y+3, r24	; 0x03
    2da6:	8b 81       	ldd	r24, Y+3	; 0x03
    2da8:	9c 81       	ldd	r25, Y+4	; 0x04
    2daa:	01 97       	sbiw	r24, 0x01	; 1
    2dac:	f1 f7       	brne	.-4      	; 0x2daa <Release+0xcc>
    2dae:	9c 83       	std	Y+4, r25	; 0x04
    2db0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2db2:	8d 81       	ldd	r24, Y+5	; 0x05
    2db4:	9e 81       	ldd	r25, Y+6	; 0x06
    2db6:	01 97       	sbiw	r24, 0x01	; 1
    2db8:	9e 83       	std	Y+6, r25	; 0x06
    2dba:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dbc:	8d 81       	ldd	r24, Y+5	; 0x05
    2dbe:	9e 81       	ldd	r25, Y+6	; 0x06
    2dc0:	00 97       	sbiw	r24, 0x00	; 0
    2dc2:	69 f7       	brne	.-38     	; 0x2d9e <Release+0xc0>
    2dc4:	14 c0       	rjmp	.+40     	; 0x2dee <Release+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dc6:	6f 81       	ldd	r22, Y+7	; 0x07
    2dc8:	78 85       	ldd	r23, Y+8	; 0x08
    2dca:	89 85       	ldd	r24, Y+9	; 0x09
    2dcc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dce:	0e 94 82 24 	call	0x4904	; 0x4904 <__fixunssfsi>
    2dd2:	dc 01       	movw	r26, r24
    2dd4:	cb 01       	movw	r24, r22
    2dd6:	9e 83       	std	Y+6, r25	; 0x06
    2dd8:	8d 83       	std	Y+5, r24	; 0x05
    2dda:	8d 81       	ldd	r24, Y+5	; 0x05
    2ddc:	9e 81       	ldd	r25, Y+6	; 0x06
    2dde:	9a 83       	std	Y+2, r25	; 0x02
    2de0:	89 83       	std	Y+1, r24	; 0x01
    2de2:	89 81       	ldd	r24, Y+1	; 0x01
    2de4:	9a 81       	ldd	r25, Y+2	; 0x02
    2de6:	01 97       	sbiw	r24, 0x01	; 1
    2de8:	f1 f7       	brne	.-4      	; 0x2de6 <Release+0x108>
    2dea:	9a 83       	std	Y+2, r25	; 0x02
    2dec:	89 83       	std	Y+1, r24	; 0x01
}

void Release()
{
	int i=0;
	for (i = grabberClose; i < grabberOpen; i++)
    2dee:	8f 85       	ldd	r24, Y+15	; 0x0f
    2df0:	98 89       	ldd	r25, Y+16	; 0x10
    2df2:	01 96       	adiw	r24, 0x01	; 1
    2df4:	98 8b       	std	Y+16, r25	; 0x10
    2df6:	8f 87       	std	Y+15, r24	; 0x0f
    2df8:	2f 85       	ldd	r18, Y+15	; 0x0f
    2dfa:	38 89       	ldd	r19, Y+16	; 0x10
    2dfc:	80 91 0e 02 	lds	r24, 0x020E
    2e00:	90 91 0f 02 	lds	r25, 0x020F
    2e04:	28 17       	cp	r18, r24
    2e06:	39 07       	cpc	r19, r25
    2e08:	08 f4       	brcc	.+2      	; 0x2e0c <Release+0x12e>
    2e0a:	7c cf       	rjmp	.-264    	; 0x2d04 <Release+0x26>
	{
		servo_2(i);
		_delay_ms(20);
	}
}
    2e0c:	60 96       	adiw	r28, 0x10	; 16
    2e0e:	0f b6       	in	r0, 0x3f	; 63
    2e10:	f8 94       	cli
    2e12:	de bf       	out	0x3e, r29	; 62
    2e14:	0f be       	out	0x3f, r0	; 63
    2e16:	cd bf       	out	0x3d, r28	; 61
    2e18:	cf 91       	pop	r28
    2e1a:	df 91       	pop	r29
    2e1c:	08 95       	ret

00002e1e <init_dist_measure>:
#include "Arm_Control.h"
\

//initialise the ports used for distance measurment ISR
init_dist_measure()
{
    2e1e:	df 93       	push	r29
    2e20:	cf 93       	push	r28
    2e22:	0f 92       	push	r0
    2e24:	0f 92       	push	r0
    2e26:	cd b7       	in	r28, 0x3d	; 61
    2e28:	de b7       	in	r29, 0x3e	; 62
	DDRE = 0x00;
    2e2a:	ed e2       	ldi	r30, 0x2D	; 45
    2e2c:	f0 e0       	ldi	r31, 0x00	; 0
    2e2e:	10 82       	st	Z, r1
	PORTE = PORTE | 0x30;
    2e30:	ae e2       	ldi	r26, 0x2E	; 46
    2e32:	b0 e0       	ldi	r27, 0x00	; 0
    2e34:	ee e2       	ldi	r30, 0x2E	; 46
    2e36:	f0 e0       	ldi	r31, 0x00	; 0
    2e38:	80 81       	ld	r24, Z
    2e3a:	80 63       	ori	r24, 0x30	; 48
    2e3c:	8c 93       	st	X, r24
}
    2e3e:	0f 90       	pop	r0
    2e40:	0f 90       	pop	r0
    2e42:	cf 91       	pop	r28
    2e44:	df 91       	pop	r29
    2e46:	08 95       	ret

00002e48 <uart0_init>:

//init uart 0 for zegbee
void uart0_init(void)
{
    2e48:	df 93       	push	r29
    2e4a:	cf 93       	push	r28
    2e4c:	cd b7       	in	r28, 0x3d	; 61
    2e4e:	de b7       	in	r29, 0x3e	; 62
UCSR0B = 0x00; //disable while setting baud rate
    2e50:	e1 ec       	ldi	r30, 0xC1	; 193
    2e52:	f0 e0       	ldi	r31, 0x00	; 0
    2e54:	10 82       	st	Z, r1
UCSR0A = 0x00;
    2e56:	e0 ec       	ldi	r30, 0xC0	; 192
    2e58:	f0 e0       	ldi	r31, 0x00	; 0
    2e5a:	10 82       	st	Z, r1
UCSR0C = 0x06;
    2e5c:	e2 ec       	ldi	r30, 0xC2	; 194
    2e5e:	f0 e0       	ldi	r31, 0x00	; 0
    2e60:	86 e0       	ldi	r24, 0x06	; 6
    2e62:	80 83       	st	Z, r24
UBRR0L = 0x47; //set baud rate lo set to 9600
    2e64:	e4 ec       	ldi	r30, 0xC4	; 196
    2e66:	f0 e0       	ldi	r31, 0x00	; 0
    2e68:	87 e4       	ldi	r24, 0x47	; 71
    2e6a:	80 83       	st	Z, r24
UBRR0H = 0x00; //set baud rate hi
    2e6c:	e5 ec       	ldi	r30, 0xC5	; 197
    2e6e:	f0 e0       	ldi	r31, 0x00	; 0
    2e70:	10 82       	st	Z, r1
UCSR0B = 0x90;	//98
    2e72:	e1 ec       	ldi	r30, 0xC1	; 193
    2e74:	f0 e0       	ldi	r31, 0x00	; 0
    2e76:	80 e9       	ldi	r24, 0x90	; 144
    2e78:	80 83       	st	Z, r24
}
    2e7a:	cf 91       	pop	r28
    2e7c:	df 91       	pop	r29
    2e7e:	08 95       	ret

00002e80 <init_devices>:

//Function to initialize ports
void init_devices()
{
    2e80:	df 93       	push	r29
    2e82:	cf 93       	push	r28
    2e84:	cd b7       	in	r28, 0x3d	; 61
    2e86:	de b7       	in	r29, 0x3e	; 62
 cli(); //Clears the global interrupts
    2e88:	f8 94       	cli
 motion_pin_config();
    2e8a:	0e 94 3a 01 	call	0x274	; 0x274 <motion_pin_config>

 port_init();
    2e8e:	0e 94 0f 04 	call	0x81e	; 0x81e <port_init>
 init_adc();
    2e92:	0e 94 18 04 	call	0x830	; 0x830 <init_adc>
 timer5_init();
    2e96:	0e 94 84 03 	call	0x708	; 0x708 <timer5_init>
 init_lcd();
    2e9a:	0e 94 1c 05 	call	0xa38	; 0xa38 <init_lcd>
 lcd_init();
    2e9e:	0e 94 45 0a 	call	0x148a	; 0x148a <lcd_init>
 lcd_set_4bit();
    2ea2:	0e 94 46 05 	call	0xa8c	; 0xa8c <lcd_set_4bit>

 init_buzzer();
    2ea6:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <init_buzzer>
 uart0_init();
    2eaa:	0e 94 24 17 	call	0x2e48	; 0x2e48 <uart0_init>

 left_encoder_pin_config(); //left encoder pin config
    2eae:	0e 94 5d 01 	call	0x2ba	; 0x2ba <left_encoder_pin_config>
 right_encoder_pin_config(); //right encoder pin config
    2eb2:	0e 94 72 01 	call	0x2e4	; 0x2e4 <right_encoder_pin_config>
 left_position_encoder_interrupt_init();
    2eb6:	0e 94 94 01 	call	0x328	; 0x328 <left_position_encoder_interrupt_init>
 right_position_encoder_interrupt_init();
    2eba:	0e 94 ab 01 	call	0x356	; 0x356 <right_position_encoder_interrupt_init>

 arm_init_devices();	
    2ebe:	0e 94 6f 11 	call	0x22de	; 0x22de <arm_init_devices>

 sei(); //Enables the global interrupts
    2ec2:	78 94       	sei
}
    2ec4:	cf 91       	pop	r28
    2ec6:	df 91       	pop	r29
    2ec8:	08 95       	ret

00002eca <__vector_25>:
unsigned int armHeight = 0;



SIGNAL(SIG_USART0_RECV) // ISR for receive complete interrupt
{
    2eca:	1f 92       	push	r1
    2ecc:	0f 92       	push	r0
    2ece:	0f b6       	in	r0, 0x3f	; 63
    2ed0:	0f 92       	push	r0
    2ed2:	00 90 5b 00 	lds	r0, 0x005B
    2ed6:	0f 92       	push	r0
    2ed8:	11 24       	eor	r1, r1
    2eda:	2f 93       	push	r18
    2edc:	3f 93       	push	r19
    2ede:	4f 93       	push	r20
    2ee0:	5f 93       	push	r21
    2ee2:	6f 93       	push	r22
    2ee4:	7f 93       	push	r23
    2ee6:	8f 93       	push	r24
    2ee8:	9f 93       	push	r25
    2eea:	af 93       	push	r26
    2eec:	bf 93       	push	r27
    2eee:	ef 93       	push	r30
    2ef0:	ff 93       	push	r31
    2ef2:	df 93       	push	r29
    2ef4:	cf 93       	push	r28
    2ef6:	0f 92       	push	r0
    2ef8:	0f 92       	push	r0
    2efa:	cd b7       	in	r28, 0x3d	; 61
    2efc:	de b7       	in	r29, 0x3e	; 62
	data = UDR0; //making copy of data from UDR0 in 'data' variable
    2efe:	e6 ec       	ldi	r30, 0xC6	; 198
    2f00:	f0 e0       	ldi	r31, 0x00	; 0
    2f02:	80 81       	ld	r24, Z
    2f04:	80 93 38 03 	sts	0x0338, r24
	//LCD_DISPLAY_INT_1(4);
	if(data == (int)'f')
    2f08:	80 91 38 03 	lds	r24, 0x0338
    2f0c:	86 36       	cpi	r24, 0x66	; 102
    2f0e:	79 f4       	brne	.+30     	; 0x2f2e <__vector_25+0x64>
	{
		BUZZER_ON();
    2f10:	0e 94 b5 10 	call	0x216a	; 0x216a <BUZZER_ON>
		prevState = 1;
    2f14:	81 e0       	ldi	r24, 0x01	; 1
    2f16:	90 e0       	ldi	r25, 0x00	; 0
    2f18:	90 93 1d 02 	sts	0x021D, r25
    2f1c:	80 93 1c 02 	sts	0x021C, r24
		sendOnce = 1;
    2f20:	81 e0       	ldi	r24, 0x01	; 1
    2f22:	90 e0       	ldi	r25, 0x00	; 0
    2f24:	90 93 40 03 	sts	0x0340, r25
    2f28:	80 93 3f 03 	sts	0x033F, r24
    2f2c:	17 c0       	rjmp	.+46     	; 0x2f5c <__vector_25+0x92>
		//UCSR0B = UCSR0B | 0xbf;
	}
	else if(data == (int)'l')
    2f2e:	80 91 38 03 	lds	r24, 0x0338
    2f32:	8c 36       	cpi	r24, 0x6C	; 108
    2f34:	21 f4       	brne	.+8      	; 0x2f3e <__vector_25+0x74>
	{
		command = 'l';
    2f36:	8c e6       	ldi	r24, 0x6C	; 108
    2f38:	80 93 4b 03 	sts	0x034B, r24
    2f3c:	0f c0       	rjmp	.+30     	; 0x2f5c <__vector_25+0x92>
	}
	else if(data == (int)'h')
    2f3e:	80 91 38 03 	lds	r24, 0x0338
    2f42:	88 36       	cpi	r24, 0x68	; 104
    2f44:	21 f4       	brne	.+8      	; 0x2f4e <__vector_25+0x84>
	{
		command = 'h';
    2f46:	88 e6       	ldi	r24, 0x68	; 104
    2f48:	80 93 4b 03 	sts	0x034B, r24
    2f4c:	07 c0       	rjmp	.+14     	; 0x2f5c <__vector_25+0x92>
	}
	else if(data == (int)'d')
    2f4e:	80 91 38 03 	lds	r24, 0x0338
    2f52:	84 36       	cpi	r24, 0x64	; 100
    2f54:	19 f4       	brne	.+6      	; 0x2f5c <__vector_25+0x92>
	{
		command = 'd';
    2f56:	84 e6       	ldi	r24, 0x64	; 100
    2f58:	80 93 4b 03 	sts	0x034B, r24
	}


	switch(data)
    2f5c:	80 91 38 03 	lds	r24, 0x0338
    2f60:	28 2f       	mov	r18, r24
    2f62:	30 e0       	ldi	r19, 0x00	; 0
    2f64:	3a 83       	std	Y+2, r19	; 0x02
    2f66:	29 83       	std	Y+1, r18	; 0x01
    2f68:	89 81       	ldd	r24, Y+1	; 0x01
    2f6a:	9a 81       	ldd	r25, Y+2	; 0x02
    2f6c:	85 33       	cpi	r24, 0x35	; 53
    2f6e:	91 05       	cpc	r25, r1
    2f70:	09 f4       	brne	.+2      	; 0x2f74 <__vector_25+0xaa>
    2f72:	08 c1       	rjmp	.+528    	; 0x3184 <__vector_25+0x2ba>
    2f74:	29 81       	ldd	r18, Y+1	; 0x01
    2f76:	3a 81       	ldd	r19, Y+2	; 0x02
    2f78:	26 33       	cpi	r18, 0x36	; 54
    2f7a:	31 05       	cpc	r19, r1
    2f7c:	f4 f4       	brge	.+60     	; 0x2fba <__vector_25+0xf0>
    2f7e:	89 81       	ldd	r24, Y+1	; 0x01
    2f80:	9a 81       	ldd	r25, Y+2	; 0x02
    2f82:	82 33       	cpi	r24, 0x32	; 50
    2f84:	91 05       	cpc	r25, r1
    2f86:	09 f4       	brne	.+2      	; 0x2f8a <__vector_25+0xc0>
    2f88:	64 c0       	rjmp	.+200    	; 0x3052 <__vector_25+0x188>
    2f8a:	29 81       	ldd	r18, Y+1	; 0x01
    2f8c:	3a 81       	ldd	r19, Y+2	; 0x02
    2f8e:	23 33       	cpi	r18, 0x33	; 51
    2f90:	31 05       	cpc	r19, r1
    2f92:	34 f4       	brge	.+12     	; 0x2fa0 <__vector_25+0xd6>
    2f94:	89 81       	ldd	r24, Y+1	; 0x01
    2f96:	9a 81       	ldd	r25, Y+2	; 0x02
    2f98:	81 33       	cpi	r24, 0x31	; 49
    2f9a:	91 05       	cpc	r25, r1
    2f9c:	39 f1       	breq	.+78     	; 0x2fec <__vector_25+0x122>
    2f9e:	e4 c1       	rjmp	.+968    	; 0x3368 <__vector_25+0x49e>
    2fa0:	29 81       	ldd	r18, Y+1	; 0x01
    2fa2:	3a 81       	ldd	r19, Y+2	; 0x02
    2fa4:	23 33       	cpi	r18, 0x33	; 51
    2fa6:	31 05       	cpc	r19, r1
    2fa8:	09 f4       	brne	.+2      	; 0x2fac <__vector_25+0xe2>
    2faa:	86 c0       	rjmp	.+268    	; 0x30b8 <__vector_25+0x1ee>
    2fac:	89 81       	ldd	r24, Y+1	; 0x01
    2fae:	9a 81       	ldd	r25, Y+2	; 0x02
    2fb0:	84 33       	cpi	r24, 0x34	; 52
    2fb2:	91 05       	cpc	r25, r1
    2fb4:	09 f4       	brne	.+2      	; 0x2fb8 <__vector_25+0xee>
    2fb6:	b3 c0       	rjmp	.+358    	; 0x311e <__vector_25+0x254>
    2fb8:	d7 c1       	rjmp	.+942    	; 0x3368 <__vector_25+0x49e>
    2fba:	29 81       	ldd	r18, Y+1	; 0x01
    2fbc:	3a 81       	ldd	r19, Y+2	; 0x02
    2fbe:	27 33       	cpi	r18, 0x37	; 55
    2fc0:	31 05       	cpc	r19, r1
    2fc2:	09 f4       	brne	.+2      	; 0x2fc6 <__vector_25+0xfc>
    2fc4:	45 c1       	rjmp	.+650    	; 0x3250 <__vector_25+0x386>
    2fc6:	89 81       	ldd	r24, Y+1	; 0x01
    2fc8:	9a 81       	ldd	r25, Y+2	; 0x02
    2fca:	87 33       	cpi	r24, 0x37	; 55
    2fcc:	91 05       	cpc	r25, r1
    2fce:	0c f4       	brge	.+2      	; 0x2fd2 <__vector_25+0x108>
    2fd0:	0c c1       	rjmp	.+536    	; 0x31ea <__vector_25+0x320>
    2fd2:	29 81       	ldd	r18, Y+1	; 0x01
    2fd4:	3a 81       	ldd	r19, Y+2	; 0x02
    2fd6:	28 33       	cpi	r18, 0x38	; 56
    2fd8:	31 05       	cpc	r19, r1
    2fda:	09 f4       	brne	.+2      	; 0x2fde <__vector_25+0x114>
    2fdc:	6a c1       	rjmp	.+724    	; 0x32b2 <__vector_25+0x3e8>
    2fde:	89 81       	ldd	r24, Y+1	; 0x01
    2fe0:	9a 81       	ldd	r25, Y+2	; 0x02
    2fe2:	89 33       	cpi	r24, 0x39	; 57
    2fe4:	91 05       	cpc	r25, r1
    2fe6:	09 f4       	brne	.+2      	; 0x2fea <__vector_25+0x120>
    2fe8:	94 c1       	rjmp	.+808    	; 0x3312 <__vector_25+0x448>
    2fea:	be c1       	rjmp	.+892    	; 0x3368 <__vector_25+0x49e>
	{
		case 0x31:
		{
			BUZZER_ON();
    2fec:	0e 94 b5 10 	call	0x216a	; 0x216a <BUZZER_ON>
			if(command == 'l')
    2ff0:	80 91 4b 03 	lds	r24, 0x034B
    2ff4:	8c 36       	cpi	r24, 0x6C	; 108
    2ff6:	b9 f4       	brne	.+46     	; 0x3026 <__vector_25+0x15c>
			{
				locations[location_cnt] = 1;
    2ff8:	80 91 34 03 	lds	r24, 0x0334
    2ffc:	90 91 35 03 	lds	r25, 0x0335
    3000:	88 0f       	add	r24, r24
    3002:	99 1f       	adc	r25, r25
    3004:	fc 01       	movw	r30, r24
    3006:	e2 5b       	subi	r30, 0xB2	; 178
    3008:	fc 4f       	sbci	r31, 0xFC	; 252
    300a:	81 e0       	ldi	r24, 0x01	; 1
    300c:	90 e0       	ldi	r25, 0x00	; 0
    300e:	91 83       	std	Z+1, r25	; 0x01
    3010:	80 83       	st	Z, r24
				location_cnt++;
    3012:	80 91 34 03 	lds	r24, 0x0334
    3016:	90 91 35 03 	lds	r25, 0x0335
    301a:	01 96       	adiw	r24, 0x01	; 1
    301c:	90 93 35 03 	sts	0x0335, r25
    3020:	80 93 34 03 	sts	0x0334, r24
    3024:	a1 c1       	rjmp	.+834    	; 0x3368 <__vector_25+0x49e>
				break;
			}
			else if(command == 'h')
    3026:	80 91 4b 03 	lds	r24, 0x034B
    302a:	88 36       	cpi	r24, 0x68	; 104
    302c:	69 f4       	brne	.+26     	; 0x3048 <__vector_25+0x17e>
			{
				armHeight = 10;
    302e:	8a e0       	ldi	r24, 0x0A	; 10
    3030:	90 e0       	ldi	r25, 0x00	; 0
    3032:	90 93 44 03 	sts	0x0344, r25
    3036:	80 93 43 03 	sts	0x0343, r24
				recievedHeight = 1;
    303a:	81 e0       	ldi	r24, 0x01	; 1
    303c:	90 e0       	ldi	r25, 0x00	; 0
    303e:	90 93 42 03 	sts	0x0342, r25
    3042:	80 93 41 03 	sts	0x0341, r24
    3046:	90 c1       	rjmp	.+800    	; 0x3368 <__vector_25+0x49e>
				break;
			}
			else if(command == 'd')
    3048:	80 91 4b 03 	lds	r24, 0x034B
    304c:	84 36       	cpi	r24, 0x64	; 100
    304e:	09 f4       	brne	.+2      	; 0x3052 <__vector_25+0x188>
    3050:	8b c1       	rjmp	.+790    	; 0x3368 <__vector_25+0x49e>
				break;
			} 
		}
		case 0x32:
		{
			BUZZER_ON();
    3052:	0e 94 b5 10 	call	0x216a	; 0x216a <BUZZER_ON>
			if(command == 'l')
    3056:	80 91 4b 03 	lds	r24, 0x034B
    305a:	8c 36       	cpi	r24, 0x6C	; 108
    305c:	b9 f4       	brne	.+46     	; 0x308c <__vector_25+0x1c2>
			{
				locations[location_cnt] = 2;
    305e:	80 91 34 03 	lds	r24, 0x0334
    3062:	90 91 35 03 	lds	r25, 0x0335
    3066:	88 0f       	add	r24, r24
    3068:	99 1f       	adc	r25, r25
    306a:	fc 01       	movw	r30, r24
    306c:	e2 5b       	subi	r30, 0xB2	; 178
    306e:	fc 4f       	sbci	r31, 0xFC	; 252
    3070:	82 e0       	ldi	r24, 0x02	; 2
    3072:	90 e0       	ldi	r25, 0x00	; 0
    3074:	91 83       	std	Z+1, r25	; 0x01
    3076:	80 83       	st	Z, r24
				location_cnt++;
    3078:	80 91 34 03 	lds	r24, 0x0334
    307c:	90 91 35 03 	lds	r25, 0x0335
    3080:	01 96       	adiw	r24, 0x01	; 1
    3082:	90 93 35 03 	sts	0x0335, r25
    3086:	80 93 34 03 	sts	0x0334, r24
    308a:	6e c1       	rjmp	.+732    	; 0x3368 <__vector_25+0x49e>
				break;
			}
			else if(command == 'h')
    308c:	80 91 4b 03 	lds	r24, 0x034B
    3090:	88 36       	cpi	r24, 0x68	; 104
    3092:	69 f4       	brne	.+26     	; 0x30ae <__vector_25+0x1e4>
			{
				armHeight = 20;
    3094:	84 e1       	ldi	r24, 0x14	; 20
    3096:	90 e0       	ldi	r25, 0x00	; 0
    3098:	90 93 44 03 	sts	0x0344, r25
    309c:	80 93 43 03 	sts	0x0343, r24
				recievedHeight = 1;
    30a0:	81 e0       	ldi	r24, 0x01	; 1
    30a2:	90 e0       	ldi	r25, 0x00	; 0
    30a4:	90 93 42 03 	sts	0x0342, r25
    30a8:	80 93 41 03 	sts	0x0341, r24
    30ac:	5d c1       	rjmp	.+698    	; 0x3368 <__vector_25+0x49e>
				break;
			}
			else if(command == 'd')
    30ae:	80 91 4b 03 	lds	r24, 0x034B
    30b2:	84 36       	cpi	r24, 0x64	; 100
    30b4:	09 f4       	brne	.+2      	; 0x30b8 <__vector_25+0x1ee>
    30b6:	58 c1       	rjmp	.+688    	; 0x3368 <__vector_25+0x49e>
				break;
			} 
		}
		case 0x33:
		{
			BUZZER_ON();
    30b8:	0e 94 b5 10 	call	0x216a	; 0x216a <BUZZER_ON>
			if(command == 'l')
    30bc:	80 91 4b 03 	lds	r24, 0x034B
    30c0:	8c 36       	cpi	r24, 0x6C	; 108
    30c2:	b9 f4       	brne	.+46     	; 0x30f2 <__vector_25+0x228>
			{
				locations[location_cnt] = 3;
    30c4:	80 91 34 03 	lds	r24, 0x0334
    30c8:	90 91 35 03 	lds	r25, 0x0335
    30cc:	88 0f       	add	r24, r24
    30ce:	99 1f       	adc	r25, r25
    30d0:	fc 01       	movw	r30, r24
    30d2:	e2 5b       	subi	r30, 0xB2	; 178
    30d4:	fc 4f       	sbci	r31, 0xFC	; 252
    30d6:	83 e0       	ldi	r24, 0x03	; 3
    30d8:	90 e0       	ldi	r25, 0x00	; 0
    30da:	91 83       	std	Z+1, r25	; 0x01
    30dc:	80 83       	st	Z, r24
				location_cnt++;
    30de:	80 91 34 03 	lds	r24, 0x0334
    30e2:	90 91 35 03 	lds	r25, 0x0335
    30e6:	01 96       	adiw	r24, 0x01	; 1
    30e8:	90 93 35 03 	sts	0x0335, r25
    30ec:	80 93 34 03 	sts	0x0334, r24
    30f0:	3b c1       	rjmp	.+630    	; 0x3368 <__vector_25+0x49e>
				break;
			}
			else if(command == 'h')
    30f2:	80 91 4b 03 	lds	r24, 0x034B
    30f6:	88 36       	cpi	r24, 0x68	; 104
    30f8:	69 f4       	brne	.+26     	; 0x3114 <__vector_25+0x24a>
			{
				armHeight = 30;
    30fa:	8e e1       	ldi	r24, 0x1E	; 30
    30fc:	90 e0       	ldi	r25, 0x00	; 0
    30fe:	90 93 44 03 	sts	0x0344, r25
    3102:	80 93 43 03 	sts	0x0343, r24
				recievedHeight = 1;
    3106:	81 e0       	ldi	r24, 0x01	; 1
    3108:	90 e0       	ldi	r25, 0x00	; 0
    310a:	90 93 42 03 	sts	0x0342, r25
    310e:	80 93 41 03 	sts	0x0341, r24
    3112:	2a c1       	rjmp	.+596    	; 0x3368 <__vector_25+0x49e>
				break;
			}
			else if(command == 'd')
    3114:	80 91 4b 03 	lds	r24, 0x034B
    3118:	84 36       	cpi	r24, 0x64	; 100
    311a:	09 f4       	brne	.+2      	; 0x311e <__vector_25+0x254>
    311c:	25 c1       	rjmp	.+586    	; 0x3368 <__vector_25+0x49e>
				break;
			} 
		}
		case 0x34:
		{
			BUZZER_ON();
    311e:	0e 94 b5 10 	call	0x216a	; 0x216a <BUZZER_ON>
			if(command == 'l')
    3122:	80 91 4b 03 	lds	r24, 0x034B
    3126:	8c 36       	cpi	r24, 0x6C	; 108
    3128:	b9 f4       	brne	.+46     	; 0x3158 <__vector_25+0x28e>
			{
				locations[location_cnt] = 4;
    312a:	80 91 34 03 	lds	r24, 0x0334
    312e:	90 91 35 03 	lds	r25, 0x0335
    3132:	88 0f       	add	r24, r24
    3134:	99 1f       	adc	r25, r25
    3136:	fc 01       	movw	r30, r24
    3138:	e2 5b       	subi	r30, 0xB2	; 178
    313a:	fc 4f       	sbci	r31, 0xFC	; 252
    313c:	84 e0       	ldi	r24, 0x04	; 4
    313e:	90 e0       	ldi	r25, 0x00	; 0
    3140:	91 83       	std	Z+1, r25	; 0x01
    3142:	80 83       	st	Z, r24
				location_cnt++;
    3144:	80 91 34 03 	lds	r24, 0x0334
    3148:	90 91 35 03 	lds	r25, 0x0335
    314c:	01 96       	adiw	r24, 0x01	; 1
    314e:	90 93 35 03 	sts	0x0335, r25
    3152:	80 93 34 03 	sts	0x0334, r24
    3156:	08 c1       	rjmp	.+528    	; 0x3368 <__vector_25+0x49e>
				break;
			}
			else if(command == 'h')
    3158:	80 91 4b 03 	lds	r24, 0x034B
    315c:	88 36       	cpi	r24, 0x68	; 104
    315e:	69 f4       	brne	.+26     	; 0x317a <__vector_25+0x2b0>
			{
				armHeight = 40;
    3160:	88 e2       	ldi	r24, 0x28	; 40
    3162:	90 e0       	ldi	r25, 0x00	; 0
    3164:	90 93 44 03 	sts	0x0344, r25
    3168:	80 93 43 03 	sts	0x0343, r24
				recievedHeight = 1;
    316c:	81 e0       	ldi	r24, 0x01	; 1
    316e:	90 e0       	ldi	r25, 0x00	; 0
    3170:	90 93 42 03 	sts	0x0342, r25
    3174:	80 93 41 03 	sts	0x0341, r24
    3178:	f7 c0       	rjmp	.+494    	; 0x3368 <__vector_25+0x49e>
				break;
			}
			else if(command == 'd')
    317a:	80 91 4b 03 	lds	r24, 0x034B
    317e:	84 36       	cpi	r24, 0x64	; 100
    3180:	09 f4       	brne	.+2      	; 0x3184 <__vector_25+0x2ba>
    3182:	f2 c0       	rjmp	.+484    	; 0x3368 <__vector_25+0x49e>
				break;
			} 
		}
		case 0x35:
		{
			BUZZER_ON();
    3184:	0e 94 b5 10 	call	0x216a	; 0x216a <BUZZER_ON>
			if(command == 'l')
    3188:	80 91 4b 03 	lds	r24, 0x034B
    318c:	8c 36       	cpi	r24, 0x6C	; 108
    318e:	b9 f4       	brne	.+46     	; 0x31be <__vector_25+0x2f4>
			{
				locations[location_cnt] = 5;
    3190:	80 91 34 03 	lds	r24, 0x0334
    3194:	90 91 35 03 	lds	r25, 0x0335
    3198:	88 0f       	add	r24, r24
    319a:	99 1f       	adc	r25, r25
    319c:	fc 01       	movw	r30, r24
    319e:	e2 5b       	subi	r30, 0xB2	; 178
    31a0:	fc 4f       	sbci	r31, 0xFC	; 252
    31a2:	85 e0       	ldi	r24, 0x05	; 5
    31a4:	90 e0       	ldi	r25, 0x00	; 0
    31a6:	91 83       	std	Z+1, r25	; 0x01
    31a8:	80 83       	st	Z, r24
				location_cnt++;
    31aa:	80 91 34 03 	lds	r24, 0x0334
    31ae:	90 91 35 03 	lds	r25, 0x0335
    31b2:	01 96       	adiw	r24, 0x01	; 1
    31b4:	90 93 35 03 	sts	0x0335, r25
    31b8:	80 93 34 03 	sts	0x0334, r24
    31bc:	d5 c0       	rjmp	.+426    	; 0x3368 <__vector_25+0x49e>
				break;
			}
			else if(command == 'h')
    31be:	80 91 4b 03 	lds	r24, 0x034B
    31c2:	88 36       	cpi	r24, 0x68	; 104
    31c4:	69 f4       	brne	.+26     	; 0x31e0 <__vector_25+0x316>
			{
				armHeight = 50;
    31c6:	82 e3       	ldi	r24, 0x32	; 50
    31c8:	90 e0       	ldi	r25, 0x00	; 0
    31ca:	90 93 44 03 	sts	0x0344, r25
    31ce:	80 93 43 03 	sts	0x0343, r24
				recievedHeight = 1;
    31d2:	81 e0       	ldi	r24, 0x01	; 1
    31d4:	90 e0       	ldi	r25, 0x00	; 0
    31d6:	90 93 42 03 	sts	0x0342, r25
    31da:	80 93 41 03 	sts	0x0341, r24
    31de:	c4 c0       	rjmp	.+392    	; 0x3368 <__vector_25+0x49e>
				break;
			}
			else if(command == 'd')
    31e0:	80 91 4b 03 	lds	r24, 0x034B
    31e4:	84 36       	cpi	r24, 0x64	; 100
    31e6:	09 f4       	brne	.+2      	; 0x31ea <__vector_25+0x320>
    31e8:	bf c0       	rjmp	.+382    	; 0x3368 <__vector_25+0x49e>
			} 
		}
		
		case 0x36:
		{
			BUZZER_ON();
    31ea:	0e 94 b5 10 	call	0x216a	; 0x216a <BUZZER_ON>
			if(command == 'l')
    31ee:	80 91 4b 03 	lds	r24, 0x034B
    31f2:	8c 36       	cpi	r24, 0x6C	; 108
    31f4:	b9 f4       	brne	.+46     	; 0x3224 <__vector_25+0x35a>
			{
				locations[location_cnt] = 6;
    31f6:	80 91 34 03 	lds	r24, 0x0334
    31fa:	90 91 35 03 	lds	r25, 0x0335
    31fe:	88 0f       	add	r24, r24
    3200:	99 1f       	adc	r25, r25
    3202:	fc 01       	movw	r30, r24
    3204:	e2 5b       	subi	r30, 0xB2	; 178
    3206:	fc 4f       	sbci	r31, 0xFC	; 252
    3208:	86 e0       	ldi	r24, 0x06	; 6
    320a:	90 e0       	ldi	r25, 0x00	; 0
    320c:	91 83       	std	Z+1, r25	; 0x01
    320e:	80 83       	st	Z, r24
				location_cnt++;
    3210:	80 91 34 03 	lds	r24, 0x0334
    3214:	90 91 35 03 	lds	r25, 0x0335
    3218:	01 96       	adiw	r24, 0x01	; 1
    321a:	90 93 35 03 	sts	0x0335, r25
    321e:	80 93 34 03 	sts	0x0334, r24
    3222:	a2 c0       	rjmp	.+324    	; 0x3368 <__vector_25+0x49e>
				break;
			}
			else if(command == 'h')
    3224:	80 91 4b 03 	lds	r24, 0x034B
    3228:	88 36       	cpi	r24, 0x68	; 104
    322a:	69 f4       	brne	.+26     	; 0x3246 <__vector_25+0x37c>
			{
				armHeight = 60;
    322c:	8c e3       	ldi	r24, 0x3C	; 60
    322e:	90 e0       	ldi	r25, 0x00	; 0
    3230:	90 93 44 03 	sts	0x0344, r25
    3234:	80 93 43 03 	sts	0x0343, r24
				recievedHeight = 1;
    3238:	81 e0       	ldi	r24, 0x01	; 1
    323a:	90 e0       	ldi	r25, 0x00	; 0
    323c:	90 93 42 03 	sts	0x0342, r25
    3240:	80 93 41 03 	sts	0x0341, r24
    3244:	91 c0       	rjmp	.+290    	; 0x3368 <__vector_25+0x49e>
				break;
			}
			else if(command == 'd')
    3246:	80 91 4b 03 	lds	r24, 0x034B
    324a:	84 36       	cpi	r24, 0x64	; 100
    324c:	09 f4       	brne	.+2      	; 0x3250 <__vector_25+0x386>
    324e:	8c c0       	rjmp	.+280    	; 0x3368 <__vector_25+0x49e>
				break;
			} 
		}
		case 0x37:
		{
			if(command == 'l')
    3250:	80 91 4b 03 	lds	r24, 0x034B
    3254:	8c 36       	cpi	r24, 0x6C	; 108
    3256:	b9 f4       	brne	.+46     	; 0x3286 <__vector_25+0x3bc>
			{
				locations[location_cnt] = 7;
    3258:	80 91 34 03 	lds	r24, 0x0334
    325c:	90 91 35 03 	lds	r25, 0x0335
    3260:	88 0f       	add	r24, r24
    3262:	99 1f       	adc	r25, r25
    3264:	fc 01       	movw	r30, r24
    3266:	e2 5b       	subi	r30, 0xB2	; 178
    3268:	fc 4f       	sbci	r31, 0xFC	; 252
    326a:	87 e0       	ldi	r24, 0x07	; 7
    326c:	90 e0       	ldi	r25, 0x00	; 0
    326e:	91 83       	std	Z+1, r25	; 0x01
    3270:	80 83       	st	Z, r24
				location_cnt++;
    3272:	80 91 34 03 	lds	r24, 0x0334
    3276:	90 91 35 03 	lds	r25, 0x0335
    327a:	01 96       	adiw	r24, 0x01	; 1
    327c:	90 93 35 03 	sts	0x0335, r25
    3280:	80 93 34 03 	sts	0x0334, r24
    3284:	71 c0       	rjmp	.+226    	; 0x3368 <__vector_25+0x49e>
				break;
			}
			else if(command == 'h')
    3286:	80 91 4b 03 	lds	r24, 0x034B
    328a:	88 36       	cpi	r24, 0x68	; 104
    328c:	69 f4       	brne	.+26     	; 0x32a8 <__vector_25+0x3de>
			{
				armHeight = 70;
    328e:	86 e4       	ldi	r24, 0x46	; 70
    3290:	90 e0       	ldi	r25, 0x00	; 0
    3292:	90 93 44 03 	sts	0x0344, r25
    3296:	80 93 43 03 	sts	0x0343, r24
				recievedHeight = 1;
    329a:	81 e0       	ldi	r24, 0x01	; 1
    329c:	90 e0       	ldi	r25, 0x00	; 0
    329e:	90 93 42 03 	sts	0x0342, r25
    32a2:	80 93 41 03 	sts	0x0341, r24
    32a6:	60 c0       	rjmp	.+192    	; 0x3368 <__vector_25+0x49e>
				break;
			}
			else if(command == 'd')
    32a8:	80 91 4b 03 	lds	r24, 0x034B
    32ac:	84 36       	cpi	r24, 0x64	; 100
    32ae:	09 f4       	brne	.+2      	; 0x32b2 <__vector_25+0x3e8>
    32b0:	5b c0       	rjmp	.+182    	; 0x3368 <__vector_25+0x49e>
			} 
		}
		
		case 0x38:
		{
			if(command == 'l')
    32b2:	80 91 4b 03 	lds	r24, 0x034B
    32b6:	8c 36       	cpi	r24, 0x6C	; 108
    32b8:	b9 f4       	brne	.+46     	; 0x32e8 <__vector_25+0x41e>
			{
				locations[location_cnt] = 8;
    32ba:	80 91 34 03 	lds	r24, 0x0334
    32be:	90 91 35 03 	lds	r25, 0x0335
    32c2:	88 0f       	add	r24, r24
    32c4:	99 1f       	adc	r25, r25
    32c6:	fc 01       	movw	r30, r24
    32c8:	e2 5b       	subi	r30, 0xB2	; 178
    32ca:	fc 4f       	sbci	r31, 0xFC	; 252
    32cc:	88 e0       	ldi	r24, 0x08	; 8
    32ce:	90 e0       	ldi	r25, 0x00	; 0
    32d0:	91 83       	std	Z+1, r25	; 0x01
    32d2:	80 83       	st	Z, r24
				location_cnt++;
    32d4:	80 91 34 03 	lds	r24, 0x0334
    32d8:	90 91 35 03 	lds	r25, 0x0335
    32dc:	01 96       	adiw	r24, 0x01	; 1
    32de:	90 93 35 03 	sts	0x0335, r25
    32e2:	80 93 34 03 	sts	0x0334, r24
    32e6:	40 c0       	rjmp	.+128    	; 0x3368 <__vector_25+0x49e>
				break;
			}
			else if(command == 'h')
    32e8:	80 91 4b 03 	lds	r24, 0x034B
    32ec:	88 36       	cpi	r24, 0x68	; 104
    32ee:	69 f4       	brne	.+26     	; 0x330a <__vector_25+0x440>
			{
				armHeight = 80;
    32f0:	80 e5       	ldi	r24, 0x50	; 80
    32f2:	90 e0       	ldi	r25, 0x00	; 0
    32f4:	90 93 44 03 	sts	0x0344, r25
    32f8:	80 93 43 03 	sts	0x0343, r24
				recievedHeight = 1;
    32fc:	81 e0       	ldi	r24, 0x01	; 1
    32fe:	90 e0       	ldi	r25, 0x00	; 0
    3300:	90 93 42 03 	sts	0x0342, r25
    3304:	80 93 41 03 	sts	0x0341, r24
    3308:	2f c0       	rjmp	.+94     	; 0x3368 <__vector_25+0x49e>
				break;
			}
			else if(command == 'd')
    330a:	80 91 4b 03 	lds	r24, 0x034B
    330e:	84 36       	cpi	r24, 0x64	; 100
    3310:	59 f1       	breq	.+86     	; 0x3368 <__vector_25+0x49e>
		}

		
		case 0x39:
		{
			if(command == 'l')
    3312:	80 91 4b 03 	lds	r24, 0x034B
    3316:	8c 36       	cpi	r24, 0x6C	; 108
    3318:	b9 f4       	brne	.+46     	; 0x3348 <__vector_25+0x47e>
			{
				locations[location_cnt] = 9;
    331a:	80 91 34 03 	lds	r24, 0x0334
    331e:	90 91 35 03 	lds	r25, 0x0335
    3322:	88 0f       	add	r24, r24
    3324:	99 1f       	adc	r25, r25
    3326:	fc 01       	movw	r30, r24
    3328:	e2 5b       	subi	r30, 0xB2	; 178
    332a:	fc 4f       	sbci	r31, 0xFC	; 252
    332c:	89 e0       	ldi	r24, 0x09	; 9
    332e:	90 e0       	ldi	r25, 0x00	; 0
    3330:	91 83       	std	Z+1, r25	; 0x01
    3332:	80 83       	st	Z, r24
				location_cnt++;
    3334:	80 91 34 03 	lds	r24, 0x0334
    3338:	90 91 35 03 	lds	r25, 0x0335
    333c:	01 96       	adiw	r24, 0x01	; 1
    333e:	90 93 35 03 	sts	0x0335, r25
    3342:	80 93 34 03 	sts	0x0334, r24
    3346:	10 c0       	rjmp	.+32     	; 0x3368 <__vector_25+0x49e>
				break;
			}
			else if(command == 'h')
    3348:	80 91 4b 03 	lds	r24, 0x034B
    334c:	88 36       	cpi	r24, 0x68	; 104
    334e:	61 f4       	brne	.+24     	; 0x3368 <__vector_25+0x49e>
			{
				armHeight = 90;
    3350:	8a e5       	ldi	r24, 0x5A	; 90
    3352:	90 e0       	ldi	r25, 0x00	; 0
    3354:	90 93 44 03 	sts	0x0344, r25
    3358:	80 93 43 03 	sts	0x0343, r24
				recievedHeight = 1;
    335c:	81 e0       	ldi	r24, 0x01	; 1
    335e:	90 e0       	ldi	r25, 0x00	; 0
    3360:	90 93 42 03 	sts	0x0342, r25
    3364:	80 93 41 03 	sts	0x0341, r24
				break;
			} 
		}
	}

}
    3368:	0f 90       	pop	r0
    336a:	0f 90       	pop	r0
    336c:	cf 91       	pop	r28
    336e:	df 91       	pop	r29
    3370:	ff 91       	pop	r31
    3372:	ef 91       	pop	r30
    3374:	bf 91       	pop	r27
    3376:	af 91       	pop	r26
    3378:	9f 91       	pop	r25
    337a:	8f 91       	pop	r24
    337c:	7f 91       	pop	r23
    337e:	6f 91       	pop	r22
    3380:	5f 91       	pop	r21
    3382:	4f 91       	pop	r20
    3384:	3f 91       	pop	r19
    3386:	2f 91       	pop	r18
    3388:	0f 90       	pop	r0
    338a:	00 92 5b 00 	sts	0x005B, r0
    338e:	0f 90       	pop	r0
    3390:	0f be       	out	0x3f, r0	; 63
    3392:	0f 90       	pop	r0
    3394:	1f 90       	pop	r1
    3396:	18 95       	reti

00003398 <frontDist>:

int frontDist()
{
    3398:	df 93       	push	r29
    339a:	cf 93       	push	r28
    339c:	cd b7       	in	r28, 0x3d	; 61
    339e:	de b7       	in	r29, 0x3e	; 62
    33a0:	2a 97       	sbiw	r28, 0x0a	; 10
    33a2:	0f b6       	in	r0, 0x3f	; 63
    33a4:	f8 94       	cli
    33a6:	de bf       	out	0x3e, r29	; 62
    33a8:	0f be       	out	0x3f, r0	; 63
    33aa:	cd bf       	out	0x3d, r28	; 61
	int objDist = front_dist_mm();
    33ac:	0e 94 06 05 	call	0xa0c	; 0xa0c <front_dist_mm>
    33b0:	9a 87       	std	Y+10, r25	; 0x0a
    33b2:	89 87       	std	Y+9, r24	; 0x09

	float readDist = (float) objDist;
    33b4:	89 85       	ldd	r24, Y+9	; 0x09
    33b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    33b8:	aa 27       	eor	r26, r26
    33ba:	97 fd       	sbrc	r25, 7
    33bc:	a0 95       	com	r26
    33be:	ba 2f       	mov	r27, r26
    33c0:	bc 01       	movw	r22, r24
    33c2:	cd 01       	movw	r24, r26
    33c4:	0e 94 8e 28 	call	0x511c	; 0x511c <__floatsisf>
    33c8:	dc 01       	movw	r26, r24
    33ca:	cb 01       	movw	r24, r22
    33cc:	8d 83       	std	Y+5, r24	; 0x05
    33ce:	9e 83       	std	Y+6, r25	; 0x06
    33d0:	af 83       	std	Y+7, r26	; 0x07
    33d2:	b8 87       	std	Y+8, r27	; 0x08
	float actualDist =  readDist/2.75;	//calbiration value
    33d4:	6d 81       	ldd	r22, Y+5	; 0x05
    33d6:	7e 81       	ldd	r23, Y+6	; 0x06
    33d8:	8f 81       	ldd	r24, Y+7	; 0x07
    33da:	98 85       	ldd	r25, Y+8	; 0x08
    33dc:	20 e0       	ldi	r18, 0x00	; 0
    33de:	30 e0       	ldi	r19, 0x00	; 0
    33e0:	40 e3       	ldi	r20, 0x30	; 48
    33e2:	50 e4       	ldi	r21, 0x40	; 64
    33e4:	0e 94 52 27 	call	0x4ea4	; 0x4ea4 <__divsf3>
    33e8:	dc 01       	movw	r26, r24
    33ea:	cb 01       	movw	r24, r22
    33ec:	89 83       	std	Y+1, r24	; 0x01
    33ee:	9a 83       	std	Y+2, r25	; 0x02
    33f0:	ab 83       	std	Y+3, r26	; 0x03
    33f2:	bc 83       	std	Y+4, r27	; 0x04

	return (int) actualDist;
    33f4:	69 81       	ldd	r22, Y+1	; 0x01
    33f6:	7a 81       	ldd	r23, Y+2	; 0x02
    33f8:	8b 81       	ldd	r24, Y+3	; 0x03
    33fa:	9c 81       	ldd	r25, Y+4	; 0x04
    33fc:	0e 94 ec 28 	call	0x51d8	; 0x51d8 <__fixsfsi>
    3400:	dc 01       	movw	r26, r24
    3402:	cb 01       	movw	r24, r22
}
    3404:	2a 96       	adiw	r28, 0x0a	; 10
    3406:	0f b6       	in	r0, 0x3f	; 63
    3408:	f8 94       	cli
    340a:	de bf       	out	0x3e, r29	; 62
    340c:	0f be       	out	0x3f, r0	; 63
    340e:	cd bf       	out	0x3d, r28	; 61
    3410:	cf 91       	pop	r28
    3412:	df 91       	pop	r29
    3414:	08 95       	ret

00003416 <moveToObj>:

int moveToObj()
{
    3416:	df 93       	push	r29
    3418:	cf 93       	push	r28
    341a:	00 d0       	rcall	.+0      	; 0x341c <moveToObj+0x6>
    341c:	00 d0       	rcall	.+0      	; 0x341e <moveToObj+0x8>
    341e:	cd b7       	in	r28, 0x3d	; 61
    3420:	de b7       	in	r29, 0x3e	; 62
	int constArmDist = 0; //60mm
    3422:	1e 82       	std	Y+6, r1	; 0x06
    3424:	1d 82       	std	Y+5, r1	; 0x05
	int objDist = frontDist();
    3426:	0e 94 cc 19 	call	0x3398	; 0x3398 <frontDist>
    342a:	9c 83       	std	Y+4, r25	; 0x04
    342c:	8b 83       	std	Y+3, r24	; 0x03

	int moveBy = objDist;
    342e:	8b 81       	ldd	r24, Y+3	; 0x03
    3430:	9c 81       	ldd	r25, Y+4	; 0x04
    3432:	9a 83       	std	Y+2, r25	; 0x02
    3434:	89 83       	std	Y+1, r24	; 0x01
	forward_mm(moveBy);
    3436:	89 81       	ldd	r24, Y+1	; 0x01
    3438:	9a 81       	ldd	r25, Y+2	; 0x02
    343a:	0e 94 34 03 	call	0x668	; 0x668 <forward_mm>

	return moveBy;
    343e:	89 81       	ldd	r24, Y+1	; 0x01
    3440:	9a 81       	ldd	r25, Y+2	; 0x02
}
    3442:	26 96       	adiw	r28, 0x06	; 6
    3444:	0f b6       	in	r0, 0x3f	; 63
    3446:	f8 94       	cli
    3448:	de bf       	out	0x3e, r29	; 62
    344a:	0f be       	out	0x3f, r0	; 63
    344c:	cd bf       	out	0x3d, r28	; 61
    344e:	cf 91       	pop	r28
    3450:	df 91       	pop	r29
    3452:	08 95       	ret

00003454 <backOffObj>:

void backOffObj(int mm)
{
    3454:	df 93       	push	r29
    3456:	cf 93       	push	r28
    3458:	0f 92       	push	r0
    345a:	0f 92       	push	r0
    345c:	cd b7       	in	r28, 0x3d	; 61
    345e:	de b7       	in	r29, 0x3e	; 62
    3460:	9a 83       	std	Y+2, r25	; 0x02
    3462:	89 83       	std	Y+1, r24	; 0x01
	back_mm(mm);
    3464:	89 81       	ldd	r24, Y+1	; 0x01
    3466:	9a 81       	ldd	r25, Y+2	; 0x02
    3468:	0e 94 47 03 	call	0x68e	; 0x68e <back_mm>
}
    346c:	0f 90       	pop	r0
    346e:	0f 90       	pop	r0
    3470:	cf 91       	pop	r28
    3472:	df 91       	pop	r29
    3474:	08 95       	ret

00003476 <CollectFruit>:
void CollectFruit()
{
    3476:	0f 93       	push	r16
    3478:	1f 93       	push	r17
    347a:	df 93       	push	r29
    347c:	cf 93       	push	r28
    347e:	cd b7       	in	r28, 0x3d	; 61
    3480:	de b7       	in	r29, 0x3e	; 62
    3482:	c2 59       	subi	r28, 0x92	; 146
    3484:	d0 40       	sbci	r29, 0x00	; 0
    3486:	0f b6       	in	r0, 0x3f	; 63
    3488:	f8 94       	cli
    348a:	de bf       	out	0x3e, r29	; 62
    348c:	0f be       	out	0x3f, r0	; 63
    348e:	cd bf       	out	0x3d, r28	; 61

	int forwardMoved;

	int objDist;
	
	int temp =  120;
    3490:	fe 01       	movw	r30, r28
    3492:	e3 57       	subi	r30, 0x73	; 115
    3494:	ff 4f       	sbci	r31, 0xFF	; 255
    3496:	88 e7       	ldi	r24, 0x78	; 120
    3498:	90 e0       	ldi	r25, 0x00	; 0
    349a:	91 83       	std	Z+1, r25	; 0x01
    349c:	80 83       	st	Z, r24
	
	BUZZER_ON();
    349e:	0e 94 b5 10 	call	0x216a	; 0x216a <BUZZER_ON>
	STOP();
    34a2:	0e 94 31 02 	call	0x462	; 0x462 <STOP>
	//set new speed

	MOTOR_LEFT_SPEED(200);
    34a6:	88 ec       	ldi	r24, 0xC8	; 200
    34a8:	90 e0       	ldi	r25, 0x00	; 0
    34aa:	0e 94 c8 03 	call	0x790	; 0x790 <MOTOR_LEFT_SPEED>
	MOTOR_RIGHT_SPEED(200);
    34ae:	88 ec       	ldi	r24, 0xC8	; 200
    34b0:	90 e0       	ldi	r25, 0x00	; 0
    34b2:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <MOTOR_RIGHT_SPEED>

	//turn right
	RIGHT_TURN_BY(83);
    34b6:	83 e5       	ldi	r24, 0x53	; 83
    34b8:	90 e0       	ldi	r25, 0x00	; 0
    34ba:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <RIGHT_TURN_BY>
    34be:	fe 01       	movw	r30, r28
    34c0:	e7 57       	subi	r30, 0x77	; 119
    34c2:	ff 4f       	sbci	r31, 0xFF	; 255
    34c4:	80 e0       	ldi	r24, 0x00	; 0
    34c6:	90 e0       	ldi	r25, 0x00	; 0
    34c8:	aa ef       	ldi	r26, 0xFA	; 250
    34ca:	b4 e4       	ldi	r27, 0x44	; 68
    34cc:	80 83       	st	Z, r24
    34ce:	91 83       	std	Z+1, r25	; 0x01
    34d0:	a2 83       	std	Z+2, r26	; 0x02
    34d2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34d4:	8e 01       	movw	r16, r28
    34d6:	0b 57       	subi	r16, 0x7B	; 123
    34d8:	1f 4f       	sbci	r17, 0xFF	; 255
    34da:	fe 01       	movw	r30, r28
    34dc:	e7 57       	subi	r30, 0x77	; 119
    34de:	ff 4f       	sbci	r31, 0xFF	; 255
    34e0:	60 81       	ld	r22, Z
    34e2:	71 81       	ldd	r23, Z+1	; 0x01
    34e4:	82 81       	ldd	r24, Z+2	; 0x02
    34e6:	93 81       	ldd	r25, Z+3	; 0x03
    34e8:	2d ec       	ldi	r18, 0xCD	; 205
    34ea:	3c ec       	ldi	r19, 0xCC	; 204
    34ec:	4c e2       	ldi	r20, 0x2C	; 44
    34ee:	55 e4       	ldi	r21, 0x45	; 69
    34f0:	0e 94 58 26 	call	0x4cb0	; 0x4cb0 <__mulsf3>
    34f4:	dc 01       	movw	r26, r24
    34f6:	cb 01       	movw	r24, r22
    34f8:	f8 01       	movw	r30, r16
    34fa:	80 83       	st	Z, r24
    34fc:	91 83       	std	Z+1, r25	; 0x01
    34fe:	a2 83       	std	Z+2, r26	; 0x02
    3500:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3502:	fe 01       	movw	r30, r28
    3504:	eb 57       	subi	r30, 0x7B	; 123
    3506:	ff 4f       	sbci	r31, 0xFF	; 255
    3508:	60 81       	ld	r22, Z
    350a:	71 81       	ldd	r23, Z+1	; 0x01
    350c:	82 81       	ldd	r24, Z+2	; 0x02
    350e:	93 81       	ldd	r25, Z+3	; 0x03
    3510:	20 e0       	ldi	r18, 0x00	; 0
    3512:	30 e0       	ldi	r19, 0x00	; 0
    3514:	40 e8       	ldi	r20, 0x80	; 128
    3516:	5f e3       	ldi	r21, 0x3F	; 63
    3518:	0e 94 5e 28 	call	0x50bc	; 0x50bc <__ltsf2>
    351c:	88 23       	and	r24, r24
    351e:	44 f4       	brge	.+16     	; 0x3530 <CollectFruit+0xba>
		__ticks = 1;
    3520:	fe 01       	movw	r30, r28
    3522:	ed 57       	subi	r30, 0x7D	; 125
    3524:	ff 4f       	sbci	r31, 0xFF	; 255
    3526:	81 e0       	ldi	r24, 0x01	; 1
    3528:	90 e0       	ldi	r25, 0x00	; 0
    352a:	91 83       	std	Z+1, r25	; 0x01
    352c:	80 83       	st	Z, r24
    352e:	64 c0       	rjmp	.+200    	; 0x35f8 <CollectFruit+0x182>
	else if (__tmp > 65535)
    3530:	fe 01       	movw	r30, r28
    3532:	eb 57       	subi	r30, 0x7B	; 123
    3534:	ff 4f       	sbci	r31, 0xFF	; 255
    3536:	60 81       	ld	r22, Z
    3538:	71 81       	ldd	r23, Z+1	; 0x01
    353a:	82 81       	ldd	r24, Z+2	; 0x02
    353c:	93 81       	ldd	r25, Z+3	; 0x03
    353e:	20 e0       	ldi	r18, 0x00	; 0
    3540:	3f ef       	ldi	r19, 0xFF	; 255
    3542:	4f e7       	ldi	r20, 0x7F	; 127
    3544:	57 e4       	ldi	r21, 0x47	; 71
    3546:	0e 94 fe 27 	call	0x4ffc	; 0x4ffc <__gtsf2>
    354a:	18 16       	cp	r1, r24
    354c:	0c f0       	brlt	.+2      	; 0x3550 <CollectFruit+0xda>
    354e:	43 c0       	rjmp	.+134    	; 0x35d6 <CollectFruit+0x160>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3550:	fe 01       	movw	r30, r28
    3552:	e7 57       	subi	r30, 0x77	; 119
    3554:	ff 4f       	sbci	r31, 0xFF	; 255
    3556:	60 81       	ld	r22, Z
    3558:	71 81       	ldd	r23, Z+1	; 0x01
    355a:	82 81       	ldd	r24, Z+2	; 0x02
    355c:	93 81       	ldd	r25, Z+3	; 0x03
    355e:	20 e0       	ldi	r18, 0x00	; 0
    3560:	30 e0       	ldi	r19, 0x00	; 0
    3562:	40 e2       	ldi	r20, 0x20	; 32
    3564:	51 e4       	ldi	r21, 0x41	; 65
    3566:	0e 94 58 26 	call	0x4cb0	; 0x4cb0 <__mulsf3>
    356a:	dc 01       	movw	r26, r24
    356c:	cb 01       	movw	r24, r22
    356e:	8e 01       	movw	r16, r28
    3570:	0d 57       	subi	r16, 0x7D	; 125
    3572:	1f 4f       	sbci	r17, 0xFF	; 255
    3574:	bc 01       	movw	r22, r24
    3576:	cd 01       	movw	r24, r26
    3578:	0e 94 82 24 	call	0x4904	; 0x4904 <__fixunssfsi>
    357c:	dc 01       	movw	r26, r24
    357e:	cb 01       	movw	r24, r22
    3580:	f8 01       	movw	r30, r16
    3582:	91 83       	std	Z+1, r25	; 0x01
    3584:	80 83       	st	Z, r24
    3586:	1f c0       	rjmp	.+62     	; 0x35c6 <CollectFruit+0x150>
    3588:	fe 01       	movw	r30, r28
    358a:	ef 57       	subi	r30, 0x7F	; 127
    358c:	ff 4f       	sbci	r31, 0xFF	; 255
    358e:	84 e1       	ldi	r24, 0x14	; 20
    3590:	91 e0       	ldi	r25, 0x01	; 1
    3592:	91 83       	std	Z+1, r25	; 0x01
    3594:	80 83       	st	Z, r24
    3596:	fe 01       	movw	r30, r28
    3598:	ef 57       	subi	r30, 0x7F	; 127
    359a:	ff 4f       	sbci	r31, 0xFF	; 255
    359c:	80 81       	ld	r24, Z
    359e:	91 81       	ldd	r25, Z+1	; 0x01
    35a0:	01 97       	sbiw	r24, 0x01	; 1
    35a2:	f1 f7       	brne	.-4      	; 0x35a0 <CollectFruit+0x12a>
    35a4:	fe 01       	movw	r30, r28
    35a6:	ef 57       	subi	r30, 0x7F	; 127
    35a8:	ff 4f       	sbci	r31, 0xFF	; 255
    35aa:	91 83       	std	Z+1, r25	; 0x01
    35ac:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35ae:	de 01       	movw	r26, r28
    35b0:	ad 57       	subi	r26, 0x7D	; 125
    35b2:	bf 4f       	sbci	r27, 0xFF	; 255
    35b4:	fe 01       	movw	r30, r28
    35b6:	ed 57       	subi	r30, 0x7D	; 125
    35b8:	ff 4f       	sbci	r31, 0xFF	; 255
    35ba:	80 81       	ld	r24, Z
    35bc:	91 81       	ldd	r25, Z+1	; 0x01
    35be:	01 97       	sbiw	r24, 0x01	; 1
    35c0:	11 96       	adiw	r26, 0x01	; 1
    35c2:	9c 93       	st	X, r25
    35c4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35c6:	fe 01       	movw	r30, r28
    35c8:	ed 57       	subi	r30, 0x7D	; 125
    35ca:	ff 4f       	sbci	r31, 0xFF	; 255
    35cc:	80 81       	ld	r24, Z
    35ce:	91 81       	ldd	r25, Z+1	; 0x01
    35d0:	00 97       	sbiw	r24, 0x00	; 0
    35d2:	d1 f6       	brne	.-76     	; 0x3588 <CollectFruit+0x112>
    35d4:	27 c0       	rjmp	.+78     	; 0x3624 <CollectFruit+0x1ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35d6:	8e 01       	movw	r16, r28
    35d8:	0d 57       	subi	r16, 0x7D	; 125
    35da:	1f 4f       	sbci	r17, 0xFF	; 255
    35dc:	fe 01       	movw	r30, r28
    35de:	eb 57       	subi	r30, 0x7B	; 123
    35e0:	ff 4f       	sbci	r31, 0xFF	; 255
    35e2:	60 81       	ld	r22, Z
    35e4:	71 81       	ldd	r23, Z+1	; 0x01
    35e6:	82 81       	ldd	r24, Z+2	; 0x02
    35e8:	93 81       	ldd	r25, Z+3	; 0x03
    35ea:	0e 94 82 24 	call	0x4904	; 0x4904 <__fixunssfsi>
    35ee:	dc 01       	movw	r26, r24
    35f0:	cb 01       	movw	r24, r22
    35f2:	f8 01       	movw	r30, r16
    35f4:	91 83       	std	Z+1, r25	; 0x01
    35f6:	80 83       	st	Z, r24
    35f8:	de 01       	movw	r26, r28
    35fa:	a1 58       	subi	r26, 0x81	; 129
    35fc:	bf 4f       	sbci	r27, 0xFF	; 255
    35fe:	fe 01       	movw	r30, r28
    3600:	ed 57       	subi	r30, 0x7D	; 125
    3602:	ff 4f       	sbci	r31, 0xFF	; 255
    3604:	80 81       	ld	r24, Z
    3606:	91 81       	ldd	r25, Z+1	; 0x01
    3608:	8d 93       	st	X+, r24
    360a:	9c 93       	st	X, r25
    360c:	fe 01       	movw	r30, r28
    360e:	e1 58       	subi	r30, 0x81	; 129
    3610:	ff 4f       	sbci	r31, 0xFF	; 255
    3612:	80 81       	ld	r24, Z
    3614:	91 81       	ldd	r25, Z+1	; 0x01
    3616:	01 97       	sbiw	r24, 0x01	; 1
    3618:	f1 f7       	brne	.-4      	; 0x3616 <CollectFruit+0x1a0>
    361a:	fe 01       	movw	r30, r28
    361c:	e1 58       	subi	r30, 0x81	; 129
    361e:	ff 4f       	sbci	r31, 0xFF	; 255
    3620:	91 83       	std	Z+1, r25	; 0x01
    3622:	80 83       	st	Z, r24
	_delay_ms(2000);

	
	
	CameraMiddle();
    3624:	0e 94 93 12 	call	0x2526	; 0x2526 <CameraMiddle>
    3628:	fe 01       	movw	r30, r28
    362a:	e5 58       	subi	r30, 0x85	; 133
    362c:	ff 4f       	sbci	r31, 0xFF	; 255
    362e:	80 e0       	ldi	r24, 0x00	; 0
    3630:	90 e0       	ldi	r25, 0x00	; 0
    3632:	aa ef       	ldi	r26, 0xFA	; 250
    3634:	b4 e4       	ldi	r27, 0x44	; 68
    3636:	80 83       	st	Z, r24
    3638:	91 83       	std	Z+1, r25	; 0x01
    363a:	a2 83       	std	Z+2, r26	; 0x02
    363c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    363e:	8e 01       	movw	r16, r28
    3640:	09 58       	subi	r16, 0x89	; 137
    3642:	1f 4f       	sbci	r17, 0xFF	; 255
    3644:	fe 01       	movw	r30, r28
    3646:	e5 58       	subi	r30, 0x85	; 133
    3648:	ff 4f       	sbci	r31, 0xFF	; 255
    364a:	60 81       	ld	r22, Z
    364c:	71 81       	ldd	r23, Z+1	; 0x01
    364e:	82 81       	ldd	r24, Z+2	; 0x02
    3650:	93 81       	ldd	r25, Z+3	; 0x03
    3652:	2d ec       	ldi	r18, 0xCD	; 205
    3654:	3c ec       	ldi	r19, 0xCC	; 204
    3656:	4c e2       	ldi	r20, 0x2C	; 44
    3658:	55 e4       	ldi	r21, 0x45	; 69
    365a:	0e 94 58 26 	call	0x4cb0	; 0x4cb0 <__mulsf3>
    365e:	dc 01       	movw	r26, r24
    3660:	cb 01       	movw	r24, r22
    3662:	f8 01       	movw	r30, r16
    3664:	80 83       	st	Z, r24
    3666:	91 83       	std	Z+1, r25	; 0x01
    3668:	a2 83       	std	Z+2, r26	; 0x02
    366a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    366c:	fe 01       	movw	r30, r28
    366e:	e9 58       	subi	r30, 0x89	; 137
    3670:	ff 4f       	sbci	r31, 0xFF	; 255
    3672:	60 81       	ld	r22, Z
    3674:	71 81       	ldd	r23, Z+1	; 0x01
    3676:	82 81       	ldd	r24, Z+2	; 0x02
    3678:	93 81       	ldd	r25, Z+3	; 0x03
    367a:	20 e0       	ldi	r18, 0x00	; 0
    367c:	30 e0       	ldi	r19, 0x00	; 0
    367e:	40 e8       	ldi	r20, 0x80	; 128
    3680:	5f e3       	ldi	r21, 0x3F	; 63
    3682:	0e 94 5e 28 	call	0x50bc	; 0x50bc <__ltsf2>
    3686:	88 23       	and	r24, r24
    3688:	44 f4       	brge	.+16     	; 0x369a <CollectFruit+0x224>
		__ticks = 1;
    368a:	fe 01       	movw	r30, r28
    368c:	eb 58       	subi	r30, 0x8B	; 139
    368e:	ff 4f       	sbci	r31, 0xFF	; 255
    3690:	81 e0       	ldi	r24, 0x01	; 1
    3692:	90 e0       	ldi	r25, 0x00	; 0
    3694:	91 83       	std	Z+1, r25	; 0x01
    3696:	80 83       	st	Z, r24
    3698:	64 c0       	rjmp	.+200    	; 0x3762 <CollectFruit+0x2ec>
	else if (__tmp > 65535)
    369a:	fe 01       	movw	r30, r28
    369c:	e9 58       	subi	r30, 0x89	; 137
    369e:	ff 4f       	sbci	r31, 0xFF	; 255
    36a0:	60 81       	ld	r22, Z
    36a2:	71 81       	ldd	r23, Z+1	; 0x01
    36a4:	82 81       	ldd	r24, Z+2	; 0x02
    36a6:	93 81       	ldd	r25, Z+3	; 0x03
    36a8:	20 e0       	ldi	r18, 0x00	; 0
    36aa:	3f ef       	ldi	r19, 0xFF	; 255
    36ac:	4f e7       	ldi	r20, 0x7F	; 127
    36ae:	57 e4       	ldi	r21, 0x47	; 71
    36b0:	0e 94 fe 27 	call	0x4ffc	; 0x4ffc <__gtsf2>
    36b4:	18 16       	cp	r1, r24
    36b6:	0c f0       	brlt	.+2      	; 0x36ba <CollectFruit+0x244>
    36b8:	43 c0       	rjmp	.+134    	; 0x3740 <CollectFruit+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36ba:	fe 01       	movw	r30, r28
    36bc:	e5 58       	subi	r30, 0x85	; 133
    36be:	ff 4f       	sbci	r31, 0xFF	; 255
    36c0:	60 81       	ld	r22, Z
    36c2:	71 81       	ldd	r23, Z+1	; 0x01
    36c4:	82 81       	ldd	r24, Z+2	; 0x02
    36c6:	93 81       	ldd	r25, Z+3	; 0x03
    36c8:	20 e0       	ldi	r18, 0x00	; 0
    36ca:	30 e0       	ldi	r19, 0x00	; 0
    36cc:	40 e2       	ldi	r20, 0x20	; 32
    36ce:	51 e4       	ldi	r21, 0x41	; 65
    36d0:	0e 94 58 26 	call	0x4cb0	; 0x4cb0 <__mulsf3>
    36d4:	dc 01       	movw	r26, r24
    36d6:	cb 01       	movw	r24, r22
    36d8:	8e 01       	movw	r16, r28
    36da:	0b 58       	subi	r16, 0x8B	; 139
    36dc:	1f 4f       	sbci	r17, 0xFF	; 255
    36de:	bc 01       	movw	r22, r24
    36e0:	cd 01       	movw	r24, r26
    36e2:	0e 94 82 24 	call	0x4904	; 0x4904 <__fixunssfsi>
    36e6:	dc 01       	movw	r26, r24
    36e8:	cb 01       	movw	r24, r22
    36ea:	f8 01       	movw	r30, r16
    36ec:	91 83       	std	Z+1, r25	; 0x01
    36ee:	80 83       	st	Z, r24
    36f0:	1f c0       	rjmp	.+62     	; 0x3730 <CollectFruit+0x2ba>
    36f2:	fe 01       	movw	r30, r28
    36f4:	ed 58       	subi	r30, 0x8D	; 141
    36f6:	ff 4f       	sbci	r31, 0xFF	; 255
    36f8:	84 e1       	ldi	r24, 0x14	; 20
    36fa:	91 e0       	ldi	r25, 0x01	; 1
    36fc:	91 83       	std	Z+1, r25	; 0x01
    36fe:	80 83       	st	Z, r24
    3700:	fe 01       	movw	r30, r28
    3702:	ed 58       	subi	r30, 0x8D	; 141
    3704:	ff 4f       	sbci	r31, 0xFF	; 255
    3706:	80 81       	ld	r24, Z
    3708:	91 81       	ldd	r25, Z+1	; 0x01
    370a:	01 97       	sbiw	r24, 0x01	; 1
    370c:	f1 f7       	brne	.-4      	; 0x370a <CollectFruit+0x294>
    370e:	fe 01       	movw	r30, r28
    3710:	ed 58       	subi	r30, 0x8D	; 141
    3712:	ff 4f       	sbci	r31, 0xFF	; 255
    3714:	91 83       	std	Z+1, r25	; 0x01
    3716:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3718:	de 01       	movw	r26, r28
    371a:	ab 58       	subi	r26, 0x8B	; 139
    371c:	bf 4f       	sbci	r27, 0xFF	; 255
    371e:	fe 01       	movw	r30, r28
    3720:	eb 58       	subi	r30, 0x8B	; 139
    3722:	ff 4f       	sbci	r31, 0xFF	; 255
    3724:	80 81       	ld	r24, Z
    3726:	91 81       	ldd	r25, Z+1	; 0x01
    3728:	01 97       	sbiw	r24, 0x01	; 1
    372a:	11 96       	adiw	r26, 0x01	; 1
    372c:	9c 93       	st	X, r25
    372e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3730:	fe 01       	movw	r30, r28
    3732:	eb 58       	subi	r30, 0x8B	; 139
    3734:	ff 4f       	sbci	r31, 0xFF	; 255
    3736:	80 81       	ld	r24, Z
    3738:	91 81       	ldd	r25, Z+1	; 0x01
    373a:	00 97       	sbiw	r24, 0x00	; 0
    373c:	d1 f6       	brne	.-76     	; 0x36f2 <CollectFruit+0x27c>
    373e:	28 c0       	rjmp	.+80     	; 0x3790 <CollectFruit+0x31a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3740:	8e 01       	movw	r16, r28
    3742:	0b 58       	subi	r16, 0x8B	; 139
    3744:	1f 4f       	sbci	r17, 0xFF	; 255
    3746:	fe 01       	movw	r30, r28
    3748:	e9 58       	subi	r30, 0x89	; 137
    374a:	ff 4f       	sbci	r31, 0xFF	; 255
    374c:	60 81       	ld	r22, Z
    374e:	71 81       	ldd	r23, Z+1	; 0x01
    3750:	82 81       	ldd	r24, Z+2	; 0x02
    3752:	93 81       	ldd	r25, Z+3	; 0x03
    3754:	0e 94 82 24 	call	0x4904	; 0x4904 <__fixunssfsi>
    3758:	dc 01       	movw	r26, r24
    375a:	cb 01       	movw	r24, r22
    375c:	f8 01       	movw	r30, r16
    375e:	91 83       	std	Z+1, r25	; 0x01
    3760:	80 83       	st	Z, r24
    3762:	de 01       	movw	r26, r28
    3764:	af 58       	subi	r26, 0x8F	; 143
    3766:	bf 4f       	sbci	r27, 0xFF	; 255
    3768:	fe 01       	movw	r30, r28
    376a:	eb 58       	subi	r30, 0x8B	; 139
    376c:	ff 4f       	sbci	r31, 0xFF	; 255
    376e:	80 81       	ld	r24, Z
    3770:	91 81       	ldd	r25, Z+1	; 0x01
    3772:	11 96       	adiw	r26, 0x01	; 1
    3774:	9c 93       	st	X, r25
    3776:	8e 93       	st	-X, r24
    3778:	fe 01       	movw	r30, r28
    377a:	ef 58       	subi	r30, 0x8F	; 143
    377c:	ff 4f       	sbci	r31, 0xFF	; 255
    377e:	80 81       	ld	r24, Z
    3780:	91 81       	ldd	r25, Z+1	; 0x01
    3782:	01 97       	sbiw	r24, 0x01	; 1
    3784:	f1 f7       	brne	.-4      	; 0x3782 <CollectFruit+0x30c>
    3786:	fe 01       	movw	r30, r28
    3788:	ef 58       	subi	r30, 0x8F	; 143
    378a:	ff 4f       	sbci	r31, 0xFF	; 255
    378c:	91 83       	std	Z+1, r25	; 0x01
    378e:	80 83       	st	Z, r24
	_delay_ms(2000);

	//send IR reading to server
	UDR0 = (0x0f & 1);	
    3790:	e6 ec       	ldi	r30, 0xC6	; 198
    3792:	f0 e0       	ldi	r31, 0x00	; 0
    3794:	81 e0       	ldi	r24, 0x01	; 1
    3796:	80 83       	st	Z, r24


	//wait for height info from server
	while(1)
	{
		if(recievedHeight == 1)
    3798:	80 91 41 03 	lds	r24, 0x0341
    379c:	90 91 42 03 	lds	r25, 0x0342
    37a0:	81 30       	cpi	r24, 0x01	; 1
    37a2:	91 05       	cpc	r25, r1
    37a4:	c9 f7       	brne	.-14     	; 0x3798 <CollectFruit+0x322>
		{
			recievedHeight = 0;
    37a6:	10 92 42 03 	sts	0x0342, r1
    37aa:	10 92 41 03 	sts	0x0341, r1
    37ae:	fe 01       	movw	r30, r28
    37b0:	e3 59       	subi	r30, 0x93	; 147
    37b2:	ff 4f       	sbci	r31, 0xFF	; 255
    37b4:	80 e0       	ldi	r24, 0x00	; 0
    37b6:	90 e0       	ldi	r25, 0x00	; 0
    37b8:	aa ef       	ldi	r26, 0xFA	; 250
    37ba:	b4 e4       	ldi	r27, 0x44	; 68
    37bc:	80 83       	st	Z, r24
    37be:	91 83       	std	Z+1, r25	; 0x01
    37c0:	a2 83       	std	Z+2, r26	; 0x02
    37c2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37c4:	8e 01       	movw	r16, r28
    37c6:	07 59       	subi	r16, 0x97	; 151
    37c8:	1f 4f       	sbci	r17, 0xFF	; 255
    37ca:	fe 01       	movw	r30, r28
    37cc:	e3 59       	subi	r30, 0x93	; 147
    37ce:	ff 4f       	sbci	r31, 0xFF	; 255
    37d0:	60 81       	ld	r22, Z
    37d2:	71 81       	ldd	r23, Z+1	; 0x01
    37d4:	82 81       	ldd	r24, Z+2	; 0x02
    37d6:	93 81       	ldd	r25, Z+3	; 0x03
    37d8:	2d ec       	ldi	r18, 0xCD	; 205
    37da:	3c ec       	ldi	r19, 0xCC	; 204
    37dc:	4c e2       	ldi	r20, 0x2C	; 44
    37de:	55 e4       	ldi	r21, 0x45	; 69
    37e0:	0e 94 58 26 	call	0x4cb0	; 0x4cb0 <__mulsf3>
    37e4:	dc 01       	movw	r26, r24
    37e6:	cb 01       	movw	r24, r22
    37e8:	f8 01       	movw	r30, r16
    37ea:	80 83       	st	Z, r24
    37ec:	91 83       	std	Z+1, r25	; 0x01
    37ee:	a2 83       	std	Z+2, r26	; 0x02
    37f0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    37f2:	fe 01       	movw	r30, r28
    37f4:	e7 59       	subi	r30, 0x97	; 151
    37f6:	ff 4f       	sbci	r31, 0xFF	; 255
    37f8:	60 81       	ld	r22, Z
    37fa:	71 81       	ldd	r23, Z+1	; 0x01
    37fc:	82 81       	ldd	r24, Z+2	; 0x02
    37fe:	93 81       	ldd	r25, Z+3	; 0x03
    3800:	20 e0       	ldi	r18, 0x00	; 0
    3802:	30 e0       	ldi	r19, 0x00	; 0
    3804:	40 e8       	ldi	r20, 0x80	; 128
    3806:	5f e3       	ldi	r21, 0x3F	; 63
    3808:	0e 94 5e 28 	call	0x50bc	; 0x50bc <__ltsf2>
    380c:	88 23       	and	r24, r24
    380e:	44 f4       	brge	.+16     	; 0x3820 <CollectFruit+0x3aa>
		__ticks = 1;
    3810:	fe 01       	movw	r30, r28
    3812:	e9 59       	subi	r30, 0x99	; 153
    3814:	ff 4f       	sbci	r31, 0xFF	; 255
    3816:	81 e0       	ldi	r24, 0x01	; 1
    3818:	90 e0       	ldi	r25, 0x00	; 0
    381a:	91 83       	std	Z+1, r25	; 0x01
    381c:	80 83       	st	Z, r24
    381e:	64 c0       	rjmp	.+200    	; 0x38e8 <CollectFruit+0x472>
	else if (__tmp > 65535)
    3820:	fe 01       	movw	r30, r28
    3822:	e7 59       	subi	r30, 0x97	; 151
    3824:	ff 4f       	sbci	r31, 0xFF	; 255
    3826:	60 81       	ld	r22, Z
    3828:	71 81       	ldd	r23, Z+1	; 0x01
    382a:	82 81       	ldd	r24, Z+2	; 0x02
    382c:	93 81       	ldd	r25, Z+3	; 0x03
    382e:	20 e0       	ldi	r18, 0x00	; 0
    3830:	3f ef       	ldi	r19, 0xFF	; 255
    3832:	4f e7       	ldi	r20, 0x7F	; 127
    3834:	57 e4       	ldi	r21, 0x47	; 71
    3836:	0e 94 fe 27 	call	0x4ffc	; 0x4ffc <__gtsf2>
    383a:	18 16       	cp	r1, r24
    383c:	0c f0       	brlt	.+2      	; 0x3840 <CollectFruit+0x3ca>
    383e:	43 c0       	rjmp	.+134    	; 0x38c6 <CollectFruit+0x450>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3840:	fe 01       	movw	r30, r28
    3842:	e3 59       	subi	r30, 0x93	; 147
    3844:	ff 4f       	sbci	r31, 0xFF	; 255
    3846:	60 81       	ld	r22, Z
    3848:	71 81       	ldd	r23, Z+1	; 0x01
    384a:	82 81       	ldd	r24, Z+2	; 0x02
    384c:	93 81       	ldd	r25, Z+3	; 0x03
    384e:	20 e0       	ldi	r18, 0x00	; 0
    3850:	30 e0       	ldi	r19, 0x00	; 0
    3852:	40 e2       	ldi	r20, 0x20	; 32
    3854:	51 e4       	ldi	r21, 0x41	; 65
    3856:	0e 94 58 26 	call	0x4cb0	; 0x4cb0 <__mulsf3>
    385a:	dc 01       	movw	r26, r24
    385c:	cb 01       	movw	r24, r22
    385e:	8e 01       	movw	r16, r28
    3860:	09 59       	subi	r16, 0x99	; 153
    3862:	1f 4f       	sbci	r17, 0xFF	; 255
    3864:	bc 01       	movw	r22, r24
    3866:	cd 01       	movw	r24, r26
    3868:	0e 94 82 24 	call	0x4904	; 0x4904 <__fixunssfsi>
    386c:	dc 01       	movw	r26, r24
    386e:	cb 01       	movw	r24, r22
    3870:	f8 01       	movw	r30, r16
    3872:	91 83       	std	Z+1, r25	; 0x01
    3874:	80 83       	st	Z, r24
    3876:	1f c0       	rjmp	.+62     	; 0x38b6 <CollectFruit+0x440>
    3878:	fe 01       	movw	r30, r28
    387a:	eb 59       	subi	r30, 0x9B	; 155
    387c:	ff 4f       	sbci	r31, 0xFF	; 255
    387e:	84 e1       	ldi	r24, 0x14	; 20
    3880:	91 e0       	ldi	r25, 0x01	; 1
    3882:	91 83       	std	Z+1, r25	; 0x01
    3884:	80 83       	st	Z, r24
    3886:	fe 01       	movw	r30, r28
    3888:	eb 59       	subi	r30, 0x9B	; 155
    388a:	ff 4f       	sbci	r31, 0xFF	; 255
    388c:	80 81       	ld	r24, Z
    388e:	91 81       	ldd	r25, Z+1	; 0x01
    3890:	01 97       	sbiw	r24, 0x01	; 1
    3892:	f1 f7       	brne	.-4      	; 0x3890 <CollectFruit+0x41a>
    3894:	fe 01       	movw	r30, r28
    3896:	eb 59       	subi	r30, 0x9B	; 155
    3898:	ff 4f       	sbci	r31, 0xFF	; 255
    389a:	91 83       	std	Z+1, r25	; 0x01
    389c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    389e:	de 01       	movw	r26, r28
    38a0:	a9 59       	subi	r26, 0x99	; 153
    38a2:	bf 4f       	sbci	r27, 0xFF	; 255
    38a4:	fe 01       	movw	r30, r28
    38a6:	e9 59       	subi	r30, 0x99	; 153
    38a8:	ff 4f       	sbci	r31, 0xFF	; 255
    38aa:	80 81       	ld	r24, Z
    38ac:	91 81       	ldd	r25, Z+1	; 0x01
    38ae:	01 97       	sbiw	r24, 0x01	; 1
    38b0:	11 96       	adiw	r26, 0x01	; 1
    38b2:	9c 93       	st	X, r25
    38b4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38b6:	fe 01       	movw	r30, r28
    38b8:	e9 59       	subi	r30, 0x99	; 153
    38ba:	ff 4f       	sbci	r31, 0xFF	; 255
    38bc:	80 81       	ld	r24, Z
    38be:	91 81       	ldd	r25, Z+1	; 0x01
    38c0:	00 97       	sbiw	r24, 0x00	; 0
    38c2:	d1 f6       	brne	.-76     	; 0x3878 <CollectFruit+0x402>
    38c4:	27 c0       	rjmp	.+78     	; 0x3914 <CollectFruit+0x49e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38c6:	8e 01       	movw	r16, r28
    38c8:	09 59       	subi	r16, 0x99	; 153
    38ca:	1f 4f       	sbci	r17, 0xFF	; 255
    38cc:	fe 01       	movw	r30, r28
    38ce:	e7 59       	subi	r30, 0x97	; 151
    38d0:	ff 4f       	sbci	r31, 0xFF	; 255
    38d2:	60 81       	ld	r22, Z
    38d4:	71 81       	ldd	r23, Z+1	; 0x01
    38d6:	82 81       	ldd	r24, Z+2	; 0x02
    38d8:	93 81       	ldd	r25, Z+3	; 0x03
    38da:	0e 94 82 24 	call	0x4904	; 0x4904 <__fixunssfsi>
    38de:	dc 01       	movw	r26, r24
    38e0:	cb 01       	movw	r24, r22
    38e2:	f8 01       	movw	r30, r16
    38e4:	91 83       	std	Z+1, r25	; 0x01
    38e6:	80 83       	st	Z, r24
    38e8:	de 01       	movw	r26, r28
    38ea:	ad 59       	subi	r26, 0x9D	; 157
    38ec:	bf 4f       	sbci	r27, 0xFF	; 255
    38ee:	fe 01       	movw	r30, r28
    38f0:	e9 59       	subi	r30, 0x99	; 153
    38f2:	ff 4f       	sbci	r31, 0xFF	; 255
    38f4:	80 81       	ld	r24, Z
    38f6:	91 81       	ldd	r25, Z+1	; 0x01
    38f8:	8d 93       	st	X+, r24
    38fa:	9c 93       	st	X, r25
    38fc:	fe 01       	movw	r30, r28
    38fe:	ed 59       	subi	r30, 0x9D	; 157
    3900:	ff 4f       	sbci	r31, 0xFF	; 255
    3902:	80 81       	ld	r24, Z
    3904:	91 81       	ldd	r25, Z+1	; 0x01
    3906:	01 97       	sbiw	r24, 0x01	; 1
    3908:	f1 f7       	brne	.-4      	; 0x3906 <CollectFruit+0x490>
    390a:	fe 01       	movw	r30, r28
    390c:	ed 59       	subi	r30, 0x9D	; 157
    390e:	ff 4f       	sbci	r31, 0xFF	; 255
    3910:	91 83       	std	Z+1, r25	; 0x01
    3912:	80 83       	st	Z, r24
		}
	}

	//
	_delay_ms(2000);
	Release();
    3914:	0e 94 6f 16 	call	0x2cde	; 0x2cde <Release>
    3918:	fe 01       	movw	r30, r28
    391a:	e1 5a       	subi	r30, 0xA1	; 161
    391c:	ff 4f       	sbci	r31, 0xFF	; 255
    391e:	80 e0       	ldi	r24, 0x00	; 0
    3920:	90 e0       	ldi	r25, 0x00	; 0
    3922:	aa ef       	ldi	r26, 0xFA	; 250
    3924:	b4 e4       	ldi	r27, 0x44	; 68
    3926:	80 83       	st	Z, r24
    3928:	91 83       	std	Z+1, r25	; 0x01
    392a:	a2 83       	std	Z+2, r26	; 0x02
    392c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    392e:	8e 01       	movw	r16, r28
    3930:	05 5a       	subi	r16, 0xA5	; 165
    3932:	1f 4f       	sbci	r17, 0xFF	; 255
    3934:	fe 01       	movw	r30, r28
    3936:	e1 5a       	subi	r30, 0xA1	; 161
    3938:	ff 4f       	sbci	r31, 0xFF	; 255
    393a:	60 81       	ld	r22, Z
    393c:	71 81       	ldd	r23, Z+1	; 0x01
    393e:	82 81       	ldd	r24, Z+2	; 0x02
    3940:	93 81       	ldd	r25, Z+3	; 0x03
    3942:	2d ec       	ldi	r18, 0xCD	; 205
    3944:	3c ec       	ldi	r19, 0xCC	; 204
    3946:	4c e2       	ldi	r20, 0x2C	; 44
    3948:	55 e4       	ldi	r21, 0x45	; 69
    394a:	0e 94 58 26 	call	0x4cb0	; 0x4cb0 <__mulsf3>
    394e:	dc 01       	movw	r26, r24
    3950:	cb 01       	movw	r24, r22
    3952:	f8 01       	movw	r30, r16
    3954:	80 83       	st	Z, r24
    3956:	91 83       	std	Z+1, r25	; 0x01
    3958:	a2 83       	std	Z+2, r26	; 0x02
    395a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    395c:	fe 01       	movw	r30, r28
    395e:	e5 5a       	subi	r30, 0xA5	; 165
    3960:	ff 4f       	sbci	r31, 0xFF	; 255
    3962:	60 81       	ld	r22, Z
    3964:	71 81       	ldd	r23, Z+1	; 0x01
    3966:	82 81       	ldd	r24, Z+2	; 0x02
    3968:	93 81       	ldd	r25, Z+3	; 0x03
    396a:	20 e0       	ldi	r18, 0x00	; 0
    396c:	30 e0       	ldi	r19, 0x00	; 0
    396e:	40 e8       	ldi	r20, 0x80	; 128
    3970:	5f e3       	ldi	r21, 0x3F	; 63
    3972:	0e 94 5e 28 	call	0x50bc	; 0x50bc <__ltsf2>
    3976:	88 23       	and	r24, r24
    3978:	44 f4       	brge	.+16     	; 0x398a <CollectFruit+0x514>
		__ticks = 1;
    397a:	fe 01       	movw	r30, r28
    397c:	e7 5a       	subi	r30, 0xA7	; 167
    397e:	ff 4f       	sbci	r31, 0xFF	; 255
    3980:	81 e0       	ldi	r24, 0x01	; 1
    3982:	90 e0       	ldi	r25, 0x00	; 0
    3984:	91 83       	std	Z+1, r25	; 0x01
    3986:	80 83       	st	Z, r24
    3988:	64 c0       	rjmp	.+200    	; 0x3a52 <CollectFruit+0x5dc>
	else if (__tmp > 65535)
    398a:	fe 01       	movw	r30, r28
    398c:	e5 5a       	subi	r30, 0xA5	; 165
    398e:	ff 4f       	sbci	r31, 0xFF	; 255
    3990:	60 81       	ld	r22, Z
    3992:	71 81       	ldd	r23, Z+1	; 0x01
    3994:	82 81       	ldd	r24, Z+2	; 0x02
    3996:	93 81       	ldd	r25, Z+3	; 0x03
    3998:	20 e0       	ldi	r18, 0x00	; 0
    399a:	3f ef       	ldi	r19, 0xFF	; 255
    399c:	4f e7       	ldi	r20, 0x7F	; 127
    399e:	57 e4       	ldi	r21, 0x47	; 71
    39a0:	0e 94 fe 27 	call	0x4ffc	; 0x4ffc <__gtsf2>
    39a4:	18 16       	cp	r1, r24
    39a6:	0c f0       	brlt	.+2      	; 0x39aa <CollectFruit+0x534>
    39a8:	43 c0       	rjmp	.+134    	; 0x3a30 <CollectFruit+0x5ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39aa:	fe 01       	movw	r30, r28
    39ac:	e1 5a       	subi	r30, 0xA1	; 161
    39ae:	ff 4f       	sbci	r31, 0xFF	; 255
    39b0:	60 81       	ld	r22, Z
    39b2:	71 81       	ldd	r23, Z+1	; 0x01
    39b4:	82 81       	ldd	r24, Z+2	; 0x02
    39b6:	93 81       	ldd	r25, Z+3	; 0x03
    39b8:	20 e0       	ldi	r18, 0x00	; 0
    39ba:	30 e0       	ldi	r19, 0x00	; 0
    39bc:	40 e2       	ldi	r20, 0x20	; 32
    39be:	51 e4       	ldi	r21, 0x41	; 65
    39c0:	0e 94 58 26 	call	0x4cb0	; 0x4cb0 <__mulsf3>
    39c4:	dc 01       	movw	r26, r24
    39c6:	cb 01       	movw	r24, r22
    39c8:	8e 01       	movw	r16, r28
    39ca:	07 5a       	subi	r16, 0xA7	; 167
    39cc:	1f 4f       	sbci	r17, 0xFF	; 255
    39ce:	bc 01       	movw	r22, r24
    39d0:	cd 01       	movw	r24, r26
    39d2:	0e 94 82 24 	call	0x4904	; 0x4904 <__fixunssfsi>
    39d6:	dc 01       	movw	r26, r24
    39d8:	cb 01       	movw	r24, r22
    39da:	f8 01       	movw	r30, r16
    39dc:	91 83       	std	Z+1, r25	; 0x01
    39de:	80 83       	st	Z, r24
    39e0:	1f c0       	rjmp	.+62     	; 0x3a20 <CollectFruit+0x5aa>
    39e2:	fe 01       	movw	r30, r28
    39e4:	e9 5a       	subi	r30, 0xA9	; 169
    39e6:	ff 4f       	sbci	r31, 0xFF	; 255
    39e8:	84 e1       	ldi	r24, 0x14	; 20
    39ea:	91 e0       	ldi	r25, 0x01	; 1
    39ec:	91 83       	std	Z+1, r25	; 0x01
    39ee:	80 83       	st	Z, r24
    39f0:	fe 01       	movw	r30, r28
    39f2:	e9 5a       	subi	r30, 0xA9	; 169
    39f4:	ff 4f       	sbci	r31, 0xFF	; 255
    39f6:	80 81       	ld	r24, Z
    39f8:	91 81       	ldd	r25, Z+1	; 0x01
    39fa:	01 97       	sbiw	r24, 0x01	; 1
    39fc:	f1 f7       	brne	.-4      	; 0x39fa <CollectFruit+0x584>
    39fe:	fe 01       	movw	r30, r28
    3a00:	e9 5a       	subi	r30, 0xA9	; 169
    3a02:	ff 4f       	sbci	r31, 0xFF	; 255
    3a04:	91 83       	std	Z+1, r25	; 0x01
    3a06:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a08:	de 01       	movw	r26, r28
    3a0a:	a7 5a       	subi	r26, 0xA7	; 167
    3a0c:	bf 4f       	sbci	r27, 0xFF	; 255
    3a0e:	fe 01       	movw	r30, r28
    3a10:	e7 5a       	subi	r30, 0xA7	; 167
    3a12:	ff 4f       	sbci	r31, 0xFF	; 255
    3a14:	80 81       	ld	r24, Z
    3a16:	91 81       	ldd	r25, Z+1	; 0x01
    3a18:	01 97       	sbiw	r24, 0x01	; 1
    3a1a:	11 96       	adiw	r26, 0x01	; 1
    3a1c:	9c 93       	st	X, r25
    3a1e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a20:	fe 01       	movw	r30, r28
    3a22:	e7 5a       	subi	r30, 0xA7	; 167
    3a24:	ff 4f       	sbci	r31, 0xFF	; 255
    3a26:	80 81       	ld	r24, Z
    3a28:	91 81       	ldd	r25, Z+1	; 0x01
    3a2a:	00 97       	sbiw	r24, 0x00	; 0
    3a2c:	d1 f6       	brne	.-76     	; 0x39e2 <CollectFruit+0x56c>
    3a2e:	27 c0       	rjmp	.+78     	; 0x3a7e <CollectFruit+0x608>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a30:	8e 01       	movw	r16, r28
    3a32:	07 5a       	subi	r16, 0xA7	; 167
    3a34:	1f 4f       	sbci	r17, 0xFF	; 255
    3a36:	fe 01       	movw	r30, r28
    3a38:	e5 5a       	subi	r30, 0xA5	; 165
    3a3a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a3c:	60 81       	ld	r22, Z
    3a3e:	71 81       	ldd	r23, Z+1	; 0x01
    3a40:	82 81       	ldd	r24, Z+2	; 0x02
    3a42:	93 81       	ldd	r25, Z+3	; 0x03
    3a44:	0e 94 82 24 	call	0x4904	; 0x4904 <__fixunssfsi>
    3a48:	dc 01       	movw	r26, r24
    3a4a:	cb 01       	movw	r24, r22
    3a4c:	f8 01       	movw	r30, r16
    3a4e:	91 83       	std	Z+1, r25	; 0x01
    3a50:	80 83       	st	Z, r24
    3a52:	de 01       	movw	r26, r28
    3a54:	ab 5a       	subi	r26, 0xAB	; 171
    3a56:	bf 4f       	sbci	r27, 0xFF	; 255
    3a58:	fe 01       	movw	r30, r28
    3a5a:	e7 5a       	subi	r30, 0xA7	; 167
    3a5c:	ff 4f       	sbci	r31, 0xFF	; 255
    3a5e:	80 81       	ld	r24, Z
    3a60:	91 81       	ldd	r25, Z+1	; 0x01
    3a62:	8d 93       	st	X+, r24
    3a64:	9c 93       	st	X, r25
    3a66:	fe 01       	movw	r30, r28
    3a68:	eb 5a       	subi	r30, 0xAB	; 171
    3a6a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a6c:	80 81       	ld	r24, Z
    3a6e:	91 81       	ldd	r25, Z+1	; 0x01
    3a70:	01 97       	sbiw	r24, 0x01	; 1
    3a72:	f1 f7       	brne	.-4      	; 0x3a70 <CollectFruit+0x5fa>
    3a74:	fe 01       	movw	r30, r28
    3a76:	eb 5a       	subi	r30, 0xAB	; 171
    3a78:	ff 4f       	sbci	r31, 0xFF	; 255
    3a7a:	91 83       	std	Z+1, r25	; 0x01
    3a7c:	80 83       	st	Z, r24

		
	_delay_ms(2000);
	Lift(armHeight);
    3a7e:	80 91 43 03 	lds	r24, 0x0343
    3a82:	90 91 44 03 	lds	r25, 0x0344
    3a86:	cc 01       	movw	r24, r24
    3a88:	a0 e0       	ldi	r26, 0x00	; 0
    3a8a:	b0 e0       	ldi	r27, 0x00	; 0
    3a8c:	bc 01       	movw	r22, r24
    3a8e:	cd 01       	movw	r24, r26
    3a90:	0e 94 40 29 	call	0x5280	; 0x5280 <__floatunsisf>
    3a94:	dc 01       	movw	r26, r24
    3a96:	cb 01       	movw	r24, r22
    3a98:	bc 01       	movw	r22, r24
    3a9a:	cd 01       	movw	r24, r26
    3a9c:	0e 94 34 14 	call	0x2868	; 0x2868 <Lift>
	
	objDist = frontDist();
    3aa0:	0e 94 cc 19 	call	0x3398	; 0x3398 <frontDist>
    3aa4:	fe 01       	movw	r30, r28
    3aa6:	e1 57       	subi	r30, 0x71	; 113
    3aa8:	ff 4f       	sbci	r31, 0xFF	; 255
    3aaa:	91 83       	std	Z+1, r25	; 0x01
    3aac:	80 83       	st	Z, r24

//	forwardMoved = moveToObj();

	

	forward_mm(objDist);
    3aae:	fe 01       	movw	r30, r28
    3ab0:	e1 57       	subi	r30, 0x71	; 113
    3ab2:	ff 4f       	sbci	r31, 0xFF	; 255
    3ab4:	80 81       	ld	r24, Z
    3ab6:	91 81       	ldd	r25, Z+1	; 0x01
    3ab8:	0e 94 34 03 	call	0x668	; 0x668 <forward_mm>

	LCD_DISPLAY_INT_2(forwardMoved);
    3abc:	fe 01       	movw	r30, r28
    3abe:	ef 56       	subi	r30, 0x6F	; 111
    3ac0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ac2:	80 81       	ld	r24, Z
    3ac4:	91 81       	ldd	r25, Z+1	; 0x01
    3ac6:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <LCD_DISPLAY_INT_2>
	LCD_DISPLAY_INT_2(forwardMoved);
    3aca:	fe 01       	movw	r30, r28
    3acc:	ef 56       	subi	r30, 0x6F	; 111
    3ace:	ff 4f       	sbci	r31, 0xFF	; 255
    3ad0:	80 81       	ld	r24, Z
    3ad2:	91 81       	ldd	r25, Z+1	; 0x01
    3ad4:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <LCD_DISPLAY_INT_2>
    3ad8:	fe 01       	movw	r30, r28
    3ada:	ef 5a       	subi	r30, 0xAF	; 175
    3adc:	ff 4f       	sbci	r31, 0xFF	; 255
    3ade:	80 e0       	ldi	r24, 0x00	; 0
    3ae0:	90 e0       	ldi	r25, 0x00	; 0
    3ae2:	aa ef       	ldi	r26, 0xFA	; 250
    3ae4:	b4 e4       	ldi	r27, 0x44	; 68
    3ae6:	80 83       	st	Z, r24
    3ae8:	91 83       	std	Z+1, r25	; 0x01
    3aea:	a2 83       	std	Z+2, r26	; 0x02
    3aec:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3aee:	8e 01       	movw	r16, r28
    3af0:	03 5b       	subi	r16, 0xB3	; 179
    3af2:	1f 4f       	sbci	r17, 0xFF	; 255
    3af4:	fe 01       	movw	r30, r28
    3af6:	ef 5a       	subi	r30, 0xAF	; 175
    3af8:	ff 4f       	sbci	r31, 0xFF	; 255
    3afa:	60 81       	ld	r22, Z
    3afc:	71 81       	ldd	r23, Z+1	; 0x01
    3afe:	82 81       	ldd	r24, Z+2	; 0x02
    3b00:	93 81       	ldd	r25, Z+3	; 0x03
    3b02:	2d ec       	ldi	r18, 0xCD	; 205
    3b04:	3c ec       	ldi	r19, 0xCC	; 204
    3b06:	4c e2       	ldi	r20, 0x2C	; 44
    3b08:	55 e4       	ldi	r21, 0x45	; 69
    3b0a:	0e 94 58 26 	call	0x4cb0	; 0x4cb0 <__mulsf3>
    3b0e:	dc 01       	movw	r26, r24
    3b10:	cb 01       	movw	r24, r22
    3b12:	f8 01       	movw	r30, r16
    3b14:	80 83       	st	Z, r24
    3b16:	91 83       	std	Z+1, r25	; 0x01
    3b18:	a2 83       	std	Z+2, r26	; 0x02
    3b1a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3b1c:	fe 01       	movw	r30, r28
    3b1e:	e3 5b       	subi	r30, 0xB3	; 179
    3b20:	ff 4f       	sbci	r31, 0xFF	; 255
    3b22:	60 81       	ld	r22, Z
    3b24:	71 81       	ldd	r23, Z+1	; 0x01
    3b26:	82 81       	ldd	r24, Z+2	; 0x02
    3b28:	93 81       	ldd	r25, Z+3	; 0x03
    3b2a:	20 e0       	ldi	r18, 0x00	; 0
    3b2c:	30 e0       	ldi	r19, 0x00	; 0
    3b2e:	40 e8       	ldi	r20, 0x80	; 128
    3b30:	5f e3       	ldi	r21, 0x3F	; 63
    3b32:	0e 94 5e 28 	call	0x50bc	; 0x50bc <__ltsf2>
    3b36:	88 23       	and	r24, r24
    3b38:	44 f4       	brge	.+16     	; 0x3b4a <CollectFruit+0x6d4>
		__ticks = 1;
    3b3a:	fe 01       	movw	r30, r28
    3b3c:	e5 5b       	subi	r30, 0xB5	; 181
    3b3e:	ff 4f       	sbci	r31, 0xFF	; 255
    3b40:	81 e0       	ldi	r24, 0x01	; 1
    3b42:	90 e0       	ldi	r25, 0x00	; 0
    3b44:	91 83       	std	Z+1, r25	; 0x01
    3b46:	80 83       	st	Z, r24
    3b48:	64 c0       	rjmp	.+200    	; 0x3c12 <CollectFruit+0x79c>
	else if (__tmp > 65535)
    3b4a:	fe 01       	movw	r30, r28
    3b4c:	e3 5b       	subi	r30, 0xB3	; 179
    3b4e:	ff 4f       	sbci	r31, 0xFF	; 255
    3b50:	60 81       	ld	r22, Z
    3b52:	71 81       	ldd	r23, Z+1	; 0x01
    3b54:	82 81       	ldd	r24, Z+2	; 0x02
    3b56:	93 81       	ldd	r25, Z+3	; 0x03
    3b58:	20 e0       	ldi	r18, 0x00	; 0
    3b5a:	3f ef       	ldi	r19, 0xFF	; 255
    3b5c:	4f e7       	ldi	r20, 0x7F	; 127
    3b5e:	57 e4       	ldi	r21, 0x47	; 71
    3b60:	0e 94 fe 27 	call	0x4ffc	; 0x4ffc <__gtsf2>
    3b64:	18 16       	cp	r1, r24
    3b66:	0c f0       	brlt	.+2      	; 0x3b6a <CollectFruit+0x6f4>
    3b68:	43 c0       	rjmp	.+134    	; 0x3bf0 <CollectFruit+0x77a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b6a:	fe 01       	movw	r30, r28
    3b6c:	ef 5a       	subi	r30, 0xAF	; 175
    3b6e:	ff 4f       	sbci	r31, 0xFF	; 255
    3b70:	60 81       	ld	r22, Z
    3b72:	71 81       	ldd	r23, Z+1	; 0x01
    3b74:	82 81       	ldd	r24, Z+2	; 0x02
    3b76:	93 81       	ldd	r25, Z+3	; 0x03
    3b78:	20 e0       	ldi	r18, 0x00	; 0
    3b7a:	30 e0       	ldi	r19, 0x00	; 0
    3b7c:	40 e2       	ldi	r20, 0x20	; 32
    3b7e:	51 e4       	ldi	r21, 0x41	; 65
    3b80:	0e 94 58 26 	call	0x4cb0	; 0x4cb0 <__mulsf3>
    3b84:	dc 01       	movw	r26, r24
    3b86:	cb 01       	movw	r24, r22
    3b88:	8e 01       	movw	r16, r28
    3b8a:	05 5b       	subi	r16, 0xB5	; 181
    3b8c:	1f 4f       	sbci	r17, 0xFF	; 255
    3b8e:	bc 01       	movw	r22, r24
    3b90:	cd 01       	movw	r24, r26
    3b92:	0e 94 82 24 	call	0x4904	; 0x4904 <__fixunssfsi>
    3b96:	dc 01       	movw	r26, r24
    3b98:	cb 01       	movw	r24, r22
    3b9a:	f8 01       	movw	r30, r16
    3b9c:	91 83       	std	Z+1, r25	; 0x01
    3b9e:	80 83       	st	Z, r24
    3ba0:	1f c0       	rjmp	.+62     	; 0x3be0 <CollectFruit+0x76a>
    3ba2:	fe 01       	movw	r30, r28
    3ba4:	e7 5b       	subi	r30, 0xB7	; 183
    3ba6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ba8:	84 e1       	ldi	r24, 0x14	; 20
    3baa:	91 e0       	ldi	r25, 0x01	; 1
    3bac:	91 83       	std	Z+1, r25	; 0x01
    3bae:	80 83       	st	Z, r24
    3bb0:	fe 01       	movw	r30, r28
    3bb2:	e7 5b       	subi	r30, 0xB7	; 183
    3bb4:	ff 4f       	sbci	r31, 0xFF	; 255
    3bb6:	80 81       	ld	r24, Z
    3bb8:	91 81       	ldd	r25, Z+1	; 0x01
    3bba:	01 97       	sbiw	r24, 0x01	; 1
    3bbc:	f1 f7       	brne	.-4      	; 0x3bba <CollectFruit+0x744>
    3bbe:	fe 01       	movw	r30, r28
    3bc0:	e7 5b       	subi	r30, 0xB7	; 183
    3bc2:	ff 4f       	sbci	r31, 0xFF	; 255
    3bc4:	91 83       	std	Z+1, r25	; 0x01
    3bc6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3bc8:	de 01       	movw	r26, r28
    3bca:	a5 5b       	subi	r26, 0xB5	; 181
    3bcc:	bf 4f       	sbci	r27, 0xFF	; 255
    3bce:	fe 01       	movw	r30, r28
    3bd0:	e5 5b       	subi	r30, 0xB5	; 181
    3bd2:	ff 4f       	sbci	r31, 0xFF	; 255
    3bd4:	80 81       	ld	r24, Z
    3bd6:	91 81       	ldd	r25, Z+1	; 0x01
    3bd8:	01 97       	sbiw	r24, 0x01	; 1
    3bda:	11 96       	adiw	r26, 0x01	; 1
    3bdc:	9c 93       	st	X, r25
    3bde:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3be0:	fe 01       	movw	r30, r28
    3be2:	e5 5b       	subi	r30, 0xB5	; 181
    3be4:	ff 4f       	sbci	r31, 0xFF	; 255
    3be6:	80 81       	ld	r24, Z
    3be8:	91 81       	ldd	r25, Z+1	; 0x01
    3bea:	00 97       	sbiw	r24, 0x00	; 0
    3bec:	d1 f6       	brne	.-76     	; 0x3ba2 <CollectFruit+0x72c>
    3bee:	27 c0       	rjmp	.+78     	; 0x3c3e <CollectFruit+0x7c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3bf0:	8e 01       	movw	r16, r28
    3bf2:	05 5b       	subi	r16, 0xB5	; 181
    3bf4:	1f 4f       	sbci	r17, 0xFF	; 255
    3bf6:	fe 01       	movw	r30, r28
    3bf8:	e3 5b       	subi	r30, 0xB3	; 179
    3bfa:	ff 4f       	sbci	r31, 0xFF	; 255
    3bfc:	60 81       	ld	r22, Z
    3bfe:	71 81       	ldd	r23, Z+1	; 0x01
    3c00:	82 81       	ldd	r24, Z+2	; 0x02
    3c02:	93 81       	ldd	r25, Z+3	; 0x03
    3c04:	0e 94 82 24 	call	0x4904	; 0x4904 <__fixunssfsi>
    3c08:	dc 01       	movw	r26, r24
    3c0a:	cb 01       	movw	r24, r22
    3c0c:	f8 01       	movw	r30, r16
    3c0e:	91 83       	std	Z+1, r25	; 0x01
    3c10:	80 83       	st	Z, r24
    3c12:	de 01       	movw	r26, r28
    3c14:	a9 5b       	subi	r26, 0xB9	; 185
    3c16:	bf 4f       	sbci	r27, 0xFF	; 255
    3c18:	fe 01       	movw	r30, r28
    3c1a:	e5 5b       	subi	r30, 0xB5	; 181
    3c1c:	ff 4f       	sbci	r31, 0xFF	; 255
    3c1e:	80 81       	ld	r24, Z
    3c20:	91 81       	ldd	r25, Z+1	; 0x01
    3c22:	8d 93       	st	X+, r24
    3c24:	9c 93       	st	X, r25
    3c26:	fe 01       	movw	r30, r28
    3c28:	e9 5b       	subi	r30, 0xB9	; 185
    3c2a:	ff 4f       	sbci	r31, 0xFF	; 255
    3c2c:	80 81       	ld	r24, Z
    3c2e:	91 81       	ldd	r25, Z+1	; 0x01
    3c30:	01 97       	sbiw	r24, 0x01	; 1
    3c32:	f1 f7       	brne	.-4      	; 0x3c30 <CollectFruit+0x7ba>
    3c34:	fe 01       	movw	r30, r28
    3c36:	e9 5b       	subi	r30, 0xB9	; 185
    3c38:	ff 4f       	sbci	r31, 0xFF	; 255
    3c3a:	91 83       	std	Z+1, r25	; 0x01
    3c3c:	80 83       	st	Z, r24
	_delay_ms(2000);
	Grab();
    3c3e:	0e 94 cf 15 	call	0x2b9e	; 0x2b9e <Grab>
    3c42:	fe 01       	movw	r30, r28
    3c44:	ed 5b       	subi	r30, 0xBD	; 189
    3c46:	ff 4f       	sbci	r31, 0xFF	; 255
    3c48:	80 e0       	ldi	r24, 0x00	; 0
    3c4a:	90 e0       	ldi	r25, 0x00	; 0
    3c4c:	aa ef       	ldi	r26, 0xFA	; 250
    3c4e:	b4 e4       	ldi	r27, 0x44	; 68
    3c50:	80 83       	st	Z, r24
    3c52:	91 83       	std	Z+1, r25	; 0x01
    3c54:	a2 83       	std	Z+2, r26	; 0x02
    3c56:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c58:	8e 01       	movw	r16, r28
    3c5a:	01 5c       	subi	r16, 0xC1	; 193
    3c5c:	1f 4f       	sbci	r17, 0xFF	; 255
    3c5e:	fe 01       	movw	r30, r28
    3c60:	ed 5b       	subi	r30, 0xBD	; 189
    3c62:	ff 4f       	sbci	r31, 0xFF	; 255
    3c64:	60 81       	ld	r22, Z
    3c66:	71 81       	ldd	r23, Z+1	; 0x01
    3c68:	82 81       	ldd	r24, Z+2	; 0x02
    3c6a:	93 81       	ldd	r25, Z+3	; 0x03
    3c6c:	2d ec       	ldi	r18, 0xCD	; 205
    3c6e:	3c ec       	ldi	r19, 0xCC	; 204
    3c70:	4c e2       	ldi	r20, 0x2C	; 44
    3c72:	55 e4       	ldi	r21, 0x45	; 69
    3c74:	0e 94 58 26 	call	0x4cb0	; 0x4cb0 <__mulsf3>
    3c78:	dc 01       	movw	r26, r24
    3c7a:	cb 01       	movw	r24, r22
    3c7c:	f8 01       	movw	r30, r16
    3c7e:	80 83       	st	Z, r24
    3c80:	91 83       	std	Z+1, r25	; 0x01
    3c82:	a2 83       	std	Z+2, r26	; 0x02
    3c84:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3c86:	fe 01       	movw	r30, r28
    3c88:	ff 96       	adiw	r30, 0x3f	; 63
    3c8a:	60 81       	ld	r22, Z
    3c8c:	71 81       	ldd	r23, Z+1	; 0x01
    3c8e:	82 81       	ldd	r24, Z+2	; 0x02
    3c90:	93 81       	ldd	r25, Z+3	; 0x03
    3c92:	20 e0       	ldi	r18, 0x00	; 0
    3c94:	30 e0       	ldi	r19, 0x00	; 0
    3c96:	40 e8       	ldi	r20, 0x80	; 128
    3c98:	5f e3       	ldi	r21, 0x3F	; 63
    3c9a:	0e 94 5e 28 	call	0x50bc	; 0x50bc <__ltsf2>
    3c9e:	88 23       	and	r24, r24
    3ca0:	2c f4       	brge	.+10     	; 0x3cac <CollectFruit+0x836>
		__ticks = 1;
    3ca2:	81 e0       	ldi	r24, 0x01	; 1
    3ca4:	90 e0       	ldi	r25, 0x00	; 0
    3ca6:	9e af       	std	Y+62, r25	; 0x3e
    3ca8:	8d af       	std	Y+61, r24	; 0x3d
    3caa:	46 c0       	rjmp	.+140    	; 0x3d38 <CollectFruit+0x8c2>
	else if (__tmp > 65535)
    3cac:	fe 01       	movw	r30, r28
    3cae:	ff 96       	adiw	r30, 0x3f	; 63
    3cb0:	60 81       	ld	r22, Z
    3cb2:	71 81       	ldd	r23, Z+1	; 0x01
    3cb4:	82 81       	ldd	r24, Z+2	; 0x02
    3cb6:	93 81       	ldd	r25, Z+3	; 0x03
    3cb8:	20 e0       	ldi	r18, 0x00	; 0
    3cba:	3f ef       	ldi	r19, 0xFF	; 255
    3cbc:	4f e7       	ldi	r20, 0x7F	; 127
    3cbe:	57 e4       	ldi	r21, 0x47	; 71
    3cc0:	0e 94 fe 27 	call	0x4ffc	; 0x4ffc <__gtsf2>
    3cc4:	18 16       	cp	r1, r24
    3cc6:	64 f5       	brge	.+88     	; 0x3d20 <CollectFruit+0x8aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3cc8:	fe 01       	movw	r30, r28
    3cca:	ed 5b       	subi	r30, 0xBD	; 189
    3ccc:	ff 4f       	sbci	r31, 0xFF	; 255
    3cce:	60 81       	ld	r22, Z
    3cd0:	71 81       	ldd	r23, Z+1	; 0x01
    3cd2:	82 81       	ldd	r24, Z+2	; 0x02
    3cd4:	93 81       	ldd	r25, Z+3	; 0x03
    3cd6:	20 e0       	ldi	r18, 0x00	; 0
    3cd8:	30 e0       	ldi	r19, 0x00	; 0
    3cda:	40 e2       	ldi	r20, 0x20	; 32
    3cdc:	51 e4       	ldi	r21, 0x41	; 65
    3cde:	0e 94 58 26 	call	0x4cb0	; 0x4cb0 <__mulsf3>
    3ce2:	dc 01       	movw	r26, r24
    3ce4:	cb 01       	movw	r24, r22
    3ce6:	bc 01       	movw	r22, r24
    3ce8:	cd 01       	movw	r24, r26
    3cea:	0e 94 82 24 	call	0x4904	; 0x4904 <__fixunssfsi>
    3cee:	dc 01       	movw	r26, r24
    3cf0:	cb 01       	movw	r24, r22
    3cf2:	9e af       	std	Y+62, r25	; 0x3e
    3cf4:	8d af       	std	Y+61, r24	; 0x3d
    3cf6:	0f c0       	rjmp	.+30     	; 0x3d16 <CollectFruit+0x8a0>
    3cf8:	84 e1       	ldi	r24, 0x14	; 20
    3cfa:	91 e0       	ldi	r25, 0x01	; 1
    3cfc:	9c af       	std	Y+60, r25	; 0x3c
    3cfe:	8b af       	std	Y+59, r24	; 0x3b
    3d00:	8b ad       	ldd	r24, Y+59	; 0x3b
    3d02:	9c ad       	ldd	r25, Y+60	; 0x3c
    3d04:	01 97       	sbiw	r24, 0x01	; 1
    3d06:	f1 f7       	brne	.-4      	; 0x3d04 <CollectFruit+0x88e>
    3d08:	9c af       	std	Y+60, r25	; 0x3c
    3d0a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d0c:	8d ad       	ldd	r24, Y+61	; 0x3d
    3d0e:	9e ad       	ldd	r25, Y+62	; 0x3e
    3d10:	01 97       	sbiw	r24, 0x01	; 1
    3d12:	9e af       	std	Y+62, r25	; 0x3e
    3d14:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d16:	8d ad       	ldd	r24, Y+61	; 0x3d
    3d18:	9e ad       	ldd	r25, Y+62	; 0x3e
    3d1a:	00 97       	sbiw	r24, 0x00	; 0
    3d1c:	69 f7       	brne	.-38     	; 0x3cf8 <CollectFruit+0x882>
    3d1e:	16 c0       	rjmp	.+44     	; 0x3d4c <CollectFruit+0x8d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d20:	fe 01       	movw	r30, r28
    3d22:	ff 96       	adiw	r30, 0x3f	; 63
    3d24:	60 81       	ld	r22, Z
    3d26:	71 81       	ldd	r23, Z+1	; 0x01
    3d28:	82 81       	ldd	r24, Z+2	; 0x02
    3d2a:	93 81       	ldd	r25, Z+3	; 0x03
    3d2c:	0e 94 82 24 	call	0x4904	; 0x4904 <__fixunssfsi>
    3d30:	dc 01       	movw	r26, r24
    3d32:	cb 01       	movw	r24, r22
    3d34:	9e af       	std	Y+62, r25	; 0x3e
    3d36:	8d af       	std	Y+61, r24	; 0x3d
    3d38:	8d ad       	ldd	r24, Y+61	; 0x3d
    3d3a:	9e ad       	ldd	r25, Y+62	; 0x3e
    3d3c:	9a af       	std	Y+58, r25	; 0x3a
    3d3e:	89 af       	std	Y+57, r24	; 0x39
    3d40:	89 ad       	ldd	r24, Y+57	; 0x39
    3d42:	9a ad       	ldd	r25, Y+58	; 0x3a
    3d44:	01 97       	sbiw	r24, 0x01	; 1
    3d46:	f1 f7       	brne	.-4      	; 0x3d44 <CollectFruit+0x8ce>
    3d48:	9a af       	std	Y+58, r25	; 0x3a
    3d4a:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(2000);
	Lift(90);
    3d4c:	60 e0       	ldi	r22, 0x00	; 0
    3d4e:	70 e0       	ldi	r23, 0x00	; 0
    3d50:	84 eb       	ldi	r24, 0xB4	; 180
    3d52:	92 e4       	ldi	r25, 0x42	; 66
    3d54:	0e 94 34 14 	call	0x2868	; 0x2868 <Lift>

	
	back_mm(objDist);
    3d58:	fe 01       	movw	r30, r28
    3d5a:	e1 57       	subi	r30, 0x71	; 113
    3d5c:	ff 4f       	sbci	r31, 0xFF	; 255
    3d5e:	80 81       	ld	r24, Z
    3d60:	91 81       	ldd	r25, Z+1	; 0x01
    3d62:	0e 94 47 03 	call	0x68e	; 0x68e <back_mm>
    3d66:	80 e0       	ldi	r24, 0x00	; 0
    3d68:	90 e0       	ldi	r25, 0x00	; 0
    3d6a:	aa ef       	ldi	r26, 0xFA	; 250
    3d6c:	b4 e4       	ldi	r27, 0x44	; 68
    3d6e:	8d ab       	std	Y+53, r24	; 0x35
    3d70:	9e ab       	std	Y+54, r25	; 0x36
    3d72:	af ab       	std	Y+55, r26	; 0x37
    3d74:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d76:	6d a9       	ldd	r22, Y+53	; 0x35
    3d78:	7e a9       	ldd	r23, Y+54	; 0x36
    3d7a:	8f a9       	ldd	r24, Y+55	; 0x37
    3d7c:	98 ad       	ldd	r25, Y+56	; 0x38
    3d7e:	2d ec       	ldi	r18, 0xCD	; 205
    3d80:	3c ec       	ldi	r19, 0xCC	; 204
    3d82:	4c e2       	ldi	r20, 0x2C	; 44
    3d84:	55 e4       	ldi	r21, 0x45	; 69
    3d86:	0e 94 58 26 	call	0x4cb0	; 0x4cb0 <__mulsf3>
    3d8a:	dc 01       	movw	r26, r24
    3d8c:	cb 01       	movw	r24, r22
    3d8e:	89 ab       	std	Y+49, r24	; 0x31
    3d90:	9a ab       	std	Y+50, r25	; 0x32
    3d92:	ab ab       	std	Y+51, r26	; 0x33
    3d94:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3d96:	69 a9       	ldd	r22, Y+49	; 0x31
    3d98:	7a a9       	ldd	r23, Y+50	; 0x32
    3d9a:	8b a9       	ldd	r24, Y+51	; 0x33
    3d9c:	9c a9       	ldd	r25, Y+52	; 0x34
    3d9e:	20 e0       	ldi	r18, 0x00	; 0
    3da0:	30 e0       	ldi	r19, 0x00	; 0
    3da2:	40 e8       	ldi	r20, 0x80	; 128
    3da4:	5f e3       	ldi	r21, 0x3F	; 63
    3da6:	0e 94 5e 28 	call	0x50bc	; 0x50bc <__ltsf2>
    3daa:	88 23       	and	r24, r24
    3dac:	2c f4       	brge	.+10     	; 0x3db8 <CollectFruit+0x942>
		__ticks = 1;
    3dae:	81 e0       	ldi	r24, 0x01	; 1
    3db0:	90 e0       	ldi	r25, 0x00	; 0
    3db2:	98 ab       	std	Y+48, r25	; 0x30
    3db4:	8f a7       	std	Y+47, r24	; 0x2f
    3db6:	3f c0       	rjmp	.+126    	; 0x3e36 <CollectFruit+0x9c0>
	else if (__tmp > 65535)
    3db8:	69 a9       	ldd	r22, Y+49	; 0x31
    3dba:	7a a9       	ldd	r23, Y+50	; 0x32
    3dbc:	8b a9       	ldd	r24, Y+51	; 0x33
    3dbe:	9c a9       	ldd	r25, Y+52	; 0x34
    3dc0:	20 e0       	ldi	r18, 0x00	; 0
    3dc2:	3f ef       	ldi	r19, 0xFF	; 255
    3dc4:	4f e7       	ldi	r20, 0x7F	; 127
    3dc6:	57 e4       	ldi	r21, 0x47	; 71
    3dc8:	0e 94 fe 27 	call	0x4ffc	; 0x4ffc <__gtsf2>
    3dcc:	18 16       	cp	r1, r24
    3dce:	4c f5       	brge	.+82     	; 0x3e22 <CollectFruit+0x9ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3dd0:	6d a9       	ldd	r22, Y+53	; 0x35
    3dd2:	7e a9       	ldd	r23, Y+54	; 0x36
    3dd4:	8f a9       	ldd	r24, Y+55	; 0x37
    3dd6:	98 ad       	ldd	r25, Y+56	; 0x38
    3dd8:	20 e0       	ldi	r18, 0x00	; 0
    3dda:	30 e0       	ldi	r19, 0x00	; 0
    3ddc:	40 e2       	ldi	r20, 0x20	; 32
    3dde:	51 e4       	ldi	r21, 0x41	; 65
    3de0:	0e 94 58 26 	call	0x4cb0	; 0x4cb0 <__mulsf3>
    3de4:	dc 01       	movw	r26, r24
    3de6:	cb 01       	movw	r24, r22
    3de8:	bc 01       	movw	r22, r24
    3dea:	cd 01       	movw	r24, r26
    3dec:	0e 94 82 24 	call	0x4904	; 0x4904 <__fixunssfsi>
    3df0:	dc 01       	movw	r26, r24
    3df2:	cb 01       	movw	r24, r22
    3df4:	98 ab       	std	Y+48, r25	; 0x30
    3df6:	8f a7       	std	Y+47, r24	; 0x2f
    3df8:	0f c0       	rjmp	.+30     	; 0x3e18 <CollectFruit+0x9a2>
    3dfa:	84 e1       	ldi	r24, 0x14	; 20
    3dfc:	91 e0       	ldi	r25, 0x01	; 1
    3dfe:	9e a7       	std	Y+46, r25	; 0x2e
    3e00:	8d a7       	std	Y+45, r24	; 0x2d
    3e02:	8d a5       	ldd	r24, Y+45	; 0x2d
    3e04:	9e a5       	ldd	r25, Y+46	; 0x2e
    3e06:	01 97       	sbiw	r24, 0x01	; 1
    3e08:	f1 f7       	brne	.-4      	; 0x3e06 <CollectFruit+0x990>
    3e0a:	9e a7       	std	Y+46, r25	; 0x2e
    3e0c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e0e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3e10:	98 a9       	ldd	r25, Y+48	; 0x30
    3e12:	01 97       	sbiw	r24, 0x01	; 1
    3e14:	98 ab       	std	Y+48, r25	; 0x30
    3e16:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e18:	8f a5       	ldd	r24, Y+47	; 0x2f
    3e1a:	98 a9       	ldd	r25, Y+48	; 0x30
    3e1c:	00 97       	sbiw	r24, 0x00	; 0
    3e1e:	69 f7       	brne	.-38     	; 0x3dfa <CollectFruit+0x984>
    3e20:	14 c0       	rjmp	.+40     	; 0x3e4a <CollectFruit+0x9d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e22:	69 a9       	ldd	r22, Y+49	; 0x31
    3e24:	7a a9       	ldd	r23, Y+50	; 0x32
    3e26:	8b a9       	ldd	r24, Y+51	; 0x33
    3e28:	9c a9       	ldd	r25, Y+52	; 0x34
    3e2a:	0e 94 82 24 	call	0x4904	; 0x4904 <__fixunssfsi>
    3e2e:	dc 01       	movw	r26, r24
    3e30:	cb 01       	movw	r24, r22
    3e32:	98 ab       	std	Y+48, r25	; 0x30
    3e34:	8f a7       	std	Y+47, r24	; 0x2f
    3e36:	8f a5       	ldd	r24, Y+47	; 0x2f
    3e38:	98 a9       	ldd	r25, Y+48	; 0x30
    3e3a:	9c a7       	std	Y+44, r25	; 0x2c
    3e3c:	8b a7       	std	Y+43, r24	; 0x2b
    3e3e:	8b a5       	ldd	r24, Y+43	; 0x2b
    3e40:	9c a5       	ldd	r25, Y+44	; 0x2c
    3e42:	01 97       	sbiw	r24, 0x01	; 1
    3e44:	f1 f7       	brne	.-4      	; 0x3e42 <CollectFruit+0x9cc>
    3e46:	9c a7       	std	Y+44, r25	; 0x2c
    3e48:	8b a7       	std	Y+43, r24	; 0x2b
//	backOffObj(forwardMoved);

	//Tutn to original place
	_delay_ms(2000);
	LEFT_TURN_BY(83);
    3e4a:	83 e5       	ldi	r24, 0x53	; 83
    3e4c:	90 e0       	ldi	r25, 0x00	; 0
    3e4e:	0e 94 6f 03 	call	0x6de	; 0x6de <LEFT_TURN_BY>
    3e52:	80 e0       	ldi	r24, 0x00	; 0
    3e54:	90 e0       	ldi	r25, 0x00	; 0
    3e56:	aa ef       	ldi	r26, 0xFA	; 250
    3e58:	b4 e4       	ldi	r27, 0x44	; 68
    3e5a:	8f a3       	std	Y+39, r24	; 0x27
    3e5c:	98 a7       	std	Y+40, r25	; 0x28
    3e5e:	a9 a7       	std	Y+41, r26	; 0x29
    3e60:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e62:	6f a1       	ldd	r22, Y+39	; 0x27
    3e64:	78 a5       	ldd	r23, Y+40	; 0x28
    3e66:	89 a5       	ldd	r24, Y+41	; 0x29
    3e68:	9a a5       	ldd	r25, Y+42	; 0x2a
    3e6a:	2d ec       	ldi	r18, 0xCD	; 205
    3e6c:	3c ec       	ldi	r19, 0xCC	; 204
    3e6e:	4c e2       	ldi	r20, 0x2C	; 44
    3e70:	55 e4       	ldi	r21, 0x45	; 69
    3e72:	0e 94 58 26 	call	0x4cb0	; 0x4cb0 <__mulsf3>
    3e76:	dc 01       	movw	r26, r24
    3e78:	cb 01       	movw	r24, r22
    3e7a:	8b a3       	std	Y+35, r24	; 0x23
    3e7c:	9c a3       	std	Y+36, r25	; 0x24
    3e7e:	ad a3       	std	Y+37, r26	; 0x25
    3e80:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3e82:	6b a1       	ldd	r22, Y+35	; 0x23
    3e84:	7c a1       	ldd	r23, Y+36	; 0x24
    3e86:	8d a1       	ldd	r24, Y+37	; 0x25
    3e88:	9e a1       	ldd	r25, Y+38	; 0x26
    3e8a:	20 e0       	ldi	r18, 0x00	; 0
    3e8c:	30 e0       	ldi	r19, 0x00	; 0
    3e8e:	40 e8       	ldi	r20, 0x80	; 128
    3e90:	5f e3       	ldi	r21, 0x3F	; 63
    3e92:	0e 94 5e 28 	call	0x50bc	; 0x50bc <__ltsf2>
    3e96:	88 23       	and	r24, r24
    3e98:	2c f4       	brge	.+10     	; 0x3ea4 <CollectFruit+0xa2e>
		__ticks = 1;
    3e9a:	81 e0       	ldi	r24, 0x01	; 1
    3e9c:	90 e0       	ldi	r25, 0x00	; 0
    3e9e:	9a a3       	std	Y+34, r25	; 0x22
    3ea0:	89 a3       	std	Y+33, r24	; 0x21
    3ea2:	3f c0       	rjmp	.+126    	; 0x3f22 <CollectFruit+0xaac>
	else if (__tmp > 65535)
    3ea4:	6b a1       	ldd	r22, Y+35	; 0x23
    3ea6:	7c a1       	ldd	r23, Y+36	; 0x24
    3ea8:	8d a1       	ldd	r24, Y+37	; 0x25
    3eaa:	9e a1       	ldd	r25, Y+38	; 0x26
    3eac:	20 e0       	ldi	r18, 0x00	; 0
    3eae:	3f ef       	ldi	r19, 0xFF	; 255
    3eb0:	4f e7       	ldi	r20, 0x7F	; 127
    3eb2:	57 e4       	ldi	r21, 0x47	; 71
    3eb4:	0e 94 fe 27 	call	0x4ffc	; 0x4ffc <__gtsf2>
    3eb8:	18 16       	cp	r1, r24
    3eba:	4c f5       	brge	.+82     	; 0x3f0e <CollectFruit+0xa98>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ebc:	6f a1       	ldd	r22, Y+39	; 0x27
    3ebe:	78 a5       	ldd	r23, Y+40	; 0x28
    3ec0:	89 a5       	ldd	r24, Y+41	; 0x29
    3ec2:	9a a5       	ldd	r25, Y+42	; 0x2a
    3ec4:	20 e0       	ldi	r18, 0x00	; 0
    3ec6:	30 e0       	ldi	r19, 0x00	; 0
    3ec8:	40 e2       	ldi	r20, 0x20	; 32
    3eca:	51 e4       	ldi	r21, 0x41	; 65
    3ecc:	0e 94 58 26 	call	0x4cb0	; 0x4cb0 <__mulsf3>
    3ed0:	dc 01       	movw	r26, r24
    3ed2:	cb 01       	movw	r24, r22
    3ed4:	bc 01       	movw	r22, r24
    3ed6:	cd 01       	movw	r24, r26
    3ed8:	0e 94 82 24 	call	0x4904	; 0x4904 <__fixunssfsi>
    3edc:	dc 01       	movw	r26, r24
    3ede:	cb 01       	movw	r24, r22
    3ee0:	9a a3       	std	Y+34, r25	; 0x22
    3ee2:	89 a3       	std	Y+33, r24	; 0x21
    3ee4:	0f c0       	rjmp	.+30     	; 0x3f04 <CollectFruit+0xa8e>
    3ee6:	84 e1       	ldi	r24, 0x14	; 20
    3ee8:	91 e0       	ldi	r25, 0x01	; 1
    3eea:	98 a3       	std	Y+32, r25	; 0x20
    3eec:	8f 8f       	std	Y+31, r24	; 0x1f
    3eee:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3ef0:	98 a1       	ldd	r25, Y+32	; 0x20
    3ef2:	01 97       	sbiw	r24, 0x01	; 1
    3ef4:	f1 f7       	brne	.-4      	; 0x3ef2 <CollectFruit+0xa7c>
    3ef6:	98 a3       	std	Y+32, r25	; 0x20
    3ef8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3efa:	89 a1       	ldd	r24, Y+33	; 0x21
    3efc:	9a a1       	ldd	r25, Y+34	; 0x22
    3efe:	01 97       	sbiw	r24, 0x01	; 1
    3f00:	9a a3       	std	Y+34, r25	; 0x22
    3f02:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f04:	89 a1       	ldd	r24, Y+33	; 0x21
    3f06:	9a a1       	ldd	r25, Y+34	; 0x22
    3f08:	00 97       	sbiw	r24, 0x00	; 0
    3f0a:	69 f7       	brne	.-38     	; 0x3ee6 <CollectFruit+0xa70>
    3f0c:	14 c0       	rjmp	.+40     	; 0x3f36 <CollectFruit+0xac0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f0e:	6b a1       	ldd	r22, Y+35	; 0x23
    3f10:	7c a1       	ldd	r23, Y+36	; 0x24
    3f12:	8d a1       	ldd	r24, Y+37	; 0x25
    3f14:	9e a1       	ldd	r25, Y+38	; 0x26
    3f16:	0e 94 82 24 	call	0x4904	; 0x4904 <__fixunssfsi>
    3f1a:	dc 01       	movw	r26, r24
    3f1c:	cb 01       	movw	r24, r22
    3f1e:	9a a3       	std	Y+34, r25	; 0x22
    3f20:	89 a3       	std	Y+33, r24	; 0x21
    3f22:	89 a1       	ldd	r24, Y+33	; 0x21
    3f24:	9a a1       	ldd	r25, Y+34	; 0x22
    3f26:	9e 8f       	std	Y+30, r25	; 0x1e
    3f28:	8d 8f       	std	Y+29, r24	; 0x1d
    3f2a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3f2c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3f2e:	01 97       	sbiw	r24, 0x01	; 1
    3f30:	f1 f7       	brne	.-4      	; 0x3f2e <CollectFruit+0xab8>
    3f32:	9e 8f       	std	Y+30, r25	; 0x1e
    3f34:	8d 8f       	std	Y+29, r24	; 0x1d
	
	_delay_ms(2000);
	Lower();
    3f36:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <Lower>
    3f3a:	80 e0       	ldi	r24, 0x00	; 0
    3f3c:	90 e0       	ldi	r25, 0x00	; 0
    3f3e:	aa ef       	ldi	r26, 0xFA	; 250
    3f40:	b4 e4       	ldi	r27, 0x44	; 68
    3f42:	89 8f       	std	Y+25, r24	; 0x19
    3f44:	9a 8f       	std	Y+26, r25	; 0x1a
    3f46:	ab 8f       	std	Y+27, r26	; 0x1b
    3f48:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f4a:	69 8d       	ldd	r22, Y+25	; 0x19
    3f4c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3f4e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3f50:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3f52:	2d ec       	ldi	r18, 0xCD	; 205
    3f54:	3c ec       	ldi	r19, 0xCC	; 204
    3f56:	4c e2       	ldi	r20, 0x2C	; 44
    3f58:	55 e4       	ldi	r21, 0x45	; 69
    3f5a:	0e 94 58 26 	call	0x4cb0	; 0x4cb0 <__mulsf3>
    3f5e:	dc 01       	movw	r26, r24
    3f60:	cb 01       	movw	r24, r22
    3f62:	8d 8b       	std	Y+21, r24	; 0x15
    3f64:	9e 8b       	std	Y+22, r25	; 0x16
    3f66:	af 8b       	std	Y+23, r26	; 0x17
    3f68:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3f6a:	6d 89       	ldd	r22, Y+21	; 0x15
    3f6c:	7e 89       	ldd	r23, Y+22	; 0x16
    3f6e:	8f 89       	ldd	r24, Y+23	; 0x17
    3f70:	98 8d       	ldd	r25, Y+24	; 0x18
    3f72:	20 e0       	ldi	r18, 0x00	; 0
    3f74:	30 e0       	ldi	r19, 0x00	; 0
    3f76:	40 e8       	ldi	r20, 0x80	; 128
    3f78:	5f e3       	ldi	r21, 0x3F	; 63
    3f7a:	0e 94 5e 28 	call	0x50bc	; 0x50bc <__ltsf2>
    3f7e:	88 23       	and	r24, r24
    3f80:	2c f4       	brge	.+10     	; 0x3f8c <CollectFruit+0xb16>
		__ticks = 1;
    3f82:	81 e0       	ldi	r24, 0x01	; 1
    3f84:	90 e0       	ldi	r25, 0x00	; 0
    3f86:	9c 8b       	std	Y+20, r25	; 0x14
    3f88:	8b 8b       	std	Y+19, r24	; 0x13
    3f8a:	3f c0       	rjmp	.+126    	; 0x400a <CollectFruit+0xb94>
	else if (__tmp > 65535)
    3f8c:	6d 89       	ldd	r22, Y+21	; 0x15
    3f8e:	7e 89       	ldd	r23, Y+22	; 0x16
    3f90:	8f 89       	ldd	r24, Y+23	; 0x17
    3f92:	98 8d       	ldd	r25, Y+24	; 0x18
    3f94:	20 e0       	ldi	r18, 0x00	; 0
    3f96:	3f ef       	ldi	r19, 0xFF	; 255
    3f98:	4f e7       	ldi	r20, 0x7F	; 127
    3f9a:	57 e4       	ldi	r21, 0x47	; 71
    3f9c:	0e 94 fe 27 	call	0x4ffc	; 0x4ffc <__gtsf2>
    3fa0:	18 16       	cp	r1, r24
    3fa2:	4c f5       	brge	.+82     	; 0x3ff6 <CollectFruit+0xb80>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3fa4:	69 8d       	ldd	r22, Y+25	; 0x19
    3fa6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3fa8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3faa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3fac:	20 e0       	ldi	r18, 0x00	; 0
    3fae:	30 e0       	ldi	r19, 0x00	; 0
    3fb0:	40 e2       	ldi	r20, 0x20	; 32
    3fb2:	51 e4       	ldi	r21, 0x41	; 65
    3fb4:	0e 94 58 26 	call	0x4cb0	; 0x4cb0 <__mulsf3>
    3fb8:	dc 01       	movw	r26, r24
    3fba:	cb 01       	movw	r24, r22
    3fbc:	bc 01       	movw	r22, r24
    3fbe:	cd 01       	movw	r24, r26
    3fc0:	0e 94 82 24 	call	0x4904	; 0x4904 <__fixunssfsi>
    3fc4:	dc 01       	movw	r26, r24
    3fc6:	cb 01       	movw	r24, r22
    3fc8:	9c 8b       	std	Y+20, r25	; 0x14
    3fca:	8b 8b       	std	Y+19, r24	; 0x13
    3fcc:	0f c0       	rjmp	.+30     	; 0x3fec <CollectFruit+0xb76>
    3fce:	84 e1       	ldi	r24, 0x14	; 20
    3fd0:	91 e0       	ldi	r25, 0x01	; 1
    3fd2:	9a 8b       	std	Y+18, r25	; 0x12
    3fd4:	89 8b       	std	Y+17, r24	; 0x11
    3fd6:	89 89       	ldd	r24, Y+17	; 0x11
    3fd8:	9a 89       	ldd	r25, Y+18	; 0x12
    3fda:	01 97       	sbiw	r24, 0x01	; 1
    3fdc:	f1 f7       	brne	.-4      	; 0x3fda <CollectFruit+0xb64>
    3fde:	9a 8b       	std	Y+18, r25	; 0x12
    3fe0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3fe2:	8b 89       	ldd	r24, Y+19	; 0x13
    3fe4:	9c 89       	ldd	r25, Y+20	; 0x14
    3fe6:	01 97       	sbiw	r24, 0x01	; 1
    3fe8:	9c 8b       	std	Y+20, r25	; 0x14
    3fea:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3fec:	8b 89       	ldd	r24, Y+19	; 0x13
    3fee:	9c 89       	ldd	r25, Y+20	; 0x14
    3ff0:	00 97       	sbiw	r24, 0x00	; 0
    3ff2:	69 f7       	brne	.-38     	; 0x3fce <CollectFruit+0xb58>
    3ff4:	14 c0       	rjmp	.+40     	; 0x401e <CollectFruit+0xba8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ff6:	6d 89       	ldd	r22, Y+21	; 0x15
    3ff8:	7e 89       	ldd	r23, Y+22	; 0x16
    3ffa:	8f 89       	ldd	r24, Y+23	; 0x17
    3ffc:	98 8d       	ldd	r25, Y+24	; 0x18
    3ffe:	0e 94 82 24 	call	0x4904	; 0x4904 <__fixunssfsi>
    4002:	dc 01       	movw	r26, r24
    4004:	cb 01       	movw	r24, r22
    4006:	9c 8b       	std	Y+20, r25	; 0x14
    4008:	8b 8b       	std	Y+19, r24	; 0x13
    400a:	8b 89       	ldd	r24, Y+19	; 0x13
    400c:	9c 89       	ldd	r25, Y+20	; 0x14
    400e:	98 8b       	std	Y+16, r25	; 0x10
    4010:	8f 87       	std	Y+15, r24	; 0x0f
    4012:	8f 85       	ldd	r24, Y+15	; 0x0f
    4014:	98 89       	ldd	r25, Y+16	; 0x10
    4016:	01 97       	sbiw	r24, 0x01	; 1
    4018:	f1 f7       	brne	.-4      	; 0x4016 <CollectFruit+0xba0>
    401a:	98 8b       	std	Y+16, r25	; 0x10
    401c:	8f 87       	std	Y+15, r24	; 0x0f

	
	 _delay_ms(2000);
	CameraRight();
    401e:	0e 94 1e 13 	call	0x263c	; 0x263c <CameraRight>
    4022:	80 e0       	ldi	r24, 0x00	; 0
    4024:	90 e0       	ldi	r25, 0x00	; 0
    4026:	aa ef       	ldi	r26, 0xFA	; 250
    4028:	b4 e4       	ldi	r27, 0x44	; 68
    402a:	8b 87       	std	Y+11, r24	; 0x0b
    402c:	9c 87       	std	Y+12, r25	; 0x0c
    402e:	ad 87       	std	Y+13, r26	; 0x0d
    4030:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4032:	6b 85       	ldd	r22, Y+11	; 0x0b
    4034:	7c 85       	ldd	r23, Y+12	; 0x0c
    4036:	8d 85       	ldd	r24, Y+13	; 0x0d
    4038:	9e 85       	ldd	r25, Y+14	; 0x0e
    403a:	2d ec       	ldi	r18, 0xCD	; 205
    403c:	3c ec       	ldi	r19, 0xCC	; 204
    403e:	4c e2       	ldi	r20, 0x2C	; 44
    4040:	55 e4       	ldi	r21, 0x45	; 69
    4042:	0e 94 58 26 	call	0x4cb0	; 0x4cb0 <__mulsf3>
    4046:	dc 01       	movw	r26, r24
    4048:	cb 01       	movw	r24, r22
    404a:	8f 83       	std	Y+7, r24	; 0x07
    404c:	98 87       	std	Y+8, r25	; 0x08
    404e:	a9 87       	std	Y+9, r26	; 0x09
    4050:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4052:	6f 81       	ldd	r22, Y+7	; 0x07
    4054:	78 85       	ldd	r23, Y+8	; 0x08
    4056:	89 85       	ldd	r24, Y+9	; 0x09
    4058:	9a 85       	ldd	r25, Y+10	; 0x0a
    405a:	20 e0       	ldi	r18, 0x00	; 0
    405c:	30 e0       	ldi	r19, 0x00	; 0
    405e:	40 e8       	ldi	r20, 0x80	; 128
    4060:	5f e3       	ldi	r21, 0x3F	; 63
    4062:	0e 94 5e 28 	call	0x50bc	; 0x50bc <__ltsf2>
    4066:	88 23       	and	r24, r24
    4068:	2c f4       	brge	.+10     	; 0x4074 <CollectFruit+0xbfe>
		__ticks = 1;
    406a:	81 e0       	ldi	r24, 0x01	; 1
    406c:	90 e0       	ldi	r25, 0x00	; 0
    406e:	9e 83       	std	Y+6, r25	; 0x06
    4070:	8d 83       	std	Y+5, r24	; 0x05
    4072:	3f c0       	rjmp	.+126    	; 0x40f2 <CollectFruit+0xc7c>
	else if (__tmp > 65535)
    4074:	6f 81       	ldd	r22, Y+7	; 0x07
    4076:	78 85       	ldd	r23, Y+8	; 0x08
    4078:	89 85       	ldd	r24, Y+9	; 0x09
    407a:	9a 85       	ldd	r25, Y+10	; 0x0a
    407c:	20 e0       	ldi	r18, 0x00	; 0
    407e:	3f ef       	ldi	r19, 0xFF	; 255
    4080:	4f e7       	ldi	r20, 0x7F	; 127
    4082:	57 e4       	ldi	r21, 0x47	; 71
    4084:	0e 94 fe 27 	call	0x4ffc	; 0x4ffc <__gtsf2>
    4088:	18 16       	cp	r1, r24
    408a:	4c f5       	brge	.+82     	; 0x40de <CollectFruit+0xc68>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    408c:	6b 85       	ldd	r22, Y+11	; 0x0b
    408e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4090:	8d 85       	ldd	r24, Y+13	; 0x0d
    4092:	9e 85       	ldd	r25, Y+14	; 0x0e
    4094:	20 e0       	ldi	r18, 0x00	; 0
    4096:	30 e0       	ldi	r19, 0x00	; 0
    4098:	40 e2       	ldi	r20, 0x20	; 32
    409a:	51 e4       	ldi	r21, 0x41	; 65
    409c:	0e 94 58 26 	call	0x4cb0	; 0x4cb0 <__mulsf3>
    40a0:	dc 01       	movw	r26, r24
    40a2:	cb 01       	movw	r24, r22
    40a4:	bc 01       	movw	r22, r24
    40a6:	cd 01       	movw	r24, r26
    40a8:	0e 94 82 24 	call	0x4904	; 0x4904 <__fixunssfsi>
    40ac:	dc 01       	movw	r26, r24
    40ae:	cb 01       	movw	r24, r22
    40b0:	9e 83       	std	Y+6, r25	; 0x06
    40b2:	8d 83       	std	Y+5, r24	; 0x05
    40b4:	0f c0       	rjmp	.+30     	; 0x40d4 <CollectFruit+0xc5e>
    40b6:	84 e1       	ldi	r24, 0x14	; 20
    40b8:	91 e0       	ldi	r25, 0x01	; 1
    40ba:	9c 83       	std	Y+4, r25	; 0x04
    40bc:	8b 83       	std	Y+3, r24	; 0x03
    40be:	8b 81       	ldd	r24, Y+3	; 0x03
    40c0:	9c 81       	ldd	r25, Y+4	; 0x04
    40c2:	01 97       	sbiw	r24, 0x01	; 1
    40c4:	f1 f7       	brne	.-4      	; 0x40c2 <CollectFruit+0xc4c>
    40c6:	9c 83       	std	Y+4, r25	; 0x04
    40c8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    40ca:	8d 81       	ldd	r24, Y+5	; 0x05
    40cc:	9e 81       	ldd	r25, Y+6	; 0x06
    40ce:	01 97       	sbiw	r24, 0x01	; 1
    40d0:	9e 83       	std	Y+6, r25	; 0x06
    40d2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    40d4:	8d 81       	ldd	r24, Y+5	; 0x05
    40d6:	9e 81       	ldd	r25, Y+6	; 0x06
    40d8:	00 97       	sbiw	r24, 0x00	; 0
    40da:	69 f7       	brne	.-38     	; 0x40b6 <CollectFruit+0xc40>
    40dc:	14 c0       	rjmp	.+40     	; 0x4106 <CollectFruit+0xc90>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    40de:	6f 81       	ldd	r22, Y+7	; 0x07
    40e0:	78 85       	ldd	r23, Y+8	; 0x08
    40e2:	89 85       	ldd	r24, Y+9	; 0x09
    40e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    40e6:	0e 94 82 24 	call	0x4904	; 0x4904 <__fixunssfsi>
    40ea:	dc 01       	movw	r26, r24
    40ec:	cb 01       	movw	r24, r22
    40ee:	9e 83       	std	Y+6, r25	; 0x06
    40f0:	8d 83       	std	Y+5, r24	; 0x05
    40f2:	8d 81       	ldd	r24, Y+5	; 0x05
    40f4:	9e 81       	ldd	r25, Y+6	; 0x06
    40f6:	9a 83       	std	Y+2, r25	; 0x02
    40f8:	89 83       	std	Y+1, r24	; 0x01
    40fa:	89 81       	ldd	r24, Y+1	; 0x01
    40fc:	9a 81       	ldd	r25, Y+2	; 0x02
    40fe:	01 97       	sbiw	r24, 0x01	; 1
    4100:	f1 f7       	brne	.-4      	; 0x40fe <CollectFruit+0xc88>
    4102:	9a 83       	std	Y+2, r25	; 0x02
    4104:	89 83       	std	Y+1, r24	; 0x01
	


	 _delay_ms(2000);
	 servo_1_free();
    4106:	0e 94 66 12 	call	0x24cc	; 0x24cc <servo_1_free>
	 servo_2_free();
    410a:	0e 94 75 12 	call	0x24ea	; 0x24ea <servo_2_free>
	 servo_3_free();
    410e:	0e 94 84 12 	call	0x2508	; 0x2508 <servo_3_free>

	 
	 prevState = 1;
    4112:	81 e0       	ldi	r24, 0x01	; 1
    4114:	90 e0       	ldi	r25, 0x00	; 0
    4116:	90 93 1d 02 	sts	0x021D, r25
    411a:	80 93 1c 02 	sts	0x021C, r24
	 sendOnce = 1;
    411e:	81 e0       	ldi	r24, 0x01	; 1
    4120:	90 e0       	ldi	r25, 0x00	; 0
    4122:	90 93 40 03 	sts	0x0340, r25
    4126:	80 93 3f 03 	sts	0x033F, r24
		if(recievedHeight == 1)
		{
			recievedHeight = 0;
			break;
		}
	}
    412a:	ce 56       	subi	r28, 0x6E	; 110
    412c:	df 4f       	sbci	r29, 0xFF	; 255
    412e:	0f b6       	in	r0, 0x3f	; 63
    4130:	f8 94       	cli
    4132:	de bf       	out	0x3e, r29	; 62
    4134:	0f be       	out	0x3f, r0	; 63
    4136:	cd bf       	out	0x3d, r28	; 61
    4138:	cf 91       	pop	r28
    413a:	df 91       	pop	r29
    413c:	1f 91       	pop	r17
    413e:	0f 91       	pop	r16
    4140:	08 95       	ret

00004142 <main>:
	 sendOnce = 1;
}


void main(void)
{
    4142:	df 93       	push	r29
    4144:	cf 93       	push	r28
    4146:	cd b7       	in	r28, 0x3d	; 61
    4148:	de b7       	in	r29, 0x3e	; 62
    414a:	6c 97       	sbiw	r28, 0x1c	; 28
    414c:	0f b6       	in	r0, 0x3f	; 63
    414e:	f8 94       	cli
    4150:	de bf       	out	0x3e, r29	; 62
    4152:	0f be       	out	0x3f, r0	; 63
    4154:	cd bf       	out	0x3d, r28	; 61
	init_devices();	//defined in firebird_winavr.h.  It initialize all necessary ports for LCD, Buzzer, Motion control and IR sensor.
    4156:	0e 94 40 17 	call	0x2e80	; 0x2e80 <init_devices>
	position = 0;
    415a:	10 92 33 03 	sts	0x0333, r1
    415e:	10 92 32 03 	sts	0x0332, r1
	init_dist_measure();
    4162:	0e 94 0f 17 	call	0x2e1e	; 0x2e1e <init_dist_measure>


	UCSR0B = UCSR0B | 0x10; //set bit4 = rx enables
    4166:	a1 ec       	ldi	r26, 0xC1	; 193
    4168:	b0 e0       	ldi	r27, 0x00	; 0
    416a:	e1 ec       	ldi	r30, 0xC1	; 193
    416c:	f0 e0       	ldi	r31, 0x00	; 0
    416e:	80 81       	ld	r24, Z
    4170:	80 61       	ori	r24, 0x10	; 16
    4172:	8c 93       	st	X, r24
	UCSR0B = UCSR0B | 0x08; //set bit3 = tx enable
    4174:	a1 ec       	ldi	r26, 0xC1	; 193
    4176:	b0 e0       	ldi	r27, 0x00	; 0
    4178:	e1 ec       	ldi	r30, 0xC1	; 193
    417a:	f0 e0       	ldi	r31, 0x00	; 0
    417c:	80 81       	ld	r24, Z
    417e:	88 60       	ori	r24, 0x08	; 8
    4180:	8c 93       	st	X, r24
	UCSR0B = UCSR0B | 0x80; 	//bit-7 enable rx-complet interrupt
    4182:	a1 ec       	ldi	r26, 0xC1	; 193
    4184:	b0 e0       	ldi	r27, 0x00	; 0
    4186:	e1 ec       	ldi	r30, 0xC1	; 193
    4188:	f0 e0       	ldi	r31, 0x00	; 0
    418a:	80 81       	ld	r24, Z
    418c:	80 68       	ori	r24, 0x80	; 128
    418e:	8c 93       	st	X, r24
	
	CameraRight();
    4190:	0e 94 1e 13 	call	0x263c	; 0x263c <CameraRight>
    4194:	80 e0       	ldi	r24, 0x00	; 0
    4196:	90 e0       	ldi	r25, 0x00	; 0
    4198:	aa ef       	ldi	r26, 0xFA	; 250
    419a:	b4 e4       	ldi	r27, 0x44	; 68
    419c:	89 8f       	std	Y+25, r24	; 0x19
    419e:	9a 8f       	std	Y+26, r25	; 0x1a
    41a0:	ab 8f       	std	Y+27, r26	; 0x1b
    41a2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    41a4:	69 8d       	ldd	r22, Y+25	; 0x19
    41a6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    41a8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    41aa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    41ac:	2d ec       	ldi	r18, 0xCD	; 205
    41ae:	3c ec       	ldi	r19, 0xCC	; 204
    41b0:	4c e2       	ldi	r20, 0x2C	; 44
    41b2:	55 e4       	ldi	r21, 0x45	; 69
    41b4:	0e 94 58 26 	call	0x4cb0	; 0x4cb0 <__mulsf3>
    41b8:	dc 01       	movw	r26, r24
    41ba:	cb 01       	movw	r24, r22
    41bc:	8d 8b       	std	Y+21, r24	; 0x15
    41be:	9e 8b       	std	Y+22, r25	; 0x16
    41c0:	af 8b       	std	Y+23, r26	; 0x17
    41c2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    41c4:	6d 89       	ldd	r22, Y+21	; 0x15
    41c6:	7e 89       	ldd	r23, Y+22	; 0x16
    41c8:	8f 89       	ldd	r24, Y+23	; 0x17
    41ca:	98 8d       	ldd	r25, Y+24	; 0x18
    41cc:	20 e0       	ldi	r18, 0x00	; 0
    41ce:	30 e0       	ldi	r19, 0x00	; 0
    41d0:	40 e8       	ldi	r20, 0x80	; 128
    41d2:	5f e3       	ldi	r21, 0x3F	; 63
    41d4:	0e 94 5e 28 	call	0x50bc	; 0x50bc <__ltsf2>
    41d8:	88 23       	and	r24, r24
    41da:	2c f4       	brge	.+10     	; 0x41e6 <main+0xa4>
		__ticks = 1;
    41dc:	81 e0       	ldi	r24, 0x01	; 1
    41de:	90 e0       	ldi	r25, 0x00	; 0
    41e0:	9c 8b       	std	Y+20, r25	; 0x14
    41e2:	8b 8b       	std	Y+19, r24	; 0x13
    41e4:	3f c0       	rjmp	.+126    	; 0x4264 <main+0x122>
	else if (__tmp > 65535)
    41e6:	6d 89       	ldd	r22, Y+21	; 0x15
    41e8:	7e 89       	ldd	r23, Y+22	; 0x16
    41ea:	8f 89       	ldd	r24, Y+23	; 0x17
    41ec:	98 8d       	ldd	r25, Y+24	; 0x18
    41ee:	20 e0       	ldi	r18, 0x00	; 0
    41f0:	3f ef       	ldi	r19, 0xFF	; 255
    41f2:	4f e7       	ldi	r20, 0x7F	; 127
    41f4:	57 e4       	ldi	r21, 0x47	; 71
    41f6:	0e 94 fe 27 	call	0x4ffc	; 0x4ffc <__gtsf2>
    41fa:	18 16       	cp	r1, r24
    41fc:	4c f5       	brge	.+82     	; 0x4250 <main+0x10e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    41fe:	69 8d       	ldd	r22, Y+25	; 0x19
    4200:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4202:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4204:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4206:	20 e0       	ldi	r18, 0x00	; 0
    4208:	30 e0       	ldi	r19, 0x00	; 0
    420a:	40 e2       	ldi	r20, 0x20	; 32
    420c:	51 e4       	ldi	r21, 0x41	; 65
    420e:	0e 94 58 26 	call	0x4cb0	; 0x4cb0 <__mulsf3>
    4212:	dc 01       	movw	r26, r24
    4214:	cb 01       	movw	r24, r22
    4216:	bc 01       	movw	r22, r24
    4218:	cd 01       	movw	r24, r26
    421a:	0e 94 82 24 	call	0x4904	; 0x4904 <__fixunssfsi>
    421e:	dc 01       	movw	r26, r24
    4220:	cb 01       	movw	r24, r22
    4222:	9c 8b       	std	Y+20, r25	; 0x14
    4224:	8b 8b       	std	Y+19, r24	; 0x13
    4226:	0f c0       	rjmp	.+30     	; 0x4246 <main+0x104>
    4228:	84 e1       	ldi	r24, 0x14	; 20
    422a:	91 e0       	ldi	r25, 0x01	; 1
    422c:	9a 8b       	std	Y+18, r25	; 0x12
    422e:	89 8b       	std	Y+17, r24	; 0x11
    4230:	89 89       	ldd	r24, Y+17	; 0x11
    4232:	9a 89       	ldd	r25, Y+18	; 0x12
    4234:	01 97       	sbiw	r24, 0x01	; 1
    4236:	f1 f7       	brne	.-4      	; 0x4234 <main+0xf2>
    4238:	9a 8b       	std	Y+18, r25	; 0x12
    423a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    423c:	8b 89       	ldd	r24, Y+19	; 0x13
    423e:	9c 89       	ldd	r25, Y+20	; 0x14
    4240:	01 97       	sbiw	r24, 0x01	; 1
    4242:	9c 8b       	std	Y+20, r25	; 0x14
    4244:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4246:	8b 89       	ldd	r24, Y+19	; 0x13
    4248:	9c 89       	ldd	r25, Y+20	; 0x14
    424a:	00 97       	sbiw	r24, 0x00	; 0
    424c:	69 f7       	brne	.-38     	; 0x4228 <main+0xe6>
    424e:	14 c0       	rjmp	.+40     	; 0x4278 <main+0x136>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4250:	6d 89       	ldd	r22, Y+21	; 0x15
    4252:	7e 89       	ldd	r23, Y+22	; 0x16
    4254:	8f 89       	ldd	r24, Y+23	; 0x17
    4256:	98 8d       	ldd	r25, Y+24	; 0x18
    4258:	0e 94 82 24 	call	0x4904	; 0x4904 <__fixunssfsi>
    425c:	dc 01       	movw	r26, r24
    425e:	cb 01       	movw	r24, r22
    4260:	9c 8b       	std	Y+20, r25	; 0x14
    4262:	8b 8b       	std	Y+19, r24	; 0x13
    4264:	8b 89       	ldd	r24, Y+19	; 0x13
    4266:	9c 89       	ldd	r25, Y+20	; 0x14
    4268:	98 8b       	std	Y+16, r25	; 0x10
    426a:	8f 87       	std	Y+15, r24	; 0x0f
    426c:	8f 85       	ldd	r24, Y+15	; 0x0f
    426e:	98 89       	ldd	r25, Y+16	; 0x10
    4270:	01 97       	sbiw	r24, 0x01	; 1
    4272:	f1 f7       	brne	.-4      	; 0x4270 <main+0x12e>
    4274:	98 8b       	std	Y+16, r25	; 0x10
    4276:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2000);
	
	Lower();
    4278:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <Lower>
    427c:	80 e0       	ldi	r24, 0x00	; 0
    427e:	90 e0       	ldi	r25, 0x00	; 0
    4280:	aa ef       	ldi	r26, 0xFA	; 250
    4282:	b4 e4       	ldi	r27, 0x44	; 68
    4284:	8b 87       	std	Y+11, r24	; 0x0b
    4286:	9c 87       	std	Y+12, r25	; 0x0c
    4288:	ad 87       	std	Y+13, r26	; 0x0d
    428a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    428c:	6b 85       	ldd	r22, Y+11	; 0x0b
    428e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4290:	8d 85       	ldd	r24, Y+13	; 0x0d
    4292:	9e 85       	ldd	r25, Y+14	; 0x0e
    4294:	2d ec       	ldi	r18, 0xCD	; 205
    4296:	3c ec       	ldi	r19, 0xCC	; 204
    4298:	4c e2       	ldi	r20, 0x2C	; 44
    429a:	55 e4       	ldi	r21, 0x45	; 69
    429c:	0e 94 58 26 	call	0x4cb0	; 0x4cb0 <__mulsf3>
    42a0:	dc 01       	movw	r26, r24
    42a2:	cb 01       	movw	r24, r22
    42a4:	8f 83       	std	Y+7, r24	; 0x07
    42a6:	98 87       	std	Y+8, r25	; 0x08
    42a8:	a9 87       	std	Y+9, r26	; 0x09
    42aa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    42ac:	6f 81       	ldd	r22, Y+7	; 0x07
    42ae:	78 85       	ldd	r23, Y+8	; 0x08
    42b0:	89 85       	ldd	r24, Y+9	; 0x09
    42b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    42b4:	20 e0       	ldi	r18, 0x00	; 0
    42b6:	30 e0       	ldi	r19, 0x00	; 0
    42b8:	40 e8       	ldi	r20, 0x80	; 128
    42ba:	5f e3       	ldi	r21, 0x3F	; 63
    42bc:	0e 94 5e 28 	call	0x50bc	; 0x50bc <__ltsf2>
    42c0:	88 23       	and	r24, r24
    42c2:	2c f4       	brge	.+10     	; 0x42ce <main+0x18c>
		__ticks = 1;
    42c4:	81 e0       	ldi	r24, 0x01	; 1
    42c6:	90 e0       	ldi	r25, 0x00	; 0
    42c8:	9e 83       	std	Y+6, r25	; 0x06
    42ca:	8d 83       	std	Y+5, r24	; 0x05
    42cc:	3f c0       	rjmp	.+126    	; 0x434c <main+0x20a>
	else if (__tmp > 65535)
    42ce:	6f 81       	ldd	r22, Y+7	; 0x07
    42d0:	78 85       	ldd	r23, Y+8	; 0x08
    42d2:	89 85       	ldd	r24, Y+9	; 0x09
    42d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    42d6:	20 e0       	ldi	r18, 0x00	; 0
    42d8:	3f ef       	ldi	r19, 0xFF	; 255
    42da:	4f e7       	ldi	r20, 0x7F	; 127
    42dc:	57 e4       	ldi	r21, 0x47	; 71
    42de:	0e 94 fe 27 	call	0x4ffc	; 0x4ffc <__gtsf2>
    42e2:	18 16       	cp	r1, r24
    42e4:	4c f5       	brge	.+82     	; 0x4338 <main+0x1f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    42e6:	6b 85       	ldd	r22, Y+11	; 0x0b
    42e8:	7c 85       	ldd	r23, Y+12	; 0x0c
    42ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    42ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    42ee:	20 e0       	ldi	r18, 0x00	; 0
    42f0:	30 e0       	ldi	r19, 0x00	; 0
    42f2:	40 e2       	ldi	r20, 0x20	; 32
    42f4:	51 e4       	ldi	r21, 0x41	; 65
    42f6:	0e 94 58 26 	call	0x4cb0	; 0x4cb0 <__mulsf3>
    42fa:	dc 01       	movw	r26, r24
    42fc:	cb 01       	movw	r24, r22
    42fe:	bc 01       	movw	r22, r24
    4300:	cd 01       	movw	r24, r26
    4302:	0e 94 82 24 	call	0x4904	; 0x4904 <__fixunssfsi>
    4306:	dc 01       	movw	r26, r24
    4308:	cb 01       	movw	r24, r22
    430a:	9e 83       	std	Y+6, r25	; 0x06
    430c:	8d 83       	std	Y+5, r24	; 0x05
    430e:	0f c0       	rjmp	.+30     	; 0x432e <main+0x1ec>
    4310:	84 e1       	ldi	r24, 0x14	; 20
    4312:	91 e0       	ldi	r25, 0x01	; 1
    4314:	9c 83       	std	Y+4, r25	; 0x04
    4316:	8b 83       	std	Y+3, r24	; 0x03
    4318:	8b 81       	ldd	r24, Y+3	; 0x03
    431a:	9c 81       	ldd	r25, Y+4	; 0x04
    431c:	01 97       	sbiw	r24, 0x01	; 1
    431e:	f1 f7       	brne	.-4      	; 0x431c <main+0x1da>
    4320:	9c 83       	std	Y+4, r25	; 0x04
    4322:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4324:	8d 81       	ldd	r24, Y+5	; 0x05
    4326:	9e 81       	ldd	r25, Y+6	; 0x06
    4328:	01 97       	sbiw	r24, 0x01	; 1
    432a:	9e 83       	std	Y+6, r25	; 0x06
    432c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    432e:	8d 81       	ldd	r24, Y+5	; 0x05
    4330:	9e 81       	ldd	r25, Y+6	; 0x06
    4332:	00 97       	sbiw	r24, 0x00	; 0
    4334:	69 f7       	brne	.-38     	; 0x4310 <main+0x1ce>
    4336:	14 c0       	rjmp	.+40     	; 0x4360 <main+0x21e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4338:	6f 81       	ldd	r22, Y+7	; 0x07
    433a:	78 85       	ldd	r23, Y+8	; 0x08
    433c:	89 85       	ldd	r24, Y+9	; 0x09
    433e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4340:	0e 94 82 24 	call	0x4904	; 0x4904 <__fixunssfsi>
    4344:	dc 01       	movw	r26, r24
    4346:	cb 01       	movw	r24, r22
    4348:	9e 83       	std	Y+6, r25	; 0x06
    434a:	8d 83       	std	Y+5, r24	; 0x05
    434c:	8d 81       	ldd	r24, Y+5	; 0x05
    434e:	9e 81       	ldd	r25, Y+6	; 0x06
    4350:	9a 83       	std	Y+2, r25	; 0x02
    4352:	89 83       	std	Y+1, r24	; 0x01
    4354:	89 81       	ldd	r24, Y+1	; 0x01
    4356:	9a 81       	ldd	r25, Y+2	; 0x02
    4358:	01 97       	sbiw	r24, 0x01	; 1
    435a:	f1 f7       	brne	.-4      	; 0x4358 <main+0x216>
    435c:	9a 83       	std	Y+2, r25	; 0x02
    435e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2000);


	while(1)
	{
		RIGHT_WHITELINE_VALUE = LIGHT_RIGHT;	//LIGHT_RIGHT is a macro defines in firebird_winavr.h which returns the right whiteline sensor value.
    4360:	81 e0       	ldi	r24, 0x01	; 1
    4362:	0e 94 31 04 	call	0x862	; 0x862 <ADC_Conversion>
    4366:	88 2f       	mov	r24, r24
    4368:	90 e0       	ldi	r25, 0x00	; 0
    436a:	90 93 6c 03 	sts	0x036C, r25
    436e:	80 93 6b 03 	sts	0x036B, r24
		MIDDLE_WHITELINE_VALUE = LIGHT_MIDDLE;	// Similar
    4372:	82 e0       	ldi	r24, 0x02	; 2
    4374:	0e 94 31 04 	call	0x862	; 0x862 <ADC_Conversion>
    4378:	88 2f       	mov	r24, r24
    437a:	90 e0       	ldi	r25, 0x00	; 0
    437c:	90 93 64 03 	sts	0x0364, r25
    4380:	80 93 63 03 	sts	0x0363, r24
		LEFT_WHITELINE_VALUE = LIGHT_LEFT;	// Similar
    4384:	83 e0       	ldi	r24, 0x03	; 3
    4386:	0e 94 31 04 	call	0x862	; 0x862 <ADC_Conversion>
    438a:	88 2f       	mov	r24, r24
    438c:	90 e0       	ldi	r25, 0x00	; 0
    438e:	90 93 6a 03 	sts	0x036A, r25
    4392:	80 93 69 03 	sts	0x0369, r24
	//	FRONT_IR_VALUE = FRONT_IR;		// Similar
			
		FRONT_IR_VALUE = frontDist();
    4396:	0e 94 cc 19 	call	0x3398	; 0x3398 <frontDist>
    439a:	90 93 4a 03 	sts	0x034A, r25
    439e:	80 93 49 03 	sts	0x0349, r24
		

		LCD_DISPLAY_INT_2(FRONT_IR_VALUE);	// Displays IR sensor value on first line of LCD
    43a2:	80 91 49 03 	lds	r24, 0x0349
    43a6:	90 91 4a 03 	lds	r25, 0x034A
    43aa:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <LCD_DISPLAY_INT_2>


		LCD_DISPLAY_INT_1(locations[location_cnt - 1]);
    43ae:	80 91 34 03 	lds	r24, 0x0334
    43b2:	90 91 35 03 	lds	r25, 0x0335
    43b6:	01 97       	sbiw	r24, 0x01	; 1
    43b8:	88 0f       	add	r24, r24
    43ba:	99 1f       	adc	r25, r25
    43bc:	fc 01       	movw	r30, r24
    43be:	e2 5b       	subi	r30, 0xB2	; 178
    43c0:	fc 4f       	sbci	r31, 0xFC	; 252
    43c2:	80 81       	ld	r24, Z
    43c4:	91 81       	ldd	r25, Z+1	; 0x01
    43c6:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <LCD_DISPLAY_INT_1>
		}
		else
		{
			BUZZER_OFF();*/

			if(RIGHT_WHITELINE_VALUE < maxWhite && MIDDLE_WHITELINE_VALUE < maxWhite && LEFT_WHITELINE_VALUE < maxWhite && prevState == 1 && position < locations[locations_scanned])
    43ca:	20 91 6b 03 	lds	r18, 0x036B
    43ce:	30 91 6c 03 	lds	r19, 0x036C
    43d2:	80 91 14 02 	lds	r24, 0x0214
    43d6:	90 91 15 02 	lds	r25, 0x0215
    43da:	28 17       	cp	r18, r24
    43dc:	39 07       	cpc	r19, r25
    43de:	08 f0       	brcs	.+2      	; 0x43e2 <main+0x2a0>
    43e0:	5c c0       	rjmp	.+184    	; 0x449a <main+0x358>
    43e2:	20 91 63 03 	lds	r18, 0x0363
    43e6:	30 91 64 03 	lds	r19, 0x0364
    43ea:	80 91 14 02 	lds	r24, 0x0214
    43ee:	90 91 15 02 	lds	r25, 0x0215
    43f2:	28 17       	cp	r18, r24
    43f4:	39 07       	cpc	r19, r25
    43f6:	08 f0       	brcs	.+2      	; 0x43fa <main+0x2b8>
    43f8:	50 c0       	rjmp	.+160    	; 0x449a <main+0x358>
    43fa:	20 91 69 03 	lds	r18, 0x0369
    43fe:	30 91 6a 03 	lds	r19, 0x036A
    4402:	80 91 14 02 	lds	r24, 0x0214
    4406:	90 91 15 02 	lds	r25, 0x0215
    440a:	28 17       	cp	r18, r24
    440c:	39 07       	cpc	r19, r25
    440e:	08 f0       	brcs	.+2      	; 0x4412 <main+0x2d0>
    4410:	44 c0       	rjmp	.+136    	; 0x449a <main+0x358>
    4412:	80 91 1c 02 	lds	r24, 0x021C
    4416:	90 91 1d 02 	lds	r25, 0x021D
    441a:	81 30       	cpi	r24, 0x01	; 1
    441c:	91 05       	cpc	r25, r1
    441e:	e9 f5       	brne	.+122    	; 0x449a <main+0x358>
    4420:	80 91 36 03 	lds	r24, 0x0336
    4424:	90 91 37 03 	lds	r25, 0x0337
    4428:	88 0f       	add	r24, r24
    442a:	99 1f       	adc	r25, r25
    442c:	fc 01       	movw	r30, r24
    442e:	e2 5b       	subi	r30, 0xB2	; 178
    4430:	fc 4f       	sbci	r31, 0xFC	; 252
    4432:	20 81       	ld	r18, Z
    4434:	31 81       	ldd	r19, Z+1	; 0x01
    4436:	80 91 32 03 	lds	r24, 0x0332
    443a:	90 91 33 03 	lds	r25, 0x0333
    443e:	82 17       	cp	r24, r18
    4440:	93 07       	cpc	r25, r19
    4442:	58 f5       	brcc	.+86     	; 0x449a <main+0x358>
			{
				MOTOR_LEFT_SPEED(fastSpeed);
    4444:	80 91 16 02 	lds	r24, 0x0216
    4448:	90 91 17 02 	lds	r25, 0x0217
    444c:	0e 94 c8 03 	call	0x790	; 0x790 <MOTOR_LEFT_SPEED>
				MOTOR_RIGHT_SPEED(fastSpeed);
    4450:	80 91 16 02 	lds	r24, 0x0216
    4454:	90 91 17 02 	lds	r25, 0x0217
    4458:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <MOTOR_RIGHT_SPEED>
				MOVE_FWD();
    445c:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <MOVE_FWD>
				//LCD_DISPLAY_INT_2(1);
				
				startBlack = 1;
    4460:	81 e0       	ldi	r24, 0x01	; 1
    4462:	90 e0       	ldi	r25, 0x00	; 0
    4464:	90 93 3a 03 	sts	0x033A, r25
    4468:	80 93 39 03 	sts	0x0339, r24
				prevState = 1;
    446c:	81 e0       	ldi	r24, 0x01	; 1
    446e:	90 e0       	ldi	r25, 0x00	; 0
    4470:	90 93 1d 02 	sts	0x021D, r25
    4474:	80 93 1c 02 	sts	0x021C, r24
				prevLeftSpeed = fastSpeed;
    4478:	80 91 16 02 	lds	r24, 0x0216
    447c:	90 91 17 02 	lds	r25, 0x0217
    4480:	90 93 3c 03 	sts	0x033C, r25
    4484:	80 93 3b 03 	sts	0x033B, r24
				prevRightSpeed = fastSpeed;
    4488:	80 91 16 02 	lds	r24, 0x0216
    448c:	90 91 17 02 	lds	r25, 0x0217
    4490:	90 93 3e 03 	sts	0x033E, r25
    4494:	80 93 3d 03 	sts	0x033D, r24
    4498:	63 cf       	rjmp	.-314    	; 0x4360 <main+0x21e>
			}
			else
			{
				if(RIGHT_WHITELINE_VALUE < maxWhite && MIDDLE_WHITELINE_VALUE < maxWhite  && prevState == 1 && position < locations[locations_scanned])
    449a:	20 91 6b 03 	lds	r18, 0x036B
    449e:	30 91 6c 03 	lds	r19, 0x036C
    44a2:	80 91 14 02 	lds	r24, 0x0214
    44a6:	90 91 15 02 	lds	r25, 0x0215
    44aa:	28 17       	cp	r18, r24
    44ac:	39 07       	cpc	r19, r25
    44ae:	08 f0       	brcs	.+2      	; 0x44b2 <main+0x370>
    44b0:	50 c0       	rjmp	.+160    	; 0x4552 <main+0x410>
    44b2:	20 91 63 03 	lds	r18, 0x0363
    44b6:	30 91 64 03 	lds	r19, 0x0364
    44ba:	80 91 14 02 	lds	r24, 0x0214
    44be:	90 91 15 02 	lds	r25, 0x0215
    44c2:	28 17       	cp	r18, r24
    44c4:	39 07       	cpc	r19, r25
    44c6:	08 f0       	brcs	.+2      	; 0x44ca <main+0x388>
    44c8:	44 c0       	rjmp	.+136    	; 0x4552 <main+0x410>
    44ca:	80 91 1c 02 	lds	r24, 0x021C
    44ce:	90 91 1d 02 	lds	r25, 0x021D
    44d2:	81 30       	cpi	r24, 0x01	; 1
    44d4:	91 05       	cpc	r25, r1
    44d6:	e9 f5       	brne	.+122    	; 0x4552 <main+0x410>
    44d8:	80 91 36 03 	lds	r24, 0x0336
    44dc:	90 91 37 03 	lds	r25, 0x0337
    44e0:	88 0f       	add	r24, r24
    44e2:	99 1f       	adc	r25, r25
    44e4:	fc 01       	movw	r30, r24
    44e6:	e2 5b       	subi	r30, 0xB2	; 178
    44e8:	fc 4f       	sbci	r31, 0xFC	; 252
    44ea:	20 81       	ld	r18, Z
    44ec:	31 81       	ldd	r19, Z+1	; 0x01
    44ee:	80 91 32 03 	lds	r24, 0x0332
    44f2:	90 91 33 03 	lds	r25, 0x0333
    44f6:	82 17       	cp	r24, r18
    44f8:	93 07       	cpc	r25, r19
    44fa:	58 f5       	brcc	.+86     	; 0x4552 <main+0x410>
				{
					MOTOR_LEFT_SPEED(fastSpeed);
    44fc:	80 91 16 02 	lds	r24, 0x0216
    4500:	90 91 17 02 	lds	r25, 0x0217
    4504:	0e 94 c8 03 	call	0x790	; 0x790 <MOTOR_LEFT_SPEED>
					MOTOR_RIGHT_SPEED(mediumSpeed);
    4508:	80 91 18 02 	lds	r24, 0x0218
    450c:	90 91 19 02 	lds	r25, 0x0219
    4510:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <MOTOR_RIGHT_SPEED>
					MOVE_FWD();
    4514:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <MOVE_FWD>
					//LCD_DISPLAY_INT_2(2);

					startBlack = 1;
    4518:	81 e0       	ldi	r24, 0x01	; 1
    451a:	90 e0       	ldi	r25, 0x00	; 0
    451c:	90 93 3a 03 	sts	0x033A, r25
    4520:	80 93 39 03 	sts	0x0339, r24
					prevState = 1;
    4524:	81 e0       	ldi	r24, 0x01	; 1
    4526:	90 e0       	ldi	r25, 0x00	; 0
    4528:	90 93 1d 02 	sts	0x021D, r25
    452c:	80 93 1c 02 	sts	0x021C, r24
					prevLeftSpeed = fastSpeed;
    4530:	80 91 16 02 	lds	r24, 0x0216
    4534:	90 91 17 02 	lds	r25, 0x0217
    4538:	90 93 3c 03 	sts	0x033C, r25
    453c:	80 93 3b 03 	sts	0x033B, r24
					prevRightSpeed = mediumSpeed;
    4540:	80 91 18 02 	lds	r24, 0x0218
    4544:	90 91 19 02 	lds	r25, 0x0219
    4548:	90 93 3e 03 	sts	0x033E, r25
    454c:	80 93 3d 03 	sts	0x033D, r24
    4550:	07 cf       	rjmp	.-498    	; 0x4360 <main+0x21e>
				}
				else
				{
					if(MIDDLE_WHITELINE_VALUE < maxWhite && LEFT_WHITELINE_VALUE < maxWhite  && prevState == 1 && position < locations[locations_scanned])
    4552:	20 91 63 03 	lds	r18, 0x0363
    4556:	30 91 64 03 	lds	r19, 0x0364
    455a:	80 91 14 02 	lds	r24, 0x0214
    455e:	90 91 15 02 	lds	r25, 0x0215
    4562:	28 17       	cp	r18, r24
    4564:	39 07       	cpc	r19, r25
    4566:	08 f0       	brcs	.+2      	; 0x456a <main+0x428>
    4568:	50 c0       	rjmp	.+160    	; 0x460a <main+0x4c8>
    456a:	20 91 69 03 	lds	r18, 0x0369
    456e:	30 91 6a 03 	lds	r19, 0x036A
    4572:	80 91 14 02 	lds	r24, 0x0214
    4576:	90 91 15 02 	lds	r25, 0x0215
    457a:	28 17       	cp	r18, r24
    457c:	39 07       	cpc	r19, r25
    457e:	08 f0       	brcs	.+2      	; 0x4582 <main+0x440>
    4580:	44 c0       	rjmp	.+136    	; 0x460a <main+0x4c8>
    4582:	80 91 1c 02 	lds	r24, 0x021C
    4586:	90 91 1d 02 	lds	r25, 0x021D
    458a:	81 30       	cpi	r24, 0x01	; 1
    458c:	91 05       	cpc	r25, r1
    458e:	e9 f5       	brne	.+122    	; 0x460a <main+0x4c8>
    4590:	80 91 36 03 	lds	r24, 0x0336
    4594:	90 91 37 03 	lds	r25, 0x0337
    4598:	88 0f       	add	r24, r24
    459a:	99 1f       	adc	r25, r25
    459c:	fc 01       	movw	r30, r24
    459e:	e2 5b       	subi	r30, 0xB2	; 178
    45a0:	fc 4f       	sbci	r31, 0xFC	; 252
    45a2:	20 81       	ld	r18, Z
    45a4:	31 81       	ldd	r19, Z+1	; 0x01
    45a6:	80 91 32 03 	lds	r24, 0x0332
    45aa:	90 91 33 03 	lds	r25, 0x0333
    45ae:	82 17       	cp	r24, r18
    45b0:	93 07       	cpc	r25, r19
    45b2:	58 f5       	brcc	.+86     	; 0x460a <main+0x4c8>
					{
						MOTOR_LEFT_SPEED(mediumSpeed);
    45b4:	80 91 18 02 	lds	r24, 0x0218
    45b8:	90 91 19 02 	lds	r25, 0x0219
    45bc:	0e 94 c8 03 	call	0x790	; 0x790 <MOTOR_LEFT_SPEED>
						MOTOR_RIGHT_SPEED(fastSpeed);
    45c0:	80 91 16 02 	lds	r24, 0x0216
    45c4:	90 91 17 02 	lds	r25, 0x0217
    45c8:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <MOTOR_RIGHT_SPEED>
						MOVE_FWD();
    45cc:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <MOVE_FWD>
						//LCD_DISPLAY_INT_2(3);

						startBlack = 1;
    45d0:	81 e0       	ldi	r24, 0x01	; 1
    45d2:	90 e0       	ldi	r25, 0x00	; 0
    45d4:	90 93 3a 03 	sts	0x033A, r25
    45d8:	80 93 39 03 	sts	0x0339, r24
						prevState = 1;
    45dc:	81 e0       	ldi	r24, 0x01	; 1
    45de:	90 e0       	ldi	r25, 0x00	; 0
    45e0:	90 93 1d 02 	sts	0x021D, r25
    45e4:	80 93 1c 02 	sts	0x021C, r24
						prevLeftSpeed = mediumSpeed;
    45e8:	80 91 18 02 	lds	r24, 0x0218
    45ec:	90 91 19 02 	lds	r25, 0x0219
    45f0:	90 93 3c 03 	sts	0x033C, r25
    45f4:	80 93 3b 03 	sts	0x033B, r24
						prevRightSpeed = fastSpeed;
    45f8:	80 91 16 02 	lds	r24, 0x0216
    45fc:	90 91 17 02 	lds	r25, 0x0217
    4600:	90 93 3e 03 	sts	0x033E, r25
    4604:	80 93 3d 03 	sts	0x033D, r24
    4608:	ab ce       	rjmp	.-682    	; 0x4360 <main+0x21e>
					}
					else
					{
						if(RIGHT_WHITELINE_VALUE < maxWhite  && prevState == 1 && position < locations[locations_scanned])
    460a:	20 91 6b 03 	lds	r18, 0x036B
    460e:	30 91 6c 03 	lds	r19, 0x036C
    4612:	80 91 14 02 	lds	r24, 0x0214
    4616:	90 91 15 02 	lds	r25, 0x0215
    461a:	28 17       	cp	r18, r24
    461c:	39 07       	cpc	r19, r25
    461e:	08 f0       	brcs	.+2      	; 0x4622 <main+0x4e0>
    4620:	44 c0       	rjmp	.+136    	; 0x46aa <main+0x568>
    4622:	80 91 1c 02 	lds	r24, 0x021C
    4626:	90 91 1d 02 	lds	r25, 0x021D
    462a:	81 30       	cpi	r24, 0x01	; 1
    462c:	91 05       	cpc	r25, r1
    462e:	e9 f5       	brne	.+122    	; 0x46aa <main+0x568>
    4630:	80 91 36 03 	lds	r24, 0x0336
    4634:	90 91 37 03 	lds	r25, 0x0337
    4638:	88 0f       	add	r24, r24
    463a:	99 1f       	adc	r25, r25
    463c:	fc 01       	movw	r30, r24
    463e:	e2 5b       	subi	r30, 0xB2	; 178
    4640:	fc 4f       	sbci	r31, 0xFC	; 252
    4642:	20 81       	ld	r18, Z
    4644:	31 81       	ldd	r19, Z+1	; 0x01
    4646:	80 91 32 03 	lds	r24, 0x0332
    464a:	90 91 33 03 	lds	r25, 0x0333
    464e:	82 17       	cp	r24, r18
    4650:	93 07       	cpc	r25, r19
    4652:	58 f5       	brcc	.+86     	; 0x46aa <main+0x568>
						{
							MOTOR_LEFT_SPEED(fastSpeed);
    4654:	80 91 16 02 	lds	r24, 0x0216
    4658:	90 91 17 02 	lds	r25, 0x0217
    465c:	0e 94 c8 03 	call	0x790	; 0x790 <MOTOR_LEFT_SPEED>
							MOTOR_RIGHT_SPEED(slowSpeed);
    4660:	80 91 1a 02 	lds	r24, 0x021A
    4664:	90 91 1b 02 	lds	r25, 0x021B
    4668:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <MOTOR_RIGHT_SPEED>
							MOVE_FWD();
    466c:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <MOVE_FWD>
							//LCD_DISPLAY_INT_2(4);

							startBlack = 1;
    4670:	81 e0       	ldi	r24, 0x01	; 1
    4672:	90 e0       	ldi	r25, 0x00	; 0
    4674:	90 93 3a 03 	sts	0x033A, r25
    4678:	80 93 39 03 	sts	0x0339, r24
							prevState = 1;
    467c:	81 e0       	ldi	r24, 0x01	; 1
    467e:	90 e0       	ldi	r25, 0x00	; 0
    4680:	90 93 1d 02 	sts	0x021D, r25
    4684:	80 93 1c 02 	sts	0x021C, r24
							prevLeftSpeed = fastSpeed;
    4688:	80 91 16 02 	lds	r24, 0x0216
    468c:	90 91 17 02 	lds	r25, 0x0217
    4690:	90 93 3c 03 	sts	0x033C, r25
    4694:	80 93 3b 03 	sts	0x033B, r24
							prevRightSpeed = slowSpeed;
    4698:	80 91 1a 02 	lds	r24, 0x021A
    469c:	90 91 1b 02 	lds	r25, 0x021B
    46a0:	90 93 3e 03 	sts	0x033E, r25
    46a4:	80 93 3d 03 	sts	0x033D, r24
    46a8:	5b ce       	rjmp	.-842    	; 0x4360 <main+0x21e>
						}
						else
						{
							if(LEFT_WHITELINE_VALUE < maxWhite  && prevState == 1 && position < locations[locations_scanned])/////////new
    46aa:	20 91 69 03 	lds	r18, 0x0369
    46ae:	30 91 6a 03 	lds	r19, 0x036A
    46b2:	80 91 14 02 	lds	r24, 0x0214
    46b6:	90 91 15 02 	lds	r25, 0x0215
    46ba:	28 17       	cp	r18, r24
    46bc:	39 07       	cpc	r19, r25
    46be:	08 f0       	brcs	.+2      	; 0x46c2 <main+0x580>
    46c0:	44 c0       	rjmp	.+136    	; 0x474a <main+0x608>
    46c2:	80 91 1c 02 	lds	r24, 0x021C
    46c6:	90 91 1d 02 	lds	r25, 0x021D
    46ca:	81 30       	cpi	r24, 0x01	; 1
    46cc:	91 05       	cpc	r25, r1
    46ce:	e9 f5       	brne	.+122    	; 0x474a <main+0x608>
    46d0:	80 91 36 03 	lds	r24, 0x0336
    46d4:	90 91 37 03 	lds	r25, 0x0337
    46d8:	88 0f       	add	r24, r24
    46da:	99 1f       	adc	r25, r25
    46dc:	fc 01       	movw	r30, r24
    46de:	e2 5b       	subi	r30, 0xB2	; 178
    46e0:	fc 4f       	sbci	r31, 0xFC	; 252
    46e2:	20 81       	ld	r18, Z
    46e4:	31 81       	ldd	r19, Z+1	; 0x01
    46e6:	80 91 32 03 	lds	r24, 0x0332
    46ea:	90 91 33 03 	lds	r25, 0x0333
    46ee:	82 17       	cp	r24, r18
    46f0:	93 07       	cpc	r25, r19
    46f2:	58 f5       	brcc	.+86     	; 0x474a <main+0x608>
							{
								MOTOR_LEFT_SPEED(slowSpeed);
    46f4:	80 91 1a 02 	lds	r24, 0x021A
    46f8:	90 91 1b 02 	lds	r25, 0x021B
    46fc:	0e 94 c8 03 	call	0x790	; 0x790 <MOTOR_LEFT_SPEED>
								MOTOR_RIGHT_SPEED(fastSpeed);
    4700:	80 91 16 02 	lds	r24, 0x0216
    4704:	90 91 17 02 	lds	r25, 0x0217
    4708:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <MOTOR_RIGHT_SPEED>
								MOVE_FWD();
    470c:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <MOVE_FWD>
								//LCD_DISPLAY_INT_2(5);

								startBlack = 1;
    4710:	81 e0       	ldi	r24, 0x01	; 1
    4712:	90 e0       	ldi	r25, 0x00	; 0
    4714:	90 93 3a 03 	sts	0x033A, r25
    4718:	80 93 39 03 	sts	0x0339, r24
								prevState = 1;
    471c:	81 e0       	ldi	r24, 0x01	; 1
    471e:	90 e0       	ldi	r25, 0x00	; 0
    4720:	90 93 1d 02 	sts	0x021D, r25
    4724:	80 93 1c 02 	sts	0x021C, r24
								prevLeftSpeed = slowSpeed;
    4728:	80 91 1a 02 	lds	r24, 0x021A
    472c:	90 91 1b 02 	lds	r25, 0x021B
    4730:	90 93 3c 03 	sts	0x033C, r25
    4734:	80 93 3b 03 	sts	0x033B, r24
								prevRightSpeed = fastSpeed;
    4738:	80 91 16 02 	lds	r24, 0x0216
    473c:	90 91 17 02 	lds	r25, 0x0217
    4740:	90 93 3e 03 	sts	0x033E, r25
    4744:	80 93 3d 03 	sts	0x033D, r24
    4748:	0b ce       	rjmp	.-1002   	; 0x4360 <main+0x21e>
							}
							else
							{
								if(MIDDLE_WHITELINE_VALUE < maxWhite  && prevState == 1 && position < locations[locations_scanned])
    474a:	20 91 63 03 	lds	r18, 0x0363
    474e:	30 91 64 03 	lds	r19, 0x0364
    4752:	80 91 14 02 	lds	r24, 0x0214
    4756:	90 91 15 02 	lds	r25, 0x0215
    475a:	28 17       	cp	r18, r24
    475c:	39 07       	cpc	r19, r25
    475e:	08 f0       	brcs	.+2      	; 0x4762 <main+0x620>
    4760:	44 c0       	rjmp	.+136    	; 0x47ea <main+0x6a8>
    4762:	80 91 1c 02 	lds	r24, 0x021C
    4766:	90 91 1d 02 	lds	r25, 0x021D
    476a:	81 30       	cpi	r24, 0x01	; 1
    476c:	91 05       	cpc	r25, r1
    476e:	e9 f5       	brne	.+122    	; 0x47ea <main+0x6a8>
    4770:	80 91 36 03 	lds	r24, 0x0336
    4774:	90 91 37 03 	lds	r25, 0x0337
    4778:	88 0f       	add	r24, r24
    477a:	99 1f       	adc	r25, r25
    477c:	fc 01       	movw	r30, r24
    477e:	e2 5b       	subi	r30, 0xB2	; 178
    4780:	fc 4f       	sbci	r31, 0xFC	; 252
    4782:	20 81       	ld	r18, Z
    4784:	31 81       	ldd	r19, Z+1	; 0x01
    4786:	80 91 32 03 	lds	r24, 0x0332
    478a:	90 91 33 03 	lds	r25, 0x0333
    478e:	82 17       	cp	r24, r18
    4790:	93 07       	cpc	r25, r19
    4792:	58 f5       	brcc	.+86     	; 0x47ea <main+0x6a8>
								{
									
									MOTOR_LEFT_SPEED(fastSpeed);
    4794:	80 91 16 02 	lds	r24, 0x0216
    4798:	90 91 17 02 	lds	r25, 0x0217
    479c:	0e 94 c8 03 	call	0x790	; 0x790 <MOTOR_LEFT_SPEED>
									MOTOR_RIGHT_SPEED(fastSpeed);
    47a0:	80 91 16 02 	lds	r24, 0x0216
    47a4:	90 91 17 02 	lds	r25, 0x0217
    47a8:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <MOTOR_RIGHT_SPEED>
									MOVE_FWD();
    47ac:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <MOVE_FWD>
									//LCD_DISPLAY_INT_2(6);

									startBlack = 1;
    47b0:	81 e0       	ldi	r24, 0x01	; 1
    47b2:	90 e0       	ldi	r25, 0x00	; 0
    47b4:	90 93 3a 03 	sts	0x033A, r25
    47b8:	80 93 39 03 	sts	0x0339, r24
									prevState = 1;
    47bc:	81 e0       	ldi	r24, 0x01	; 1
    47be:	90 e0       	ldi	r25, 0x00	; 0
    47c0:	90 93 1d 02 	sts	0x021D, r25
    47c4:	80 93 1c 02 	sts	0x021C, r24
									prevLeftSpeed = fastSpeed;
    47c8:	80 91 16 02 	lds	r24, 0x0216
    47cc:	90 91 17 02 	lds	r25, 0x0217
    47d0:	90 93 3c 03 	sts	0x033C, r25
    47d4:	80 93 3b 03 	sts	0x033B, r24
									prevRightSpeed = fastSpeed;
    47d8:	80 91 16 02 	lds	r24, 0x0216
    47dc:	90 91 17 02 	lds	r25, 0x0217
    47e0:	90 93 3e 03 	sts	0x033E, r25
    47e4:	80 93 3d 03 	sts	0x033D, r24
    47e8:	bb cd       	rjmp	.-1162   	; 0x4360 <main+0x21e>
								}
								else		// Here we need to increment the position counter, capture an image, transmit the image to centralized server along with position counter and move the robot to some precise distance so that it will cross the Black mark and proceed further.
								{
									
									if(startBlack ==1)
    47ea:	80 91 39 03 	lds	r24, 0x0339
    47ee:	90 91 3a 03 	lds	r25, 0x033A
    47f2:	81 30       	cpi	r24, 0x01	; 1
    47f4:	91 05       	cpc	r25, r1
    47f6:	d1 f5       	brne	.+116    	; 0x486c <main+0x72a>
									{
										position++;
    47f8:	80 91 32 03 	lds	r24, 0x0332
    47fc:	90 91 33 03 	lds	r25, 0x0333
    4800:	01 96       	adiw	r24, 0x01	; 1
    4802:	90 93 33 03 	sts	0x0333, r25
    4806:	80 93 32 03 	sts	0x0332, r24
										startBlack = 0;
    480a:	10 92 3a 03 	sts	0x033A, r1
    480e:	10 92 39 03 	sts	0x0339, r1
										completeBlack = 0;
    4812:	10 92 2d 03 	sts	0x032D, r1
    4816:	10 92 2c 03 	sts	0x032C, r1
										
										//start shaft counter by enabling inturupt 4 and 5
										ShaftCountLeft = 0;
    481a:	10 92 29 03 	sts	0x0329, r1
    481e:	10 92 28 03 	sts	0x0328, r1
										ShaftCountRight = 0;
    4822:	10 92 2b 03 	sts	0x032B, r1
    4826:	10 92 2a 03 	sts	0x032A, r1
										if(position == locations[locations_scanned])
    482a:	80 91 36 03 	lds	r24, 0x0336
    482e:	90 91 37 03 	lds	r25, 0x0337
    4832:	88 0f       	add	r24, r24
    4834:	99 1f       	adc	r25, r25
    4836:	fc 01       	movw	r30, r24
    4838:	e2 5b       	subi	r30, 0xB2	; 178
    483a:	fc 4f       	sbci	r31, 0xFC	; 252
    483c:	20 81       	ld	r18, Z
    483e:	31 81       	ldd	r19, Z+1	; 0x01
    4840:	80 91 32 03 	lds	r24, 0x0332
    4844:	90 91 33 03 	lds	r25, 0x0333
    4848:	28 17       	cp	r18, r24
    484a:	39 07       	cpc	r19, r25
    484c:	09 f0       	breq	.+2      	; 0x4850 <main+0x70e>
    484e:	88 cd       	rjmp	.-1264   	; 0x4360 <main+0x21e>
										{
											locations_scanned++;
    4850:	80 91 36 03 	lds	r24, 0x0336
    4854:	90 91 37 03 	lds	r25, 0x0337
    4858:	01 96       	adiw	r24, 0x01	; 1
    485a:	90 93 37 03 	sts	0x0337, r25
    485e:	80 93 36 03 	sts	0x0336, r24
											prevState = 0;	//set prev state to black
    4862:	10 92 1d 02 	sts	0x021D, r1
    4866:	10 92 1c 02 	sts	0x021C, r1
    486a:	7a cd       	rjmp	.-1292   	; 0x4360 <main+0x21e>
										}	
									}
									else if(completeBlack == 1)		//last stop
    486c:	80 91 2c 03 	lds	r24, 0x032C
    4870:	90 91 2d 03 	lds	r25, 0x032D
    4874:	81 30       	cpi	r24, 0x01	; 1
    4876:	91 05       	cpc	r25, r1
    4878:	79 f4       	brne	.+30     	; 0x4898 <main+0x756>
									{
										MOTOR_LEFT_SPEED(0);
    487a:	80 e0       	ldi	r24, 0x00	; 0
    487c:	90 e0       	ldi	r25, 0x00	; 0
    487e:	0e 94 c8 03 	call	0x790	; 0x790 <MOTOR_LEFT_SPEED>
										MOTOR_RIGHT_SPEED(0);
    4882:	80 e0       	ldi	r24, 0x00	; 0
    4884:	90 e0       	ldi	r25, 0x00	; 0
    4886:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <MOTOR_RIGHT_SPEED>
										 
										position = 99;//only for test
    488a:	83 e6       	ldi	r24, 0x63	; 99
    488c:	90 e0       	ldi	r25, 0x00	; 0
    488e:	90 93 33 03 	sts	0x0333, r25
    4892:	80 93 32 03 	sts	0x0332, r24
    4896:	64 cd       	rjmp	.-1336   	; 0x4360 <main+0x21e>
									}
									//if prevstate is black and u detect white line stop
									else if(prevState == 0 && (RIGHT_WHITELINE_VALUE < maxWhite || MIDDLE_WHITELINE_VALUE < maxWhite || LEFT_WHITELINE_VALUE < maxWhite))
    4898:	80 91 1c 02 	lds	r24, 0x021C
    489c:	90 91 1d 02 	lds	r25, 0x021D
    48a0:	00 97       	sbiw	r24, 0x00	; 0
    48a2:	09 f0       	breq	.+2      	; 0x48a6 <main+0x764>
    48a4:	5d cd       	rjmp	.-1350   	; 0x4360 <main+0x21e>
    48a6:	20 91 6b 03 	lds	r18, 0x036B
    48aa:	30 91 6c 03 	lds	r19, 0x036C
    48ae:	80 91 14 02 	lds	r24, 0x0214
    48b2:	90 91 15 02 	lds	r25, 0x0215
    48b6:	28 17       	cp	r18, r24
    48b8:	39 07       	cpc	r19, r25
    48ba:	b8 f0       	brcs	.+46     	; 0x48ea <main+0x7a8>
    48bc:	20 91 63 03 	lds	r18, 0x0363
    48c0:	30 91 64 03 	lds	r19, 0x0364
    48c4:	80 91 14 02 	lds	r24, 0x0214
    48c8:	90 91 15 02 	lds	r25, 0x0215
    48cc:	28 17       	cp	r18, r24
    48ce:	39 07       	cpc	r19, r25
    48d0:	60 f0       	brcs	.+24     	; 0x48ea <main+0x7a8>
    48d2:	20 91 69 03 	lds	r18, 0x0369
    48d6:	30 91 6a 03 	lds	r19, 0x036A
    48da:	80 91 14 02 	lds	r24, 0x0214
    48de:	90 91 15 02 	lds	r25, 0x0215
    48e2:	28 17       	cp	r18, r24
    48e4:	39 07       	cpc	r19, r25
    48e6:	08 f0       	brcs	.+2      	; 0x48ea <main+0x7a8>
    48e8:	3b cd       	rjmp	.-1418   	; 0x4360 <main+0x21e>
									{
										MOTOR_LEFT_SPEED(0);
    48ea:	80 e0       	ldi	r24, 0x00	; 0
    48ec:	90 e0       	ldi	r25, 0x00	; 0
    48ee:	0e 94 c8 03 	call	0x790	; 0x790 <MOTOR_LEFT_SPEED>
										MOTOR_RIGHT_SPEED(0);
    48f2:	80 e0       	ldi	r24, 0x00	; 0
    48f4:	90 e0       	ldi	r25, 0x00	; 0
    48f6:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <MOTOR_RIGHT_SPEED>
										//locations_scanned ++;
										BUZZER_ON();
    48fa:	0e 94 b5 10 	call	0x216a	; 0x216a <BUZZER_ON>
									//	LCD_DISPLAY_INT_2(7);
										CollectFruit();
    48fe:	0e 94 3b 1a 	call	0x3476	; 0x3476 <CollectFruit>
    4902:	2e cd       	rjmp	.-1444   	; 0x4360 <main+0x21e>

00004904 <__fixunssfsi>:
    4904:	ef 92       	push	r14
    4906:	ff 92       	push	r15
    4908:	0f 93       	push	r16
    490a:	1f 93       	push	r17
    490c:	7b 01       	movw	r14, r22
    490e:	8c 01       	movw	r16, r24
    4910:	20 e0       	ldi	r18, 0x00	; 0
    4912:	30 e0       	ldi	r19, 0x00	; 0
    4914:	40 e0       	ldi	r20, 0x00	; 0
    4916:	5f e4       	ldi	r21, 0x4F	; 79
    4918:	0e 94 2e 28 	call	0x505c	; 0x505c <__gesf2>
    491c:	88 23       	and	r24, r24
    491e:	8c f0       	brlt	.+34     	; 0x4942 <__fixunssfsi+0x3e>
    4920:	c8 01       	movw	r24, r16
    4922:	b7 01       	movw	r22, r14
    4924:	20 e0       	ldi	r18, 0x00	; 0
    4926:	30 e0       	ldi	r19, 0x00	; 0
    4928:	40 e0       	ldi	r20, 0x00	; 0
    492a:	5f e4       	ldi	r21, 0x4F	; 79
    492c:	0e 94 fa 25 	call	0x4bf4	; 0x4bf4 <__subsf3>
    4930:	0e 94 ec 28 	call	0x51d8	; 0x51d8 <__fixsfsi>
    4934:	9b 01       	movw	r18, r22
    4936:	ac 01       	movw	r20, r24
    4938:	20 50       	subi	r18, 0x00	; 0
    493a:	30 40       	sbci	r19, 0x00	; 0
    493c:	40 40       	sbci	r20, 0x00	; 0
    493e:	50 48       	sbci	r21, 0x80	; 128
    4940:	06 c0       	rjmp	.+12     	; 0x494e <__fixunssfsi+0x4a>
    4942:	c8 01       	movw	r24, r16
    4944:	b7 01       	movw	r22, r14
    4946:	0e 94 ec 28 	call	0x51d8	; 0x51d8 <__fixsfsi>
    494a:	9b 01       	movw	r18, r22
    494c:	ac 01       	movw	r20, r24
    494e:	b9 01       	movw	r22, r18
    4950:	ca 01       	movw	r24, r20
    4952:	1f 91       	pop	r17
    4954:	0f 91       	pop	r16
    4956:	ff 90       	pop	r15
    4958:	ef 90       	pop	r14
    495a:	08 95       	ret

0000495c <_fpadd_parts>:
    495c:	a0 e0       	ldi	r26, 0x00	; 0
    495e:	b0 e0       	ldi	r27, 0x00	; 0
    4960:	e4 eb       	ldi	r30, 0xB4	; 180
    4962:	f4 e2       	ldi	r31, 0x24	; 36
    4964:	0c 94 de 2b 	jmp	0x57bc	; 0x57bc <__prologue_saves__>
    4968:	dc 01       	movw	r26, r24
    496a:	2b 01       	movw	r4, r22
    496c:	fa 01       	movw	r30, r20
    496e:	9c 91       	ld	r25, X
    4970:	92 30       	cpi	r25, 0x02	; 2
    4972:	08 f4       	brcc	.+2      	; 0x4976 <_fpadd_parts+0x1a>
    4974:	39 c1       	rjmp	.+626    	; 0x4be8 <_fpadd_parts+0x28c>
    4976:	eb 01       	movw	r28, r22
    4978:	88 81       	ld	r24, Y
    497a:	82 30       	cpi	r24, 0x02	; 2
    497c:	08 f4       	brcc	.+2      	; 0x4980 <_fpadd_parts+0x24>
    497e:	33 c1       	rjmp	.+614    	; 0x4be6 <_fpadd_parts+0x28a>
    4980:	94 30       	cpi	r25, 0x04	; 4
    4982:	69 f4       	brne	.+26     	; 0x499e <_fpadd_parts+0x42>
    4984:	84 30       	cpi	r24, 0x04	; 4
    4986:	09 f0       	breq	.+2      	; 0x498a <_fpadd_parts+0x2e>
    4988:	2f c1       	rjmp	.+606    	; 0x4be8 <_fpadd_parts+0x28c>
    498a:	11 96       	adiw	r26, 0x01	; 1
    498c:	9c 91       	ld	r25, X
    498e:	11 97       	sbiw	r26, 0x01	; 1
    4990:	89 81       	ldd	r24, Y+1	; 0x01
    4992:	98 17       	cp	r25, r24
    4994:	09 f4       	brne	.+2      	; 0x4998 <_fpadd_parts+0x3c>
    4996:	28 c1       	rjmp	.+592    	; 0x4be8 <_fpadd_parts+0x28c>
    4998:	a0 e2       	ldi	r26, 0x20	; 32
    499a:	b2 e0       	ldi	r27, 0x02	; 2
    499c:	25 c1       	rjmp	.+586    	; 0x4be8 <_fpadd_parts+0x28c>
    499e:	84 30       	cpi	r24, 0x04	; 4
    49a0:	09 f4       	brne	.+2      	; 0x49a4 <_fpadd_parts+0x48>
    49a2:	21 c1       	rjmp	.+578    	; 0x4be6 <_fpadd_parts+0x28a>
    49a4:	82 30       	cpi	r24, 0x02	; 2
    49a6:	a9 f4       	brne	.+42     	; 0x49d2 <_fpadd_parts+0x76>
    49a8:	92 30       	cpi	r25, 0x02	; 2
    49aa:	09 f0       	breq	.+2      	; 0x49ae <_fpadd_parts+0x52>
    49ac:	1d c1       	rjmp	.+570    	; 0x4be8 <_fpadd_parts+0x28c>
    49ae:	9a 01       	movw	r18, r20
    49b0:	ad 01       	movw	r20, r26
    49b2:	88 e0       	ldi	r24, 0x08	; 8
    49b4:	ea 01       	movw	r28, r20
    49b6:	09 90       	ld	r0, Y+
    49b8:	ae 01       	movw	r20, r28
    49ba:	e9 01       	movw	r28, r18
    49bc:	09 92       	st	Y+, r0
    49be:	9e 01       	movw	r18, r28
    49c0:	81 50       	subi	r24, 0x01	; 1
    49c2:	c1 f7       	brne	.-16     	; 0x49b4 <_fpadd_parts+0x58>
    49c4:	e2 01       	movw	r28, r4
    49c6:	89 81       	ldd	r24, Y+1	; 0x01
    49c8:	11 96       	adiw	r26, 0x01	; 1
    49ca:	9c 91       	ld	r25, X
    49cc:	89 23       	and	r24, r25
    49ce:	81 83       	std	Z+1, r24	; 0x01
    49d0:	08 c1       	rjmp	.+528    	; 0x4be2 <_fpadd_parts+0x286>
    49d2:	92 30       	cpi	r25, 0x02	; 2
    49d4:	09 f4       	brne	.+2      	; 0x49d8 <_fpadd_parts+0x7c>
    49d6:	07 c1       	rjmp	.+526    	; 0x4be6 <_fpadd_parts+0x28a>
    49d8:	12 96       	adiw	r26, 0x02	; 2
    49da:	2d 90       	ld	r2, X+
    49dc:	3c 90       	ld	r3, X
    49de:	13 97       	sbiw	r26, 0x03	; 3
    49e0:	eb 01       	movw	r28, r22
    49e2:	8a 81       	ldd	r24, Y+2	; 0x02
    49e4:	9b 81       	ldd	r25, Y+3	; 0x03
    49e6:	14 96       	adiw	r26, 0x04	; 4
    49e8:	ad 90       	ld	r10, X+
    49ea:	bd 90       	ld	r11, X+
    49ec:	cd 90       	ld	r12, X+
    49ee:	dc 90       	ld	r13, X
    49f0:	17 97       	sbiw	r26, 0x07	; 7
    49f2:	ec 80       	ldd	r14, Y+4	; 0x04
    49f4:	fd 80       	ldd	r15, Y+5	; 0x05
    49f6:	0e 81       	ldd	r16, Y+6	; 0x06
    49f8:	1f 81       	ldd	r17, Y+7	; 0x07
    49fa:	91 01       	movw	r18, r2
    49fc:	28 1b       	sub	r18, r24
    49fe:	39 0b       	sbc	r19, r25
    4a00:	b9 01       	movw	r22, r18
    4a02:	37 ff       	sbrs	r19, 7
    4a04:	04 c0       	rjmp	.+8      	; 0x4a0e <_fpadd_parts+0xb2>
    4a06:	66 27       	eor	r22, r22
    4a08:	77 27       	eor	r23, r23
    4a0a:	62 1b       	sub	r22, r18
    4a0c:	73 0b       	sbc	r23, r19
    4a0e:	60 32       	cpi	r22, 0x20	; 32
    4a10:	71 05       	cpc	r23, r1
    4a12:	0c f0       	brlt	.+2      	; 0x4a16 <_fpadd_parts+0xba>
    4a14:	61 c0       	rjmp	.+194    	; 0x4ad8 <_fpadd_parts+0x17c>
    4a16:	12 16       	cp	r1, r18
    4a18:	13 06       	cpc	r1, r19
    4a1a:	6c f5       	brge	.+90     	; 0x4a76 <_fpadd_parts+0x11a>
    4a1c:	37 01       	movw	r6, r14
    4a1e:	48 01       	movw	r8, r16
    4a20:	06 2e       	mov	r0, r22
    4a22:	04 c0       	rjmp	.+8      	; 0x4a2c <_fpadd_parts+0xd0>
    4a24:	96 94       	lsr	r9
    4a26:	87 94       	ror	r8
    4a28:	77 94       	ror	r7
    4a2a:	67 94       	ror	r6
    4a2c:	0a 94       	dec	r0
    4a2e:	d2 f7       	brpl	.-12     	; 0x4a24 <_fpadd_parts+0xc8>
    4a30:	21 e0       	ldi	r18, 0x01	; 1
    4a32:	30 e0       	ldi	r19, 0x00	; 0
    4a34:	40 e0       	ldi	r20, 0x00	; 0
    4a36:	50 e0       	ldi	r21, 0x00	; 0
    4a38:	04 c0       	rjmp	.+8      	; 0x4a42 <_fpadd_parts+0xe6>
    4a3a:	22 0f       	add	r18, r18
    4a3c:	33 1f       	adc	r19, r19
    4a3e:	44 1f       	adc	r20, r20
    4a40:	55 1f       	adc	r21, r21
    4a42:	6a 95       	dec	r22
    4a44:	d2 f7       	brpl	.-12     	; 0x4a3a <_fpadd_parts+0xde>
    4a46:	21 50       	subi	r18, 0x01	; 1
    4a48:	30 40       	sbci	r19, 0x00	; 0
    4a4a:	40 40       	sbci	r20, 0x00	; 0
    4a4c:	50 40       	sbci	r21, 0x00	; 0
    4a4e:	2e 21       	and	r18, r14
    4a50:	3f 21       	and	r19, r15
    4a52:	40 23       	and	r20, r16
    4a54:	51 23       	and	r21, r17
    4a56:	21 15       	cp	r18, r1
    4a58:	31 05       	cpc	r19, r1
    4a5a:	41 05       	cpc	r20, r1
    4a5c:	51 05       	cpc	r21, r1
    4a5e:	21 f0       	breq	.+8      	; 0x4a68 <_fpadd_parts+0x10c>
    4a60:	21 e0       	ldi	r18, 0x01	; 1
    4a62:	30 e0       	ldi	r19, 0x00	; 0
    4a64:	40 e0       	ldi	r20, 0x00	; 0
    4a66:	50 e0       	ldi	r21, 0x00	; 0
    4a68:	79 01       	movw	r14, r18
    4a6a:	8a 01       	movw	r16, r20
    4a6c:	e6 28       	or	r14, r6
    4a6e:	f7 28       	or	r15, r7
    4a70:	08 29       	or	r16, r8
    4a72:	19 29       	or	r17, r9
    4a74:	3c c0       	rjmp	.+120    	; 0x4aee <_fpadd_parts+0x192>
    4a76:	23 2b       	or	r18, r19
    4a78:	d1 f1       	breq	.+116    	; 0x4aee <_fpadd_parts+0x192>
    4a7a:	26 0e       	add	r2, r22
    4a7c:	37 1e       	adc	r3, r23
    4a7e:	35 01       	movw	r6, r10
    4a80:	46 01       	movw	r8, r12
    4a82:	06 2e       	mov	r0, r22
    4a84:	04 c0       	rjmp	.+8      	; 0x4a8e <_fpadd_parts+0x132>
    4a86:	96 94       	lsr	r9
    4a88:	87 94       	ror	r8
    4a8a:	77 94       	ror	r7
    4a8c:	67 94       	ror	r6
    4a8e:	0a 94       	dec	r0
    4a90:	d2 f7       	brpl	.-12     	; 0x4a86 <_fpadd_parts+0x12a>
    4a92:	21 e0       	ldi	r18, 0x01	; 1
    4a94:	30 e0       	ldi	r19, 0x00	; 0
    4a96:	40 e0       	ldi	r20, 0x00	; 0
    4a98:	50 e0       	ldi	r21, 0x00	; 0
    4a9a:	04 c0       	rjmp	.+8      	; 0x4aa4 <_fpadd_parts+0x148>
    4a9c:	22 0f       	add	r18, r18
    4a9e:	33 1f       	adc	r19, r19
    4aa0:	44 1f       	adc	r20, r20
    4aa2:	55 1f       	adc	r21, r21
    4aa4:	6a 95       	dec	r22
    4aa6:	d2 f7       	brpl	.-12     	; 0x4a9c <_fpadd_parts+0x140>
    4aa8:	21 50       	subi	r18, 0x01	; 1
    4aaa:	30 40       	sbci	r19, 0x00	; 0
    4aac:	40 40       	sbci	r20, 0x00	; 0
    4aae:	50 40       	sbci	r21, 0x00	; 0
    4ab0:	2a 21       	and	r18, r10
    4ab2:	3b 21       	and	r19, r11
    4ab4:	4c 21       	and	r20, r12
    4ab6:	5d 21       	and	r21, r13
    4ab8:	21 15       	cp	r18, r1
    4aba:	31 05       	cpc	r19, r1
    4abc:	41 05       	cpc	r20, r1
    4abe:	51 05       	cpc	r21, r1
    4ac0:	21 f0       	breq	.+8      	; 0x4aca <_fpadd_parts+0x16e>
    4ac2:	21 e0       	ldi	r18, 0x01	; 1
    4ac4:	30 e0       	ldi	r19, 0x00	; 0
    4ac6:	40 e0       	ldi	r20, 0x00	; 0
    4ac8:	50 e0       	ldi	r21, 0x00	; 0
    4aca:	59 01       	movw	r10, r18
    4acc:	6a 01       	movw	r12, r20
    4ace:	a6 28       	or	r10, r6
    4ad0:	b7 28       	or	r11, r7
    4ad2:	c8 28       	or	r12, r8
    4ad4:	d9 28       	or	r13, r9
    4ad6:	0b c0       	rjmp	.+22     	; 0x4aee <_fpadd_parts+0x192>
    4ad8:	82 15       	cp	r24, r2
    4ada:	93 05       	cpc	r25, r3
    4adc:	2c f0       	brlt	.+10     	; 0x4ae8 <_fpadd_parts+0x18c>
    4ade:	1c 01       	movw	r2, r24
    4ae0:	aa 24       	eor	r10, r10
    4ae2:	bb 24       	eor	r11, r11
    4ae4:	65 01       	movw	r12, r10
    4ae6:	03 c0       	rjmp	.+6      	; 0x4aee <_fpadd_parts+0x192>
    4ae8:	ee 24       	eor	r14, r14
    4aea:	ff 24       	eor	r15, r15
    4aec:	87 01       	movw	r16, r14
    4aee:	11 96       	adiw	r26, 0x01	; 1
    4af0:	9c 91       	ld	r25, X
    4af2:	d2 01       	movw	r26, r4
    4af4:	11 96       	adiw	r26, 0x01	; 1
    4af6:	8c 91       	ld	r24, X
    4af8:	98 17       	cp	r25, r24
    4afa:	09 f4       	brne	.+2      	; 0x4afe <_fpadd_parts+0x1a2>
    4afc:	45 c0       	rjmp	.+138    	; 0x4b88 <_fpadd_parts+0x22c>
    4afe:	99 23       	and	r25, r25
    4b00:	39 f0       	breq	.+14     	; 0x4b10 <_fpadd_parts+0x1b4>
    4b02:	a8 01       	movw	r20, r16
    4b04:	97 01       	movw	r18, r14
    4b06:	2a 19       	sub	r18, r10
    4b08:	3b 09       	sbc	r19, r11
    4b0a:	4c 09       	sbc	r20, r12
    4b0c:	5d 09       	sbc	r21, r13
    4b0e:	06 c0       	rjmp	.+12     	; 0x4b1c <_fpadd_parts+0x1c0>
    4b10:	a6 01       	movw	r20, r12
    4b12:	95 01       	movw	r18, r10
    4b14:	2e 19       	sub	r18, r14
    4b16:	3f 09       	sbc	r19, r15
    4b18:	40 0b       	sbc	r20, r16
    4b1a:	51 0b       	sbc	r21, r17
    4b1c:	57 fd       	sbrc	r21, 7
    4b1e:	08 c0       	rjmp	.+16     	; 0x4b30 <_fpadd_parts+0x1d4>
    4b20:	11 82       	std	Z+1, r1	; 0x01
    4b22:	33 82       	std	Z+3, r3	; 0x03
    4b24:	22 82       	std	Z+2, r2	; 0x02
    4b26:	24 83       	std	Z+4, r18	; 0x04
    4b28:	35 83       	std	Z+5, r19	; 0x05
    4b2a:	46 83       	std	Z+6, r20	; 0x06
    4b2c:	57 83       	std	Z+7, r21	; 0x07
    4b2e:	1d c0       	rjmp	.+58     	; 0x4b6a <_fpadd_parts+0x20e>
    4b30:	81 e0       	ldi	r24, 0x01	; 1
    4b32:	81 83       	std	Z+1, r24	; 0x01
    4b34:	33 82       	std	Z+3, r3	; 0x03
    4b36:	22 82       	std	Z+2, r2	; 0x02
    4b38:	88 27       	eor	r24, r24
    4b3a:	99 27       	eor	r25, r25
    4b3c:	dc 01       	movw	r26, r24
    4b3e:	82 1b       	sub	r24, r18
    4b40:	93 0b       	sbc	r25, r19
    4b42:	a4 0b       	sbc	r26, r20
    4b44:	b5 0b       	sbc	r27, r21
    4b46:	84 83       	std	Z+4, r24	; 0x04
    4b48:	95 83       	std	Z+5, r25	; 0x05
    4b4a:	a6 83       	std	Z+6, r26	; 0x06
    4b4c:	b7 83       	std	Z+7, r27	; 0x07
    4b4e:	0d c0       	rjmp	.+26     	; 0x4b6a <_fpadd_parts+0x20e>
    4b50:	22 0f       	add	r18, r18
    4b52:	33 1f       	adc	r19, r19
    4b54:	44 1f       	adc	r20, r20
    4b56:	55 1f       	adc	r21, r21
    4b58:	24 83       	std	Z+4, r18	; 0x04
    4b5a:	35 83       	std	Z+5, r19	; 0x05
    4b5c:	46 83       	std	Z+6, r20	; 0x06
    4b5e:	57 83       	std	Z+7, r21	; 0x07
    4b60:	82 81       	ldd	r24, Z+2	; 0x02
    4b62:	93 81       	ldd	r25, Z+3	; 0x03
    4b64:	01 97       	sbiw	r24, 0x01	; 1
    4b66:	93 83       	std	Z+3, r25	; 0x03
    4b68:	82 83       	std	Z+2, r24	; 0x02
    4b6a:	24 81       	ldd	r18, Z+4	; 0x04
    4b6c:	35 81       	ldd	r19, Z+5	; 0x05
    4b6e:	46 81       	ldd	r20, Z+6	; 0x06
    4b70:	57 81       	ldd	r21, Z+7	; 0x07
    4b72:	da 01       	movw	r26, r20
    4b74:	c9 01       	movw	r24, r18
    4b76:	01 97       	sbiw	r24, 0x01	; 1
    4b78:	a1 09       	sbc	r26, r1
    4b7a:	b1 09       	sbc	r27, r1
    4b7c:	8f 5f       	subi	r24, 0xFF	; 255
    4b7e:	9f 4f       	sbci	r25, 0xFF	; 255
    4b80:	af 4f       	sbci	r26, 0xFF	; 255
    4b82:	bf 43       	sbci	r27, 0x3F	; 63
    4b84:	28 f3       	brcs	.-54     	; 0x4b50 <_fpadd_parts+0x1f4>
    4b86:	0b c0       	rjmp	.+22     	; 0x4b9e <_fpadd_parts+0x242>
    4b88:	91 83       	std	Z+1, r25	; 0x01
    4b8a:	33 82       	std	Z+3, r3	; 0x03
    4b8c:	22 82       	std	Z+2, r2	; 0x02
    4b8e:	ea 0c       	add	r14, r10
    4b90:	fb 1c       	adc	r15, r11
    4b92:	0c 1d       	adc	r16, r12
    4b94:	1d 1d       	adc	r17, r13
    4b96:	e4 82       	std	Z+4, r14	; 0x04
    4b98:	f5 82       	std	Z+5, r15	; 0x05
    4b9a:	06 83       	std	Z+6, r16	; 0x06
    4b9c:	17 83       	std	Z+7, r17	; 0x07
    4b9e:	83 e0       	ldi	r24, 0x03	; 3
    4ba0:	80 83       	st	Z, r24
    4ba2:	24 81       	ldd	r18, Z+4	; 0x04
    4ba4:	35 81       	ldd	r19, Z+5	; 0x05
    4ba6:	46 81       	ldd	r20, Z+6	; 0x06
    4ba8:	57 81       	ldd	r21, Z+7	; 0x07
    4baa:	57 ff       	sbrs	r21, 7
    4bac:	1a c0       	rjmp	.+52     	; 0x4be2 <_fpadd_parts+0x286>
    4bae:	c9 01       	movw	r24, r18
    4bb0:	aa 27       	eor	r26, r26
    4bb2:	97 fd       	sbrc	r25, 7
    4bb4:	a0 95       	com	r26
    4bb6:	ba 2f       	mov	r27, r26
    4bb8:	81 70       	andi	r24, 0x01	; 1
    4bba:	90 70       	andi	r25, 0x00	; 0
    4bbc:	a0 70       	andi	r26, 0x00	; 0
    4bbe:	b0 70       	andi	r27, 0x00	; 0
    4bc0:	56 95       	lsr	r21
    4bc2:	47 95       	ror	r20
    4bc4:	37 95       	ror	r19
    4bc6:	27 95       	ror	r18
    4bc8:	82 2b       	or	r24, r18
    4bca:	93 2b       	or	r25, r19
    4bcc:	a4 2b       	or	r26, r20
    4bce:	b5 2b       	or	r27, r21
    4bd0:	84 83       	std	Z+4, r24	; 0x04
    4bd2:	95 83       	std	Z+5, r25	; 0x05
    4bd4:	a6 83       	std	Z+6, r26	; 0x06
    4bd6:	b7 83       	std	Z+7, r27	; 0x07
    4bd8:	82 81       	ldd	r24, Z+2	; 0x02
    4bda:	93 81       	ldd	r25, Z+3	; 0x03
    4bdc:	01 96       	adiw	r24, 0x01	; 1
    4bde:	93 83       	std	Z+3, r25	; 0x03
    4be0:	82 83       	std	Z+2, r24	; 0x02
    4be2:	df 01       	movw	r26, r30
    4be4:	01 c0       	rjmp	.+2      	; 0x4be8 <_fpadd_parts+0x28c>
    4be6:	d2 01       	movw	r26, r4
    4be8:	cd 01       	movw	r24, r26
    4bea:	cd b7       	in	r28, 0x3d	; 61
    4bec:	de b7       	in	r29, 0x3e	; 62
    4bee:	e2 e1       	ldi	r30, 0x12	; 18
    4bf0:	0c 94 fa 2b 	jmp	0x57f4	; 0x57f4 <__epilogue_restores__>

00004bf4 <__subsf3>:
    4bf4:	a0 e2       	ldi	r26, 0x20	; 32
    4bf6:	b0 e0       	ldi	r27, 0x00	; 0
    4bf8:	e0 e0       	ldi	r30, 0x00	; 0
    4bfa:	f6 e2       	ldi	r31, 0x26	; 38
    4bfc:	0c 94 ea 2b 	jmp	0x57d4	; 0x57d4 <__prologue_saves__+0x18>
    4c00:	69 83       	std	Y+1, r22	; 0x01
    4c02:	7a 83       	std	Y+2, r23	; 0x02
    4c04:	8b 83       	std	Y+3, r24	; 0x03
    4c06:	9c 83       	std	Y+4, r25	; 0x04
    4c08:	2d 83       	std	Y+5, r18	; 0x05
    4c0a:	3e 83       	std	Y+6, r19	; 0x06
    4c0c:	4f 83       	std	Y+7, r20	; 0x07
    4c0e:	58 87       	std	Y+8, r21	; 0x08
    4c10:	e9 e0       	ldi	r30, 0x09	; 9
    4c12:	ee 2e       	mov	r14, r30
    4c14:	f1 2c       	mov	r15, r1
    4c16:	ec 0e       	add	r14, r28
    4c18:	fd 1e       	adc	r15, r29
    4c1a:	ce 01       	movw	r24, r28
    4c1c:	01 96       	adiw	r24, 0x01	; 1
    4c1e:	b7 01       	movw	r22, r14
    4c20:	0e 94 dd 2a 	call	0x55ba	; 0x55ba <__unpack_f>
    4c24:	8e 01       	movw	r16, r28
    4c26:	0f 5e       	subi	r16, 0xEF	; 239
    4c28:	1f 4f       	sbci	r17, 0xFF	; 255
    4c2a:	ce 01       	movw	r24, r28
    4c2c:	05 96       	adiw	r24, 0x05	; 5
    4c2e:	b8 01       	movw	r22, r16
    4c30:	0e 94 dd 2a 	call	0x55ba	; 0x55ba <__unpack_f>
    4c34:	8a 89       	ldd	r24, Y+18	; 0x12
    4c36:	91 e0       	ldi	r25, 0x01	; 1
    4c38:	89 27       	eor	r24, r25
    4c3a:	8a 8b       	std	Y+18, r24	; 0x12
    4c3c:	c7 01       	movw	r24, r14
    4c3e:	b8 01       	movw	r22, r16
    4c40:	ae 01       	movw	r20, r28
    4c42:	47 5e       	subi	r20, 0xE7	; 231
    4c44:	5f 4f       	sbci	r21, 0xFF	; 255
    4c46:	0e 94 ae 24 	call	0x495c	; 0x495c <_fpadd_parts>
    4c4a:	0e 94 08 2a 	call	0x5410	; 0x5410 <__pack_f>
    4c4e:	a0 96       	adiw	r28, 0x20	; 32
    4c50:	e6 e0       	ldi	r30, 0x06	; 6
    4c52:	0c 94 06 2c 	jmp	0x580c	; 0x580c <__epilogue_restores__+0x18>

00004c56 <__addsf3>:
    4c56:	a0 e2       	ldi	r26, 0x20	; 32
    4c58:	b0 e0       	ldi	r27, 0x00	; 0
    4c5a:	e1 e3       	ldi	r30, 0x31	; 49
    4c5c:	f6 e2       	ldi	r31, 0x26	; 38
    4c5e:	0c 94 ea 2b 	jmp	0x57d4	; 0x57d4 <__prologue_saves__+0x18>
    4c62:	69 83       	std	Y+1, r22	; 0x01
    4c64:	7a 83       	std	Y+2, r23	; 0x02
    4c66:	8b 83       	std	Y+3, r24	; 0x03
    4c68:	9c 83       	std	Y+4, r25	; 0x04
    4c6a:	2d 83       	std	Y+5, r18	; 0x05
    4c6c:	3e 83       	std	Y+6, r19	; 0x06
    4c6e:	4f 83       	std	Y+7, r20	; 0x07
    4c70:	58 87       	std	Y+8, r21	; 0x08
    4c72:	f9 e0       	ldi	r31, 0x09	; 9
    4c74:	ef 2e       	mov	r14, r31
    4c76:	f1 2c       	mov	r15, r1
    4c78:	ec 0e       	add	r14, r28
    4c7a:	fd 1e       	adc	r15, r29
    4c7c:	ce 01       	movw	r24, r28
    4c7e:	01 96       	adiw	r24, 0x01	; 1
    4c80:	b7 01       	movw	r22, r14
    4c82:	0e 94 dd 2a 	call	0x55ba	; 0x55ba <__unpack_f>
    4c86:	8e 01       	movw	r16, r28
    4c88:	0f 5e       	subi	r16, 0xEF	; 239
    4c8a:	1f 4f       	sbci	r17, 0xFF	; 255
    4c8c:	ce 01       	movw	r24, r28
    4c8e:	05 96       	adiw	r24, 0x05	; 5
    4c90:	b8 01       	movw	r22, r16
    4c92:	0e 94 dd 2a 	call	0x55ba	; 0x55ba <__unpack_f>
    4c96:	c7 01       	movw	r24, r14
    4c98:	b8 01       	movw	r22, r16
    4c9a:	ae 01       	movw	r20, r28
    4c9c:	47 5e       	subi	r20, 0xE7	; 231
    4c9e:	5f 4f       	sbci	r21, 0xFF	; 255
    4ca0:	0e 94 ae 24 	call	0x495c	; 0x495c <_fpadd_parts>
    4ca4:	0e 94 08 2a 	call	0x5410	; 0x5410 <__pack_f>
    4ca8:	a0 96       	adiw	r28, 0x20	; 32
    4caa:	e6 e0       	ldi	r30, 0x06	; 6
    4cac:	0c 94 06 2c 	jmp	0x580c	; 0x580c <__epilogue_restores__+0x18>

00004cb0 <__mulsf3>:
    4cb0:	a0 e2       	ldi	r26, 0x20	; 32
    4cb2:	b0 e0       	ldi	r27, 0x00	; 0
    4cb4:	ee e5       	ldi	r30, 0x5E	; 94
    4cb6:	f6 e2       	ldi	r31, 0x26	; 38
    4cb8:	0c 94 de 2b 	jmp	0x57bc	; 0x57bc <__prologue_saves__>
    4cbc:	69 83       	std	Y+1, r22	; 0x01
    4cbe:	7a 83       	std	Y+2, r23	; 0x02
    4cc0:	8b 83       	std	Y+3, r24	; 0x03
    4cc2:	9c 83       	std	Y+4, r25	; 0x04
    4cc4:	2d 83       	std	Y+5, r18	; 0x05
    4cc6:	3e 83       	std	Y+6, r19	; 0x06
    4cc8:	4f 83       	std	Y+7, r20	; 0x07
    4cca:	58 87       	std	Y+8, r21	; 0x08
    4ccc:	ce 01       	movw	r24, r28
    4cce:	01 96       	adiw	r24, 0x01	; 1
    4cd0:	be 01       	movw	r22, r28
    4cd2:	67 5f       	subi	r22, 0xF7	; 247
    4cd4:	7f 4f       	sbci	r23, 0xFF	; 255
    4cd6:	0e 94 dd 2a 	call	0x55ba	; 0x55ba <__unpack_f>
    4cda:	ce 01       	movw	r24, r28
    4cdc:	05 96       	adiw	r24, 0x05	; 5
    4cde:	be 01       	movw	r22, r28
    4ce0:	6f 5e       	subi	r22, 0xEF	; 239
    4ce2:	7f 4f       	sbci	r23, 0xFF	; 255
    4ce4:	0e 94 dd 2a 	call	0x55ba	; 0x55ba <__unpack_f>
    4ce8:	99 85       	ldd	r25, Y+9	; 0x09
    4cea:	92 30       	cpi	r25, 0x02	; 2
    4cec:	88 f0       	brcs	.+34     	; 0x4d10 <__mulsf3+0x60>
    4cee:	89 89       	ldd	r24, Y+17	; 0x11
    4cf0:	82 30       	cpi	r24, 0x02	; 2
    4cf2:	c8 f0       	brcs	.+50     	; 0x4d26 <__mulsf3+0x76>
    4cf4:	94 30       	cpi	r25, 0x04	; 4
    4cf6:	19 f4       	brne	.+6      	; 0x4cfe <__mulsf3+0x4e>
    4cf8:	82 30       	cpi	r24, 0x02	; 2
    4cfa:	51 f4       	brne	.+20     	; 0x4d10 <__mulsf3+0x60>
    4cfc:	04 c0       	rjmp	.+8      	; 0x4d06 <__mulsf3+0x56>
    4cfe:	84 30       	cpi	r24, 0x04	; 4
    4d00:	29 f4       	brne	.+10     	; 0x4d0c <__mulsf3+0x5c>
    4d02:	92 30       	cpi	r25, 0x02	; 2
    4d04:	81 f4       	brne	.+32     	; 0x4d26 <__mulsf3+0x76>
    4d06:	80 e2       	ldi	r24, 0x20	; 32
    4d08:	92 e0       	ldi	r25, 0x02	; 2
    4d0a:	c6 c0       	rjmp	.+396    	; 0x4e98 <__mulsf3+0x1e8>
    4d0c:	92 30       	cpi	r25, 0x02	; 2
    4d0e:	49 f4       	brne	.+18     	; 0x4d22 <__mulsf3+0x72>
    4d10:	20 e0       	ldi	r18, 0x00	; 0
    4d12:	9a 85       	ldd	r25, Y+10	; 0x0a
    4d14:	8a 89       	ldd	r24, Y+18	; 0x12
    4d16:	98 13       	cpse	r25, r24
    4d18:	21 e0       	ldi	r18, 0x01	; 1
    4d1a:	2a 87       	std	Y+10, r18	; 0x0a
    4d1c:	ce 01       	movw	r24, r28
    4d1e:	09 96       	adiw	r24, 0x09	; 9
    4d20:	bb c0       	rjmp	.+374    	; 0x4e98 <__mulsf3+0x1e8>
    4d22:	82 30       	cpi	r24, 0x02	; 2
    4d24:	49 f4       	brne	.+18     	; 0x4d38 <__mulsf3+0x88>
    4d26:	20 e0       	ldi	r18, 0x00	; 0
    4d28:	9a 85       	ldd	r25, Y+10	; 0x0a
    4d2a:	8a 89       	ldd	r24, Y+18	; 0x12
    4d2c:	98 13       	cpse	r25, r24
    4d2e:	21 e0       	ldi	r18, 0x01	; 1
    4d30:	2a 8b       	std	Y+18, r18	; 0x12
    4d32:	ce 01       	movw	r24, r28
    4d34:	41 96       	adiw	r24, 0x11	; 17
    4d36:	b0 c0       	rjmp	.+352    	; 0x4e98 <__mulsf3+0x1e8>
    4d38:	2d 84       	ldd	r2, Y+13	; 0x0d
    4d3a:	3e 84       	ldd	r3, Y+14	; 0x0e
    4d3c:	4f 84       	ldd	r4, Y+15	; 0x0f
    4d3e:	58 88       	ldd	r5, Y+16	; 0x10
    4d40:	6d 88       	ldd	r6, Y+21	; 0x15
    4d42:	7e 88       	ldd	r7, Y+22	; 0x16
    4d44:	8f 88       	ldd	r8, Y+23	; 0x17
    4d46:	98 8c       	ldd	r9, Y+24	; 0x18
    4d48:	ee 24       	eor	r14, r14
    4d4a:	ff 24       	eor	r15, r15
    4d4c:	87 01       	movw	r16, r14
    4d4e:	aa 24       	eor	r10, r10
    4d50:	bb 24       	eor	r11, r11
    4d52:	65 01       	movw	r12, r10
    4d54:	40 e0       	ldi	r20, 0x00	; 0
    4d56:	50 e0       	ldi	r21, 0x00	; 0
    4d58:	60 e0       	ldi	r22, 0x00	; 0
    4d5a:	70 e0       	ldi	r23, 0x00	; 0
    4d5c:	e0 e0       	ldi	r30, 0x00	; 0
    4d5e:	f0 e0       	ldi	r31, 0x00	; 0
    4d60:	c1 01       	movw	r24, r2
    4d62:	81 70       	andi	r24, 0x01	; 1
    4d64:	90 70       	andi	r25, 0x00	; 0
    4d66:	89 2b       	or	r24, r25
    4d68:	e9 f0       	breq	.+58     	; 0x4da4 <__mulsf3+0xf4>
    4d6a:	e6 0c       	add	r14, r6
    4d6c:	f7 1c       	adc	r15, r7
    4d6e:	08 1d       	adc	r16, r8
    4d70:	19 1d       	adc	r17, r9
    4d72:	9a 01       	movw	r18, r20
    4d74:	ab 01       	movw	r20, r22
    4d76:	2a 0d       	add	r18, r10
    4d78:	3b 1d       	adc	r19, r11
    4d7a:	4c 1d       	adc	r20, r12
    4d7c:	5d 1d       	adc	r21, r13
    4d7e:	80 e0       	ldi	r24, 0x00	; 0
    4d80:	90 e0       	ldi	r25, 0x00	; 0
    4d82:	a0 e0       	ldi	r26, 0x00	; 0
    4d84:	b0 e0       	ldi	r27, 0x00	; 0
    4d86:	e6 14       	cp	r14, r6
    4d88:	f7 04       	cpc	r15, r7
    4d8a:	08 05       	cpc	r16, r8
    4d8c:	19 05       	cpc	r17, r9
    4d8e:	20 f4       	brcc	.+8      	; 0x4d98 <__mulsf3+0xe8>
    4d90:	81 e0       	ldi	r24, 0x01	; 1
    4d92:	90 e0       	ldi	r25, 0x00	; 0
    4d94:	a0 e0       	ldi	r26, 0x00	; 0
    4d96:	b0 e0       	ldi	r27, 0x00	; 0
    4d98:	ba 01       	movw	r22, r20
    4d9a:	a9 01       	movw	r20, r18
    4d9c:	48 0f       	add	r20, r24
    4d9e:	59 1f       	adc	r21, r25
    4da0:	6a 1f       	adc	r22, r26
    4da2:	7b 1f       	adc	r23, r27
    4da4:	aa 0c       	add	r10, r10
    4da6:	bb 1c       	adc	r11, r11
    4da8:	cc 1c       	adc	r12, r12
    4daa:	dd 1c       	adc	r13, r13
    4dac:	97 fe       	sbrs	r9, 7
    4dae:	08 c0       	rjmp	.+16     	; 0x4dc0 <__mulsf3+0x110>
    4db0:	81 e0       	ldi	r24, 0x01	; 1
    4db2:	90 e0       	ldi	r25, 0x00	; 0
    4db4:	a0 e0       	ldi	r26, 0x00	; 0
    4db6:	b0 e0       	ldi	r27, 0x00	; 0
    4db8:	a8 2a       	or	r10, r24
    4dba:	b9 2a       	or	r11, r25
    4dbc:	ca 2a       	or	r12, r26
    4dbe:	db 2a       	or	r13, r27
    4dc0:	31 96       	adiw	r30, 0x01	; 1
    4dc2:	e0 32       	cpi	r30, 0x20	; 32
    4dc4:	f1 05       	cpc	r31, r1
    4dc6:	49 f0       	breq	.+18     	; 0x4dda <__mulsf3+0x12a>
    4dc8:	66 0c       	add	r6, r6
    4dca:	77 1c       	adc	r7, r7
    4dcc:	88 1c       	adc	r8, r8
    4dce:	99 1c       	adc	r9, r9
    4dd0:	56 94       	lsr	r5
    4dd2:	47 94       	ror	r4
    4dd4:	37 94       	ror	r3
    4dd6:	27 94       	ror	r2
    4dd8:	c3 cf       	rjmp	.-122    	; 0x4d60 <__mulsf3+0xb0>
    4dda:	fa 85       	ldd	r31, Y+10	; 0x0a
    4ddc:	ea 89       	ldd	r30, Y+18	; 0x12
    4dde:	2b 89       	ldd	r18, Y+19	; 0x13
    4de0:	3c 89       	ldd	r19, Y+20	; 0x14
    4de2:	8b 85       	ldd	r24, Y+11	; 0x0b
    4de4:	9c 85       	ldd	r25, Y+12	; 0x0c
    4de6:	28 0f       	add	r18, r24
    4de8:	39 1f       	adc	r19, r25
    4dea:	2e 5f       	subi	r18, 0xFE	; 254
    4dec:	3f 4f       	sbci	r19, 0xFF	; 255
    4dee:	17 c0       	rjmp	.+46     	; 0x4e1e <__mulsf3+0x16e>
    4df0:	ca 01       	movw	r24, r20
    4df2:	81 70       	andi	r24, 0x01	; 1
    4df4:	90 70       	andi	r25, 0x00	; 0
    4df6:	89 2b       	or	r24, r25
    4df8:	61 f0       	breq	.+24     	; 0x4e12 <__mulsf3+0x162>
    4dfa:	16 95       	lsr	r17
    4dfc:	07 95       	ror	r16
    4dfe:	f7 94       	ror	r15
    4e00:	e7 94       	ror	r14
    4e02:	80 e0       	ldi	r24, 0x00	; 0
    4e04:	90 e0       	ldi	r25, 0x00	; 0
    4e06:	a0 e0       	ldi	r26, 0x00	; 0
    4e08:	b0 e8       	ldi	r27, 0x80	; 128
    4e0a:	e8 2a       	or	r14, r24
    4e0c:	f9 2a       	or	r15, r25
    4e0e:	0a 2b       	or	r16, r26
    4e10:	1b 2b       	or	r17, r27
    4e12:	76 95       	lsr	r23
    4e14:	67 95       	ror	r22
    4e16:	57 95       	ror	r21
    4e18:	47 95       	ror	r20
    4e1a:	2f 5f       	subi	r18, 0xFF	; 255
    4e1c:	3f 4f       	sbci	r19, 0xFF	; 255
    4e1e:	77 fd       	sbrc	r23, 7
    4e20:	e7 cf       	rjmp	.-50     	; 0x4df0 <__mulsf3+0x140>
    4e22:	0c c0       	rjmp	.+24     	; 0x4e3c <__mulsf3+0x18c>
    4e24:	44 0f       	add	r20, r20
    4e26:	55 1f       	adc	r21, r21
    4e28:	66 1f       	adc	r22, r22
    4e2a:	77 1f       	adc	r23, r23
    4e2c:	17 fd       	sbrc	r17, 7
    4e2e:	41 60       	ori	r20, 0x01	; 1
    4e30:	ee 0c       	add	r14, r14
    4e32:	ff 1c       	adc	r15, r15
    4e34:	00 1f       	adc	r16, r16
    4e36:	11 1f       	adc	r17, r17
    4e38:	21 50       	subi	r18, 0x01	; 1
    4e3a:	30 40       	sbci	r19, 0x00	; 0
    4e3c:	40 30       	cpi	r20, 0x00	; 0
    4e3e:	90 e0       	ldi	r25, 0x00	; 0
    4e40:	59 07       	cpc	r21, r25
    4e42:	90 e0       	ldi	r25, 0x00	; 0
    4e44:	69 07       	cpc	r22, r25
    4e46:	90 e4       	ldi	r25, 0x40	; 64
    4e48:	79 07       	cpc	r23, r25
    4e4a:	60 f3       	brcs	.-40     	; 0x4e24 <__mulsf3+0x174>
    4e4c:	2b 8f       	std	Y+27, r18	; 0x1b
    4e4e:	3c 8f       	std	Y+28, r19	; 0x1c
    4e50:	db 01       	movw	r26, r22
    4e52:	ca 01       	movw	r24, r20
    4e54:	8f 77       	andi	r24, 0x7F	; 127
    4e56:	90 70       	andi	r25, 0x00	; 0
    4e58:	a0 70       	andi	r26, 0x00	; 0
    4e5a:	b0 70       	andi	r27, 0x00	; 0
    4e5c:	80 34       	cpi	r24, 0x40	; 64
    4e5e:	91 05       	cpc	r25, r1
    4e60:	a1 05       	cpc	r26, r1
    4e62:	b1 05       	cpc	r27, r1
    4e64:	61 f4       	brne	.+24     	; 0x4e7e <__mulsf3+0x1ce>
    4e66:	47 fd       	sbrc	r20, 7
    4e68:	0a c0       	rjmp	.+20     	; 0x4e7e <__mulsf3+0x1ce>
    4e6a:	e1 14       	cp	r14, r1
    4e6c:	f1 04       	cpc	r15, r1
    4e6e:	01 05       	cpc	r16, r1
    4e70:	11 05       	cpc	r17, r1
    4e72:	29 f0       	breq	.+10     	; 0x4e7e <__mulsf3+0x1ce>
    4e74:	40 5c       	subi	r20, 0xC0	; 192
    4e76:	5f 4f       	sbci	r21, 0xFF	; 255
    4e78:	6f 4f       	sbci	r22, 0xFF	; 255
    4e7a:	7f 4f       	sbci	r23, 0xFF	; 255
    4e7c:	40 78       	andi	r20, 0x80	; 128
    4e7e:	1a 8e       	std	Y+26, r1	; 0x1a
    4e80:	fe 17       	cp	r31, r30
    4e82:	11 f0       	breq	.+4      	; 0x4e88 <__mulsf3+0x1d8>
    4e84:	81 e0       	ldi	r24, 0x01	; 1
    4e86:	8a 8f       	std	Y+26, r24	; 0x1a
    4e88:	4d 8f       	std	Y+29, r20	; 0x1d
    4e8a:	5e 8f       	std	Y+30, r21	; 0x1e
    4e8c:	6f 8f       	std	Y+31, r22	; 0x1f
    4e8e:	78 a3       	std	Y+32, r23	; 0x20
    4e90:	83 e0       	ldi	r24, 0x03	; 3
    4e92:	89 8f       	std	Y+25, r24	; 0x19
    4e94:	ce 01       	movw	r24, r28
    4e96:	49 96       	adiw	r24, 0x19	; 25
    4e98:	0e 94 08 2a 	call	0x5410	; 0x5410 <__pack_f>
    4e9c:	a0 96       	adiw	r28, 0x20	; 32
    4e9e:	e2 e1       	ldi	r30, 0x12	; 18
    4ea0:	0c 94 fa 2b 	jmp	0x57f4	; 0x57f4 <__epilogue_restores__>

00004ea4 <__divsf3>:
    4ea4:	a8 e1       	ldi	r26, 0x18	; 24
    4ea6:	b0 e0       	ldi	r27, 0x00	; 0
    4ea8:	e8 e5       	ldi	r30, 0x58	; 88
    4eaa:	f7 e2       	ldi	r31, 0x27	; 39
    4eac:	0c 94 e6 2b 	jmp	0x57cc	; 0x57cc <__prologue_saves__+0x10>
    4eb0:	69 83       	std	Y+1, r22	; 0x01
    4eb2:	7a 83       	std	Y+2, r23	; 0x02
    4eb4:	8b 83       	std	Y+3, r24	; 0x03
    4eb6:	9c 83       	std	Y+4, r25	; 0x04
    4eb8:	2d 83       	std	Y+5, r18	; 0x05
    4eba:	3e 83       	std	Y+6, r19	; 0x06
    4ebc:	4f 83       	std	Y+7, r20	; 0x07
    4ebe:	58 87       	std	Y+8, r21	; 0x08
    4ec0:	b9 e0       	ldi	r27, 0x09	; 9
    4ec2:	eb 2e       	mov	r14, r27
    4ec4:	f1 2c       	mov	r15, r1
    4ec6:	ec 0e       	add	r14, r28
    4ec8:	fd 1e       	adc	r15, r29
    4eca:	ce 01       	movw	r24, r28
    4ecc:	01 96       	adiw	r24, 0x01	; 1
    4ece:	b7 01       	movw	r22, r14
    4ed0:	0e 94 dd 2a 	call	0x55ba	; 0x55ba <__unpack_f>
    4ed4:	8e 01       	movw	r16, r28
    4ed6:	0f 5e       	subi	r16, 0xEF	; 239
    4ed8:	1f 4f       	sbci	r17, 0xFF	; 255
    4eda:	ce 01       	movw	r24, r28
    4edc:	05 96       	adiw	r24, 0x05	; 5
    4ede:	b8 01       	movw	r22, r16
    4ee0:	0e 94 dd 2a 	call	0x55ba	; 0x55ba <__unpack_f>
    4ee4:	29 85       	ldd	r18, Y+9	; 0x09
    4ee6:	22 30       	cpi	r18, 0x02	; 2
    4ee8:	08 f4       	brcc	.+2      	; 0x4eec <__divsf3+0x48>
    4eea:	7e c0       	rjmp	.+252    	; 0x4fe8 <__divsf3+0x144>
    4eec:	39 89       	ldd	r19, Y+17	; 0x11
    4eee:	32 30       	cpi	r19, 0x02	; 2
    4ef0:	10 f4       	brcc	.+4      	; 0x4ef6 <__divsf3+0x52>
    4ef2:	b8 01       	movw	r22, r16
    4ef4:	7c c0       	rjmp	.+248    	; 0x4fee <__divsf3+0x14a>
    4ef6:	8a 85       	ldd	r24, Y+10	; 0x0a
    4ef8:	9a 89       	ldd	r25, Y+18	; 0x12
    4efa:	89 27       	eor	r24, r25
    4efc:	8a 87       	std	Y+10, r24	; 0x0a
    4efe:	24 30       	cpi	r18, 0x04	; 4
    4f00:	11 f0       	breq	.+4      	; 0x4f06 <__divsf3+0x62>
    4f02:	22 30       	cpi	r18, 0x02	; 2
    4f04:	31 f4       	brne	.+12     	; 0x4f12 <__divsf3+0x6e>
    4f06:	23 17       	cp	r18, r19
    4f08:	09 f0       	breq	.+2      	; 0x4f0c <__divsf3+0x68>
    4f0a:	6e c0       	rjmp	.+220    	; 0x4fe8 <__divsf3+0x144>
    4f0c:	60 e2       	ldi	r22, 0x20	; 32
    4f0e:	72 e0       	ldi	r23, 0x02	; 2
    4f10:	6e c0       	rjmp	.+220    	; 0x4fee <__divsf3+0x14a>
    4f12:	34 30       	cpi	r19, 0x04	; 4
    4f14:	39 f4       	brne	.+14     	; 0x4f24 <__divsf3+0x80>
    4f16:	1d 86       	std	Y+13, r1	; 0x0d
    4f18:	1e 86       	std	Y+14, r1	; 0x0e
    4f1a:	1f 86       	std	Y+15, r1	; 0x0f
    4f1c:	18 8a       	std	Y+16, r1	; 0x10
    4f1e:	1c 86       	std	Y+12, r1	; 0x0c
    4f20:	1b 86       	std	Y+11, r1	; 0x0b
    4f22:	04 c0       	rjmp	.+8      	; 0x4f2c <__divsf3+0x88>
    4f24:	32 30       	cpi	r19, 0x02	; 2
    4f26:	21 f4       	brne	.+8      	; 0x4f30 <__divsf3+0x8c>
    4f28:	84 e0       	ldi	r24, 0x04	; 4
    4f2a:	89 87       	std	Y+9, r24	; 0x09
    4f2c:	b7 01       	movw	r22, r14
    4f2e:	5f c0       	rjmp	.+190    	; 0x4fee <__divsf3+0x14a>
    4f30:	2b 85       	ldd	r18, Y+11	; 0x0b
    4f32:	3c 85       	ldd	r19, Y+12	; 0x0c
    4f34:	8b 89       	ldd	r24, Y+19	; 0x13
    4f36:	9c 89       	ldd	r25, Y+20	; 0x14
    4f38:	28 1b       	sub	r18, r24
    4f3a:	39 0b       	sbc	r19, r25
    4f3c:	3c 87       	std	Y+12, r19	; 0x0c
    4f3e:	2b 87       	std	Y+11, r18	; 0x0b
    4f40:	ed 84       	ldd	r14, Y+13	; 0x0d
    4f42:	fe 84       	ldd	r15, Y+14	; 0x0e
    4f44:	0f 85       	ldd	r16, Y+15	; 0x0f
    4f46:	18 89       	ldd	r17, Y+16	; 0x10
    4f48:	ad 88       	ldd	r10, Y+21	; 0x15
    4f4a:	be 88       	ldd	r11, Y+22	; 0x16
    4f4c:	cf 88       	ldd	r12, Y+23	; 0x17
    4f4e:	d8 8c       	ldd	r13, Y+24	; 0x18
    4f50:	ea 14       	cp	r14, r10
    4f52:	fb 04       	cpc	r15, r11
    4f54:	0c 05       	cpc	r16, r12
    4f56:	1d 05       	cpc	r17, r13
    4f58:	40 f4       	brcc	.+16     	; 0x4f6a <__divsf3+0xc6>
    4f5a:	ee 0c       	add	r14, r14
    4f5c:	ff 1c       	adc	r15, r15
    4f5e:	00 1f       	adc	r16, r16
    4f60:	11 1f       	adc	r17, r17
    4f62:	21 50       	subi	r18, 0x01	; 1
    4f64:	30 40       	sbci	r19, 0x00	; 0
    4f66:	3c 87       	std	Y+12, r19	; 0x0c
    4f68:	2b 87       	std	Y+11, r18	; 0x0b
    4f6a:	20 e0       	ldi	r18, 0x00	; 0
    4f6c:	30 e0       	ldi	r19, 0x00	; 0
    4f6e:	40 e0       	ldi	r20, 0x00	; 0
    4f70:	50 e0       	ldi	r21, 0x00	; 0
    4f72:	80 e0       	ldi	r24, 0x00	; 0
    4f74:	90 e0       	ldi	r25, 0x00	; 0
    4f76:	a0 e0       	ldi	r26, 0x00	; 0
    4f78:	b0 e4       	ldi	r27, 0x40	; 64
    4f7a:	60 e0       	ldi	r22, 0x00	; 0
    4f7c:	70 e0       	ldi	r23, 0x00	; 0
    4f7e:	ea 14       	cp	r14, r10
    4f80:	fb 04       	cpc	r15, r11
    4f82:	0c 05       	cpc	r16, r12
    4f84:	1d 05       	cpc	r17, r13
    4f86:	40 f0       	brcs	.+16     	; 0x4f98 <__divsf3+0xf4>
    4f88:	28 2b       	or	r18, r24
    4f8a:	39 2b       	or	r19, r25
    4f8c:	4a 2b       	or	r20, r26
    4f8e:	5b 2b       	or	r21, r27
    4f90:	ea 18       	sub	r14, r10
    4f92:	fb 08       	sbc	r15, r11
    4f94:	0c 09       	sbc	r16, r12
    4f96:	1d 09       	sbc	r17, r13
    4f98:	b6 95       	lsr	r27
    4f9a:	a7 95       	ror	r26
    4f9c:	97 95       	ror	r25
    4f9e:	87 95       	ror	r24
    4fa0:	ee 0c       	add	r14, r14
    4fa2:	ff 1c       	adc	r15, r15
    4fa4:	00 1f       	adc	r16, r16
    4fa6:	11 1f       	adc	r17, r17
    4fa8:	6f 5f       	subi	r22, 0xFF	; 255
    4faa:	7f 4f       	sbci	r23, 0xFF	; 255
    4fac:	6f 31       	cpi	r22, 0x1F	; 31
    4fae:	71 05       	cpc	r23, r1
    4fb0:	31 f7       	brne	.-52     	; 0x4f7e <__divsf3+0xda>
    4fb2:	da 01       	movw	r26, r20
    4fb4:	c9 01       	movw	r24, r18
    4fb6:	8f 77       	andi	r24, 0x7F	; 127
    4fb8:	90 70       	andi	r25, 0x00	; 0
    4fba:	a0 70       	andi	r26, 0x00	; 0
    4fbc:	b0 70       	andi	r27, 0x00	; 0
    4fbe:	80 34       	cpi	r24, 0x40	; 64
    4fc0:	91 05       	cpc	r25, r1
    4fc2:	a1 05       	cpc	r26, r1
    4fc4:	b1 05       	cpc	r27, r1
    4fc6:	61 f4       	brne	.+24     	; 0x4fe0 <__divsf3+0x13c>
    4fc8:	27 fd       	sbrc	r18, 7
    4fca:	0a c0       	rjmp	.+20     	; 0x4fe0 <__divsf3+0x13c>
    4fcc:	e1 14       	cp	r14, r1
    4fce:	f1 04       	cpc	r15, r1
    4fd0:	01 05       	cpc	r16, r1
    4fd2:	11 05       	cpc	r17, r1
    4fd4:	29 f0       	breq	.+10     	; 0x4fe0 <__divsf3+0x13c>
    4fd6:	20 5c       	subi	r18, 0xC0	; 192
    4fd8:	3f 4f       	sbci	r19, 0xFF	; 255
    4fda:	4f 4f       	sbci	r20, 0xFF	; 255
    4fdc:	5f 4f       	sbci	r21, 0xFF	; 255
    4fde:	20 78       	andi	r18, 0x80	; 128
    4fe0:	2d 87       	std	Y+13, r18	; 0x0d
    4fe2:	3e 87       	std	Y+14, r19	; 0x0e
    4fe4:	4f 87       	std	Y+15, r20	; 0x0f
    4fe6:	58 8b       	std	Y+16, r21	; 0x10
    4fe8:	be 01       	movw	r22, r28
    4fea:	67 5f       	subi	r22, 0xF7	; 247
    4fec:	7f 4f       	sbci	r23, 0xFF	; 255
    4fee:	cb 01       	movw	r24, r22
    4ff0:	0e 94 08 2a 	call	0x5410	; 0x5410 <__pack_f>
    4ff4:	68 96       	adiw	r28, 0x18	; 24
    4ff6:	ea e0       	ldi	r30, 0x0A	; 10
    4ff8:	0c 94 02 2c 	jmp	0x5804	; 0x5804 <__epilogue_restores__+0x10>

00004ffc <__gtsf2>:
    4ffc:	a8 e1       	ldi	r26, 0x18	; 24
    4ffe:	b0 e0       	ldi	r27, 0x00	; 0
    5000:	e4 e0       	ldi	r30, 0x04	; 4
    5002:	f8 e2       	ldi	r31, 0x28	; 40
    5004:	0c 94 ea 2b 	jmp	0x57d4	; 0x57d4 <__prologue_saves__+0x18>
    5008:	69 83       	std	Y+1, r22	; 0x01
    500a:	7a 83       	std	Y+2, r23	; 0x02
    500c:	8b 83       	std	Y+3, r24	; 0x03
    500e:	9c 83       	std	Y+4, r25	; 0x04
    5010:	2d 83       	std	Y+5, r18	; 0x05
    5012:	3e 83       	std	Y+6, r19	; 0x06
    5014:	4f 83       	std	Y+7, r20	; 0x07
    5016:	58 87       	std	Y+8, r21	; 0x08
    5018:	89 e0       	ldi	r24, 0x09	; 9
    501a:	e8 2e       	mov	r14, r24
    501c:	f1 2c       	mov	r15, r1
    501e:	ec 0e       	add	r14, r28
    5020:	fd 1e       	adc	r15, r29
    5022:	ce 01       	movw	r24, r28
    5024:	01 96       	adiw	r24, 0x01	; 1
    5026:	b7 01       	movw	r22, r14
    5028:	0e 94 dd 2a 	call	0x55ba	; 0x55ba <__unpack_f>
    502c:	8e 01       	movw	r16, r28
    502e:	0f 5e       	subi	r16, 0xEF	; 239
    5030:	1f 4f       	sbci	r17, 0xFF	; 255
    5032:	ce 01       	movw	r24, r28
    5034:	05 96       	adiw	r24, 0x05	; 5
    5036:	b8 01       	movw	r22, r16
    5038:	0e 94 dd 2a 	call	0x55ba	; 0x55ba <__unpack_f>
    503c:	89 85       	ldd	r24, Y+9	; 0x09
    503e:	82 30       	cpi	r24, 0x02	; 2
    5040:	40 f0       	brcs	.+16     	; 0x5052 <__gtsf2+0x56>
    5042:	89 89       	ldd	r24, Y+17	; 0x11
    5044:	82 30       	cpi	r24, 0x02	; 2
    5046:	28 f0       	brcs	.+10     	; 0x5052 <__gtsf2+0x56>
    5048:	c7 01       	movw	r24, r14
    504a:	b8 01       	movw	r22, r16
    504c:	0e 94 55 2b 	call	0x56aa	; 0x56aa <__fpcmp_parts_f>
    5050:	01 c0       	rjmp	.+2      	; 0x5054 <__gtsf2+0x58>
    5052:	8f ef       	ldi	r24, 0xFF	; 255
    5054:	68 96       	adiw	r28, 0x18	; 24
    5056:	e6 e0       	ldi	r30, 0x06	; 6
    5058:	0c 94 06 2c 	jmp	0x580c	; 0x580c <__epilogue_restores__+0x18>

0000505c <__gesf2>:
    505c:	a8 e1       	ldi	r26, 0x18	; 24
    505e:	b0 e0       	ldi	r27, 0x00	; 0
    5060:	e4 e3       	ldi	r30, 0x34	; 52
    5062:	f8 e2       	ldi	r31, 0x28	; 40
    5064:	0c 94 ea 2b 	jmp	0x57d4	; 0x57d4 <__prologue_saves__+0x18>
    5068:	69 83       	std	Y+1, r22	; 0x01
    506a:	7a 83       	std	Y+2, r23	; 0x02
    506c:	8b 83       	std	Y+3, r24	; 0x03
    506e:	9c 83       	std	Y+4, r25	; 0x04
    5070:	2d 83       	std	Y+5, r18	; 0x05
    5072:	3e 83       	std	Y+6, r19	; 0x06
    5074:	4f 83       	std	Y+7, r20	; 0x07
    5076:	58 87       	std	Y+8, r21	; 0x08
    5078:	89 e0       	ldi	r24, 0x09	; 9
    507a:	e8 2e       	mov	r14, r24
    507c:	f1 2c       	mov	r15, r1
    507e:	ec 0e       	add	r14, r28
    5080:	fd 1e       	adc	r15, r29
    5082:	ce 01       	movw	r24, r28
    5084:	01 96       	adiw	r24, 0x01	; 1
    5086:	b7 01       	movw	r22, r14
    5088:	0e 94 dd 2a 	call	0x55ba	; 0x55ba <__unpack_f>
    508c:	8e 01       	movw	r16, r28
    508e:	0f 5e       	subi	r16, 0xEF	; 239
    5090:	1f 4f       	sbci	r17, 0xFF	; 255
    5092:	ce 01       	movw	r24, r28
    5094:	05 96       	adiw	r24, 0x05	; 5
    5096:	b8 01       	movw	r22, r16
    5098:	0e 94 dd 2a 	call	0x55ba	; 0x55ba <__unpack_f>
    509c:	89 85       	ldd	r24, Y+9	; 0x09
    509e:	82 30       	cpi	r24, 0x02	; 2
    50a0:	40 f0       	brcs	.+16     	; 0x50b2 <__gesf2+0x56>
    50a2:	89 89       	ldd	r24, Y+17	; 0x11
    50a4:	82 30       	cpi	r24, 0x02	; 2
    50a6:	28 f0       	brcs	.+10     	; 0x50b2 <__gesf2+0x56>
    50a8:	c7 01       	movw	r24, r14
    50aa:	b8 01       	movw	r22, r16
    50ac:	0e 94 55 2b 	call	0x56aa	; 0x56aa <__fpcmp_parts_f>
    50b0:	01 c0       	rjmp	.+2      	; 0x50b4 <__gesf2+0x58>
    50b2:	8f ef       	ldi	r24, 0xFF	; 255
    50b4:	68 96       	adiw	r28, 0x18	; 24
    50b6:	e6 e0       	ldi	r30, 0x06	; 6
    50b8:	0c 94 06 2c 	jmp	0x580c	; 0x580c <__epilogue_restores__+0x18>

000050bc <__ltsf2>:
    50bc:	a8 e1       	ldi	r26, 0x18	; 24
    50be:	b0 e0       	ldi	r27, 0x00	; 0
    50c0:	e4 e6       	ldi	r30, 0x64	; 100
    50c2:	f8 e2       	ldi	r31, 0x28	; 40
    50c4:	0c 94 ea 2b 	jmp	0x57d4	; 0x57d4 <__prologue_saves__+0x18>
    50c8:	69 83       	std	Y+1, r22	; 0x01
    50ca:	7a 83       	std	Y+2, r23	; 0x02
    50cc:	8b 83       	std	Y+3, r24	; 0x03
    50ce:	9c 83       	std	Y+4, r25	; 0x04
    50d0:	2d 83       	std	Y+5, r18	; 0x05
    50d2:	3e 83       	std	Y+6, r19	; 0x06
    50d4:	4f 83       	std	Y+7, r20	; 0x07
    50d6:	58 87       	std	Y+8, r21	; 0x08
    50d8:	89 e0       	ldi	r24, 0x09	; 9
    50da:	e8 2e       	mov	r14, r24
    50dc:	f1 2c       	mov	r15, r1
    50de:	ec 0e       	add	r14, r28
    50e0:	fd 1e       	adc	r15, r29
    50e2:	ce 01       	movw	r24, r28
    50e4:	01 96       	adiw	r24, 0x01	; 1
    50e6:	b7 01       	movw	r22, r14
    50e8:	0e 94 dd 2a 	call	0x55ba	; 0x55ba <__unpack_f>
    50ec:	8e 01       	movw	r16, r28
    50ee:	0f 5e       	subi	r16, 0xEF	; 239
    50f0:	1f 4f       	sbci	r17, 0xFF	; 255
    50f2:	ce 01       	movw	r24, r28
    50f4:	05 96       	adiw	r24, 0x05	; 5
    50f6:	b8 01       	movw	r22, r16
    50f8:	0e 94 dd 2a 	call	0x55ba	; 0x55ba <__unpack_f>
    50fc:	89 85       	ldd	r24, Y+9	; 0x09
    50fe:	82 30       	cpi	r24, 0x02	; 2
    5100:	40 f0       	brcs	.+16     	; 0x5112 <__ltsf2+0x56>
    5102:	89 89       	ldd	r24, Y+17	; 0x11
    5104:	82 30       	cpi	r24, 0x02	; 2
    5106:	28 f0       	brcs	.+10     	; 0x5112 <__ltsf2+0x56>
    5108:	c7 01       	movw	r24, r14
    510a:	b8 01       	movw	r22, r16
    510c:	0e 94 55 2b 	call	0x56aa	; 0x56aa <__fpcmp_parts_f>
    5110:	01 c0       	rjmp	.+2      	; 0x5114 <__ltsf2+0x58>
    5112:	81 e0       	ldi	r24, 0x01	; 1
    5114:	68 96       	adiw	r28, 0x18	; 24
    5116:	e6 e0       	ldi	r30, 0x06	; 6
    5118:	0c 94 06 2c 	jmp	0x580c	; 0x580c <__epilogue_restores__+0x18>

0000511c <__floatsisf>:
    511c:	a8 e0       	ldi	r26, 0x08	; 8
    511e:	b0 e0       	ldi	r27, 0x00	; 0
    5120:	e4 e9       	ldi	r30, 0x94	; 148
    5122:	f8 e2       	ldi	r31, 0x28	; 40
    5124:	0c 94 e7 2b 	jmp	0x57ce	; 0x57ce <__prologue_saves__+0x12>
    5128:	9b 01       	movw	r18, r22
    512a:	ac 01       	movw	r20, r24
    512c:	83 e0       	ldi	r24, 0x03	; 3
    512e:	89 83       	std	Y+1, r24	; 0x01
    5130:	da 01       	movw	r26, r20
    5132:	c9 01       	movw	r24, r18
    5134:	88 27       	eor	r24, r24
    5136:	b7 fd       	sbrc	r27, 7
    5138:	83 95       	inc	r24
    513a:	99 27       	eor	r25, r25
    513c:	aa 27       	eor	r26, r26
    513e:	bb 27       	eor	r27, r27
    5140:	b8 2e       	mov	r11, r24
    5142:	21 15       	cp	r18, r1
    5144:	31 05       	cpc	r19, r1
    5146:	41 05       	cpc	r20, r1
    5148:	51 05       	cpc	r21, r1
    514a:	19 f4       	brne	.+6      	; 0x5152 <__floatsisf+0x36>
    514c:	82 e0       	ldi	r24, 0x02	; 2
    514e:	89 83       	std	Y+1, r24	; 0x01
    5150:	3a c0       	rjmp	.+116    	; 0x51c6 <__floatsisf+0xaa>
    5152:	88 23       	and	r24, r24
    5154:	a9 f0       	breq	.+42     	; 0x5180 <__floatsisf+0x64>
    5156:	20 30       	cpi	r18, 0x00	; 0
    5158:	80 e0       	ldi	r24, 0x00	; 0
    515a:	38 07       	cpc	r19, r24
    515c:	80 e0       	ldi	r24, 0x00	; 0
    515e:	48 07       	cpc	r20, r24
    5160:	80 e8       	ldi	r24, 0x80	; 128
    5162:	58 07       	cpc	r21, r24
    5164:	29 f4       	brne	.+10     	; 0x5170 <__floatsisf+0x54>
    5166:	60 e0       	ldi	r22, 0x00	; 0
    5168:	70 e0       	ldi	r23, 0x00	; 0
    516a:	80 e0       	ldi	r24, 0x00	; 0
    516c:	9f ec       	ldi	r25, 0xCF	; 207
    516e:	30 c0       	rjmp	.+96     	; 0x51d0 <__floatsisf+0xb4>
    5170:	ee 24       	eor	r14, r14
    5172:	ff 24       	eor	r15, r15
    5174:	87 01       	movw	r16, r14
    5176:	e2 1a       	sub	r14, r18
    5178:	f3 0a       	sbc	r15, r19
    517a:	04 0b       	sbc	r16, r20
    517c:	15 0b       	sbc	r17, r21
    517e:	02 c0       	rjmp	.+4      	; 0x5184 <__floatsisf+0x68>
    5180:	79 01       	movw	r14, r18
    5182:	8a 01       	movw	r16, r20
    5184:	8e e1       	ldi	r24, 0x1E	; 30
    5186:	c8 2e       	mov	r12, r24
    5188:	d1 2c       	mov	r13, r1
    518a:	dc 82       	std	Y+4, r13	; 0x04
    518c:	cb 82       	std	Y+3, r12	; 0x03
    518e:	ed 82       	std	Y+5, r14	; 0x05
    5190:	fe 82       	std	Y+6, r15	; 0x06
    5192:	0f 83       	std	Y+7, r16	; 0x07
    5194:	18 87       	std	Y+8, r17	; 0x08
    5196:	c8 01       	movw	r24, r16
    5198:	b7 01       	movw	r22, r14
    519a:	0e 94 b9 29 	call	0x5372	; 0x5372 <__clzsi2>
    519e:	01 97       	sbiw	r24, 0x01	; 1
    51a0:	18 16       	cp	r1, r24
    51a2:	19 06       	cpc	r1, r25
    51a4:	84 f4       	brge	.+32     	; 0x51c6 <__floatsisf+0xaa>
    51a6:	08 2e       	mov	r0, r24
    51a8:	04 c0       	rjmp	.+8      	; 0x51b2 <__floatsisf+0x96>
    51aa:	ee 0c       	add	r14, r14
    51ac:	ff 1c       	adc	r15, r15
    51ae:	00 1f       	adc	r16, r16
    51b0:	11 1f       	adc	r17, r17
    51b2:	0a 94       	dec	r0
    51b4:	d2 f7       	brpl	.-12     	; 0x51aa <__floatsisf+0x8e>
    51b6:	ed 82       	std	Y+5, r14	; 0x05
    51b8:	fe 82       	std	Y+6, r15	; 0x06
    51ba:	0f 83       	std	Y+7, r16	; 0x07
    51bc:	18 87       	std	Y+8, r17	; 0x08
    51be:	c8 1a       	sub	r12, r24
    51c0:	d9 0a       	sbc	r13, r25
    51c2:	dc 82       	std	Y+4, r13	; 0x04
    51c4:	cb 82       	std	Y+3, r12	; 0x03
    51c6:	ba 82       	std	Y+2, r11	; 0x02
    51c8:	ce 01       	movw	r24, r28
    51ca:	01 96       	adiw	r24, 0x01	; 1
    51cc:	0e 94 08 2a 	call	0x5410	; 0x5410 <__pack_f>
    51d0:	28 96       	adiw	r28, 0x08	; 8
    51d2:	e9 e0       	ldi	r30, 0x09	; 9
    51d4:	0c 94 03 2c 	jmp	0x5806	; 0x5806 <__epilogue_restores__+0x12>

000051d8 <__fixsfsi>:
    51d8:	ac e0       	ldi	r26, 0x0C	; 12
    51da:	b0 e0       	ldi	r27, 0x00	; 0
    51dc:	e2 ef       	ldi	r30, 0xF2	; 242
    51de:	f8 e2       	ldi	r31, 0x28	; 40
    51e0:	0c 94 ee 2b 	jmp	0x57dc	; 0x57dc <__prologue_saves__+0x20>
    51e4:	69 83       	std	Y+1, r22	; 0x01
    51e6:	7a 83       	std	Y+2, r23	; 0x02
    51e8:	8b 83       	std	Y+3, r24	; 0x03
    51ea:	9c 83       	std	Y+4, r25	; 0x04
    51ec:	ce 01       	movw	r24, r28
    51ee:	01 96       	adiw	r24, 0x01	; 1
    51f0:	be 01       	movw	r22, r28
    51f2:	6b 5f       	subi	r22, 0xFB	; 251
    51f4:	7f 4f       	sbci	r23, 0xFF	; 255
    51f6:	0e 94 dd 2a 	call	0x55ba	; 0x55ba <__unpack_f>
    51fa:	8d 81       	ldd	r24, Y+5	; 0x05
    51fc:	82 30       	cpi	r24, 0x02	; 2
    51fe:	61 f1       	breq	.+88     	; 0x5258 <__fixsfsi+0x80>
    5200:	82 30       	cpi	r24, 0x02	; 2
    5202:	50 f1       	brcs	.+84     	; 0x5258 <__fixsfsi+0x80>
    5204:	84 30       	cpi	r24, 0x04	; 4
    5206:	21 f4       	brne	.+8      	; 0x5210 <__fixsfsi+0x38>
    5208:	8e 81       	ldd	r24, Y+6	; 0x06
    520a:	88 23       	and	r24, r24
    520c:	51 f1       	breq	.+84     	; 0x5262 <__fixsfsi+0x8a>
    520e:	2e c0       	rjmp	.+92     	; 0x526c <__fixsfsi+0x94>
    5210:	2f 81       	ldd	r18, Y+7	; 0x07
    5212:	38 85       	ldd	r19, Y+8	; 0x08
    5214:	37 fd       	sbrc	r19, 7
    5216:	20 c0       	rjmp	.+64     	; 0x5258 <__fixsfsi+0x80>
    5218:	6e 81       	ldd	r22, Y+6	; 0x06
    521a:	2f 31       	cpi	r18, 0x1F	; 31
    521c:	31 05       	cpc	r19, r1
    521e:	1c f0       	brlt	.+6      	; 0x5226 <__fixsfsi+0x4e>
    5220:	66 23       	and	r22, r22
    5222:	f9 f0       	breq	.+62     	; 0x5262 <__fixsfsi+0x8a>
    5224:	23 c0       	rjmp	.+70     	; 0x526c <__fixsfsi+0x94>
    5226:	8e e1       	ldi	r24, 0x1E	; 30
    5228:	90 e0       	ldi	r25, 0x00	; 0
    522a:	82 1b       	sub	r24, r18
    522c:	93 0b       	sbc	r25, r19
    522e:	29 85       	ldd	r18, Y+9	; 0x09
    5230:	3a 85       	ldd	r19, Y+10	; 0x0a
    5232:	4b 85       	ldd	r20, Y+11	; 0x0b
    5234:	5c 85       	ldd	r21, Y+12	; 0x0c
    5236:	04 c0       	rjmp	.+8      	; 0x5240 <__fixsfsi+0x68>
    5238:	56 95       	lsr	r21
    523a:	47 95       	ror	r20
    523c:	37 95       	ror	r19
    523e:	27 95       	ror	r18
    5240:	8a 95       	dec	r24
    5242:	d2 f7       	brpl	.-12     	; 0x5238 <__fixsfsi+0x60>
    5244:	66 23       	and	r22, r22
    5246:	b1 f0       	breq	.+44     	; 0x5274 <__fixsfsi+0x9c>
    5248:	50 95       	com	r21
    524a:	40 95       	com	r20
    524c:	30 95       	com	r19
    524e:	21 95       	neg	r18
    5250:	3f 4f       	sbci	r19, 0xFF	; 255
    5252:	4f 4f       	sbci	r20, 0xFF	; 255
    5254:	5f 4f       	sbci	r21, 0xFF	; 255
    5256:	0e c0       	rjmp	.+28     	; 0x5274 <__fixsfsi+0x9c>
    5258:	20 e0       	ldi	r18, 0x00	; 0
    525a:	30 e0       	ldi	r19, 0x00	; 0
    525c:	40 e0       	ldi	r20, 0x00	; 0
    525e:	50 e0       	ldi	r21, 0x00	; 0
    5260:	09 c0       	rjmp	.+18     	; 0x5274 <__fixsfsi+0x9c>
    5262:	2f ef       	ldi	r18, 0xFF	; 255
    5264:	3f ef       	ldi	r19, 0xFF	; 255
    5266:	4f ef       	ldi	r20, 0xFF	; 255
    5268:	5f e7       	ldi	r21, 0x7F	; 127
    526a:	04 c0       	rjmp	.+8      	; 0x5274 <__fixsfsi+0x9c>
    526c:	20 e0       	ldi	r18, 0x00	; 0
    526e:	30 e0       	ldi	r19, 0x00	; 0
    5270:	40 e0       	ldi	r20, 0x00	; 0
    5272:	50 e8       	ldi	r21, 0x80	; 128
    5274:	b9 01       	movw	r22, r18
    5276:	ca 01       	movw	r24, r20
    5278:	2c 96       	adiw	r28, 0x0c	; 12
    527a:	e2 e0       	ldi	r30, 0x02	; 2
    527c:	0c 94 0a 2c 	jmp	0x5814	; 0x5814 <__epilogue_restores__+0x20>

00005280 <__floatunsisf>:
    5280:	a8 e0       	ldi	r26, 0x08	; 8
    5282:	b0 e0       	ldi	r27, 0x00	; 0
    5284:	e6 e4       	ldi	r30, 0x46	; 70
    5286:	f9 e2       	ldi	r31, 0x29	; 41
    5288:	0c 94 e6 2b 	jmp	0x57cc	; 0x57cc <__prologue_saves__+0x10>
    528c:	7b 01       	movw	r14, r22
    528e:	8c 01       	movw	r16, r24
    5290:	61 15       	cp	r22, r1
    5292:	71 05       	cpc	r23, r1
    5294:	81 05       	cpc	r24, r1
    5296:	91 05       	cpc	r25, r1
    5298:	19 f4       	brne	.+6      	; 0x52a0 <__floatunsisf+0x20>
    529a:	82 e0       	ldi	r24, 0x02	; 2
    529c:	89 83       	std	Y+1, r24	; 0x01
    529e:	60 c0       	rjmp	.+192    	; 0x5360 <__floatunsisf+0xe0>
    52a0:	83 e0       	ldi	r24, 0x03	; 3
    52a2:	89 83       	std	Y+1, r24	; 0x01
    52a4:	8e e1       	ldi	r24, 0x1E	; 30
    52a6:	c8 2e       	mov	r12, r24
    52a8:	d1 2c       	mov	r13, r1
    52aa:	dc 82       	std	Y+4, r13	; 0x04
    52ac:	cb 82       	std	Y+3, r12	; 0x03
    52ae:	ed 82       	std	Y+5, r14	; 0x05
    52b0:	fe 82       	std	Y+6, r15	; 0x06
    52b2:	0f 83       	std	Y+7, r16	; 0x07
    52b4:	18 87       	std	Y+8, r17	; 0x08
    52b6:	c8 01       	movw	r24, r16
    52b8:	b7 01       	movw	r22, r14
    52ba:	0e 94 b9 29 	call	0x5372	; 0x5372 <__clzsi2>
    52be:	fc 01       	movw	r30, r24
    52c0:	31 97       	sbiw	r30, 0x01	; 1
    52c2:	f7 ff       	sbrs	r31, 7
    52c4:	3b c0       	rjmp	.+118    	; 0x533c <__floatunsisf+0xbc>
    52c6:	22 27       	eor	r18, r18
    52c8:	33 27       	eor	r19, r19
    52ca:	2e 1b       	sub	r18, r30
    52cc:	3f 0b       	sbc	r19, r31
    52ce:	57 01       	movw	r10, r14
    52d0:	68 01       	movw	r12, r16
    52d2:	02 2e       	mov	r0, r18
    52d4:	04 c0       	rjmp	.+8      	; 0x52de <__floatunsisf+0x5e>
    52d6:	d6 94       	lsr	r13
    52d8:	c7 94       	ror	r12
    52da:	b7 94       	ror	r11
    52dc:	a7 94       	ror	r10
    52de:	0a 94       	dec	r0
    52e0:	d2 f7       	brpl	.-12     	; 0x52d6 <__floatunsisf+0x56>
    52e2:	40 e0       	ldi	r20, 0x00	; 0
    52e4:	50 e0       	ldi	r21, 0x00	; 0
    52e6:	60 e0       	ldi	r22, 0x00	; 0
    52e8:	70 e0       	ldi	r23, 0x00	; 0
    52ea:	81 e0       	ldi	r24, 0x01	; 1
    52ec:	90 e0       	ldi	r25, 0x00	; 0
    52ee:	a0 e0       	ldi	r26, 0x00	; 0
    52f0:	b0 e0       	ldi	r27, 0x00	; 0
    52f2:	04 c0       	rjmp	.+8      	; 0x52fc <__floatunsisf+0x7c>
    52f4:	88 0f       	add	r24, r24
    52f6:	99 1f       	adc	r25, r25
    52f8:	aa 1f       	adc	r26, r26
    52fa:	bb 1f       	adc	r27, r27
    52fc:	2a 95       	dec	r18
    52fe:	d2 f7       	brpl	.-12     	; 0x52f4 <__floatunsisf+0x74>
    5300:	01 97       	sbiw	r24, 0x01	; 1
    5302:	a1 09       	sbc	r26, r1
    5304:	b1 09       	sbc	r27, r1
    5306:	8e 21       	and	r24, r14
    5308:	9f 21       	and	r25, r15
    530a:	a0 23       	and	r26, r16
    530c:	b1 23       	and	r27, r17
    530e:	00 97       	sbiw	r24, 0x00	; 0
    5310:	a1 05       	cpc	r26, r1
    5312:	b1 05       	cpc	r27, r1
    5314:	21 f0       	breq	.+8      	; 0x531e <__floatunsisf+0x9e>
    5316:	41 e0       	ldi	r20, 0x01	; 1
    5318:	50 e0       	ldi	r21, 0x00	; 0
    531a:	60 e0       	ldi	r22, 0x00	; 0
    531c:	70 e0       	ldi	r23, 0x00	; 0
    531e:	4a 29       	or	r20, r10
    5320:	5b 29       	or	r21, r11
    5322:	6c 29       	or	r22, r12
    5324:	7d 29       	or	r23, r13
    5326:	4d 83       	std	Y+5, r20	; 0x05
    5328:	5e 83       	std	Y+6, r21	; 0x06
    532a:	6f 83       	std	Y+7, r22	; 0x07
    532c:	78 87       	std	Y+8, r23	; 0x08
    532e:	8e e1       	ldi	r24, 0x1E	; 30
    5330:	90 e0       	ldi	r25, 0x00	; 0
    5332:	8e 1b       	sub	r24, r30
    5334:	9f 0b       	sbc	r25, r31
    5336:	9c 83       	std	Y+4, r25	; 0x04
    5338:	8b 83       	std	Y+3, r24	; 0x03
    533a:	12 c0       	rjmp	.+36     	; 0x5360 <__floatunsisf+0xe0>
    533c:	30 97       	sbiw	r30, 0x00	; 0
    533e:	81 f0       	breq	.+32     	; 0x5360 <__floatunsisf+0xe0>
    5340:	0e 2e       	mov	r0, r30
    5342:	04 c0       	rjmp	.+8      	; 0x534c <__floatunsisf+0xcc>
    5344:	ee 0c       	add	r14, r14
    5346:	ff 1c       	adc	r15, r15
    5348:	00 1f       	adc	r16, r16
    534a:	11 1f       	adc	r17, r17
    534c:	0a 94       	dec	r0
    534e:	d2 f7       	brpl	.-12     	; 0x5344 <__floatunsisf+0xc4>
    5350:	ed 82       	std	Y+5, r14	; 0x05
    5352:	fe 82       	std	Y+6, r15	; 0x06
    5354:	0f 83       	std	Y+7, r16	; 0x07
    5356:	18 87       	std	Y+8, r17	; 0x08
    5358:	ce 1a       	sub	r12, r30
    535a:	df 0a       	sbc	r13, r31
    535c:	dc 82       	std	Y+4, r13	; 0x04
    535e:	cb 82       	std	Y+3, r12	; 0x03
    5360:	1a 82       	std	Y+2, r1	; 0x02
    5362:	ce 01       	movw	r24, r28
    5364:	01 96       	adiw	r24, 0x01	; 1
    5366:	0e 94 08 2a 	call	0x5410	; 0x5410 <__pack_f>
    536a:	28 96       	adiw	r28, 0x08	; 8
    536c:	ea e0       	ldi	r30, 0x0A	; 10
    536e:	0c 94 02 2c 	jmp	0x5804	; 0x5804 <__epilogue_restores__+0x10>

00005372 <__clzsi2>:
    5372:	ef 92       	push	r14
    5374:	ff 92       	push	r15
    5376:	0f 93       	push	r16
    5378:	1f 93       	push	r17
    537a:	7b 01       	movw	r14, r22
    537c:	8c 01       	movw	r16, r24
    537e:	80 e0       	ldi	r24, 0x00	; 0
    5380:	e8 16       	cp	r14, r24
    5382:	80 e0       	ldi	r24, 0x00	; 0
    5384:	f8 06       	cpc	r15, r24
    5386:	81 e0       	ldi	r24, 0x01	; 1
    5388:	08 07       	cpc	r16, r24
    538a:	80 e0       	ldi	r24, 0x00	; 0
    538c:	18 07       	cpc	r17, r24
    538e:	88 f4       	brcc	.+34     	; 0x53b2 <__clzsi2+0x40>
    5390:	8f ef       	ldi	r24, 0xFF	; 255
    5392:	e8 16       	cp	r14, r24
    5394:	f1 04       	cpc	r15, r1
    5396:	01 05       	cpc	r16, r1
    5398:	11 05       	cpc	r17, r1
    539a:	31 f0       	breq	.+12     	; 0x53a8 <__clzsi2+0x36>
    539c:	28 f0       	brcs	.+10     	; 0x53a8 <__clzsi2+0x36>
    539e:	88 e0       	ldi	r24, 0x08	; 8
    53a0:	90 e0       	ldi	r25, 0x00	; 0
    53a2:	a0 e0       	ldi	r26, 0x00	; 0
    53a4:	b0 e0       	ldi	r27, 0x00	; 0
    53a6:	17 c0       	rjmp	.+46     	; 0x53d6 <__clzsi2+0x64>
    53a8:	80 e0       	ldi	r24, 0x00	; 0
    53aa:	90 e0       	ldi	r25, 0x00	; 0
    53ac:	a0 e0       	ldi	r26, 0x00	; 0
    53ae:	b0 e0       	ldi	r27, 0x00	; 0
    53b0:	12 c0       	rjmp	.+36     	; 0x53d6 <__clzsi2+0x64>
    53b2:	80 e0       	ldi	r24, 0x00	; 0
    53b4:	e8 16       	cp	r14, r24
    53b6:	80 e0       	ldi	r24, 0x00	; 0
    53b8:	f8 06       	cpc	r15, r24
    53ba:	80 e0       	ldi	r24, 0x00	; 0
    53bc:	08 07       	cpc	r16, r24
    53be:	81 e0       	ldi	r24, 0x01	; 1
    53c0:	18 07       	cpc	r17, r24
    53c2:	28 f0       	brcs	.+10     	; 0x53ce <__clzsi2+0x5c>
    53c4:	88 e1       	ldi	r24, 0x18	; 24
    53c6:	90 e0       	ldi	r25, 0x00	; 0
    53c8:	a0 e0       	ldi	r26, 0x00	; 0
    53ca:	b0 e0       	ldi	r27, 0x00	; 0
    53cc:	04 c0       	rjmp	.+8      	; 0x53d6 <__clzsi2+0x64>
    53ce:	80 e1       	ldi	r24, 0x10	; 16
    53d0:	90 e0       	ldi	r25, 0x00	; 0
    53d2:	a0 e0       	ldi	r26, 0x00	; 0
    53d4:	b0 e0       	ldi	r27, 0x00	; 0
    53d6:	20 e2       	ldi	r18, 0x20	; 32
    53d8:	30 e0       	ldi	r19, 0x00	; 0
    53da:	40 e0       	ldi	r20, 0x00	; 0
    53dc:	50 e0       	ldi	r21, 0x00	; 0
    53de:	28 1b       	sub	r18, r24
    53e0:	39 0b       	sbc	r19, r25
    53e2:	4a 0b       	sbc	r20, r26
    53e4:	5b 0b       	sbc	r21, r27
    53e6:	04 c0       	rjmp	.+8      	; 0x53f0 <__clzsi2+0x7e>
    53e8:	16 95       	lsr	r17
    53ea:	07 95       	ror	r16
    53ec:	f7 94       	ror	r15
    53ee:	e7 94       	ror	r14
    53f0:	8a 95       	dec	r24
    53f2:	d2 f7       	brpl	.-12     	; 0x53e8 <__clzsi2+0x76>
    53f4:	f7 01       	movw	r30, r14
    53f6:	e8 5d       	subi	r30, 0xD8	; 216
    53f8:	fd 4f       	sbci	r31, 0xFD	; 253
    53fa:	80 81       	ld	r24, Z
    53fc:	28 1b       	sub	r18, r24
    53fe:	31 09       	sbc	r19, r1
    5400:	41 09       	sbc	r20, r1
    5402:	51 09       	sbc	r21, r1
    5404:	c9 01       	movw	r24, r18
    5406:	1f 91       	pop	r17
    5408:	0f 91       	pop	r16
    540a:	ff 90       	pop	r15
    540c:	ef 90       	pop	r14
    540e:	08 95       	ret

00005410 <__pack_f>:
    5410:	df 92       	push	r13
    5412:	ef 92       	push	r14
    5414:	ff 92       	push	r15
    5416:	0f 93       	push	r16
    5418:	1f 93       	push	r17
    541a:	fc 01       	movw	r30, r24
    541c:	e4 80       	ldd	r14, Z+4	; 0x04
    541e:	f5 80       	ldd	r15, Z+5	; 0x05
    5420:	06 81       	ldd	r16, Z+6	; 0x06
    5422:	17 81       	ldd	r17, Z+7	; 0x07
    5424:	d1 80       	ldd	r13, Z+1	; 0x01
    5426:	80 81       	ld	r24, Z
    5428:	82 30       	cpi	r24, 0x02	; 2
    542a:	48 f4       	brcc	.+18     	; 0x543e <__pack_f+0x2e>
    542c:	80 e0       	ldi	r24, 0x00	; 0
    542e:	90 e0       	ldi	r25, 0x00	; 0
    5430:	a0 e1       	ldi	r26, 0x10	; 16
    5432:	b0 e0       	ldi	r27, 0x00	; 0
    5434:	e8 2a       	or	r14, r24
    5436:	f9 2a       	or	r15, r25
    5438:	0a 2b       	or	r16, r26
    543a:	1b 2b       	or	r17, r27
    543c:	a5 c0       	rjmp	.+330    	; 0x5588 <__pack_f+0x178>
    543e:	84 30       	cpi	r24, 0x04	; 4
    5440:	09 f4       	brne	.+2      	; 0x5444 <__pack_f+0x34>
    5442:	9f c0       	rjmp	.+318    	; 0x5582 <__pack_f+0x172>
    5444:	82 30       	cpi	r24, 0x02	; 2
    5446:	21 f4       	brne	.+8      	; 0x5450 <__pack_f+0x40>
    5448:	ee 24       	eor	r14, r14
    544a:	ff 24       	eor	r15, r15
    544c:	87 01       	movw	r16, r14
    544e:	05 c0       	rjmp	.+10     	; 0x545a <__pack_f+0x4a>
    5450:	e1 14       	cp	r14, r1
    5452:	f1 04       	cpc	r15, r1
    5454:	01 05       	cpc	r16, r1
    5456:	11 05       	cpc	r17, r1
    5458:	19 f4       	brne	.+6      	; 0x5460 <__pack_f+0x50>
    545a:	e0 e0       	ldi	r30, 0x00	; 0
    545c:	f0 e0       	ldi	r31, 0x00	; 0
    545e:	96 c0       	rjmp	.+300    	; 0x558c <__pack_f+0x17c>
    5460:	62 81       	ldd	r22, Z+2	; 0x02
    5462:	73 81       	ldd	r23, Z+3	; 0x03
    5464:	9f ef       	ldi	r25, 0xFF	; 255
    5466:	62 38       	cpi	r22, 0x82	; 130
    5468:	79 07       	cpc	r23, r25
    546a:	0c f0       	brlt	.+2      	; 0x546e <__pack_f+0x5e>
    546c:	5b c0       	rjmp	.+182    	; 0x5524 <__pack_f+0x114>
    546e:	22 e8       	ldi	r18, 0x82	; 130
    5470:	3f ef       	ldi	r19, 0xFF	; 255
    5472:	26 1b       	sub	r18, r22
    5474:	37 0b       	sbc	r19, r23
    5476:	2a 31       	cpi	r18, 0x1A	; 26
    5478:	31 05       	cpc	r19, r1
    547a:	2c f0       	brlt	.+10     	; 0x5486 <__pack_f+0x76>
    547c:	20 e0       	ldi	r18, 0x00	; 0
    547e:	30 e0       	ldi	r19, 0x00	; 0
    5480:	40 e0       	ldi	r20, 0x00	; 0
    5482:	50 e0       	ldi	r21, 0x00	; 0
    5484:	2a c0       	rjmp	.+84     	; 0x54da <__pack_f+0xca>
    5486:	b8 01       	movw	r22, r16
    5488:	a7 01       	movw	r20, r14
    548a:	02 2e       	mov	r0, r18
    548c:	04 c0       	rjmp	.+8      	; 0x5496 <__pack_f+0x86>
    548e:	76 95       	lsr	r23
    5490:	67 95       	ror	r22
    5492:	57 95       	ror	r21
    5494:	47 95       	ror	r20
    5496:	0a 94       	dec	r0
    5498:	d2 f7       	brpl	.-12     	; 0x548e <__pack_f+0x7e>
    549a:	81 e0       	ldi	r24, 0x01	; 1
    549c:	90 e0       	ldi	r25, 0x00	; 0
    549e:	a0 e0       	ldi	r26, 0x00	; 0
    54a0:	b0 e0       	ldi	r27, 0x00	; 0
    54a2:	04 c0       	rjmp	.+8      	; 0x54ac <__pack_f+0x9c>
    54a4:	88 0f       	add	r24, r24
    54a6:	99 1f       	adc	r25, r25
    54a8:	aa 1f       	adc	r26, r26
    54aa:	bb 1f       	adc	r27, r27
    54ac:	2a 95       	dec	r18
    54ae:	d2 f7       	brpl	.-12     	; 0x54a4 <__pack_f+0x94>
    54b0:	01 97       	sbiw	r24, 0x01	; 1
    54b2:	a1 09       	sbc	r26, r1
    54b4:	b1 09       	sbc	r27, r1
    54b6:	8e 21       	and	r24, r14
    54b8:	9f 21       	and	r25, r15
    54ba:	a0 23       	and	r26, r16
    54bc:	b1 23       	and	r27, r17
    54be:	00 97       	sbiw	r24, 0x00	; 0
    54c0:	a1 05       	cpc	r26, r1
    54c2:	b1 05       	cpc	r27, r1
    54c4:	21 f0       	breq	.+8      	; 0x54ce <__pack_f+0xbe>
    54c6:	81 e0       	ldi	r24, 0x01	; 1
    54c8:	90 e0       	ldi	r25, 0x00	; 0
    54ca:	a0 e0       	ldi	r26, 0x00	; 0
    54cc:	b0 e0       	ldi	r27, 0x00	; 0
    54ce:	9a 01       	movw	r18, r20
    54d0:	ab 01       	movw	r20, r22
    54d2:	28 2b       	or	r18, r24
    54d4:	39 2b       	or	r19, r25
    54d6:	4a 2b       	or	r20, r26
    54d8:	5b 2b       	or	r21, r27
    54da:	da 01       	movw	r26, r20
    54dc:	c9 01       	movw	r24, r18
    54de:	8f 77       	andi	r24, 0x7F	; 127
    54e0:	90 70       	andi	r25, 0x00	; 0
    54e2:	a0 70       	andi	r26, 0x00	; 0
    54e4:	b0 70       	andi	r27, 0x00	; 0
    54e6:	80 34       	cpi	r24, 0x40	; 64
    54e8:	91 05       	cpc	r25, r1
    54ea:	a1 05       	cpc	r26, r1
    54ec:	b1 05       	cpc	r27, r1
    54ee:	39 f4       	brne	.+14     	; 0x54fe <__pack_f+0xee>
    54f0:	27 ff       	sbrs	r18, 7
    54f2:	09 c0       	rjmp	.+18     	; 0x5506 <__pack_f+0xf6>
    54f4:	20 5c       	subi	r18, 0xC0	; 192
    54f6:	3f 4f       	sbci	r19, 0xFF	; 255
    54f8:	4f 4f       	sbci	r20, 0xFF	; 255
    54fa:	5f 4f       	sbci	r21, 0xFF	; 255
    54fc:	04 c0       	rjmp	.+8      	; 0x5506 <__pack_f+0xf6>
    54fe:	21 5c       	subi	r18, 0xC1	; 193
    5500:	3f 4f       	sbci	r19, 0xFF	; 255
    5502:	4f 4f       	sbci	r20, 0xFF	; 255
    5504:	5f 4f       	sbci	r21, 0xFF	; 255
    5506:	e0 e0       	ldi	r30, 0x00	; 0
    5508:	f0 e0       	ldi	r31, 0x00	; 0
    550a:	20 30       	cpi	r18, 0x00	; 0
    550c:	a0 e0       	ldi	r26, 0x00	; 0
    550e:	3a 07       	cpc	r19, r26
    5510:	a0 e0       	ldi	r26, 0x00	; 0
    5512:	4a 07       	cpc	r20, r26
    5514:	a0 e4       	ldi	r26, 0x40	; 64
    5516:	5a 07       	cpc	r21, r26
    5518:	10 f0       	brcs	.+4      	; 0x551e <__pack_f+0x10e>
    551a:	e1 e0       	ldi	r30, 0x01	; 1
    551c:	f0 e0       	ldi	r31, 0x00	; 0
    551e:	79 01       	movw	r14, r18
    5520:	8a 01       	movw	r16, r20
    5522:	27 c0       	rjmp	.+78     	; 0x5572 <__pack_f+0x162>
    5524:	60 38       	cpi	r22, 0x80	; 128
    5526:	71 05       	cpc	r23, r1
    5528:	64 f5       	brge	.+88     	; 0x5582 <__pack_f+0x172>
    552a:	fb 01       	movw	r30, r22
    552c:	e1 58       	subi	r30, 0x81	; 129
    552e:	ff 4f       	sbci	r31, 0xFF	; 255
    5530:	d8 01       	movw	r26, r16
    5532:	c7 01       	movw	r24, r14
    5534:	8f 77       	andi	r24, 0x7F	; 127
    5536:	90 70       	andi	r25, 0x00	; 0
    5538:	a0 70       	andi	r26, 0x00	; 0
    553a:	b0 70       	andi	r27, 0x00	; 0
    553c:	80 34       	cpi	r24, 0x40	; 64
    553e:	91 05       	cpc	r25, r1
    5540:	a1 05       	cpc	r26, r1
    5542:	b1 05       	cpc	r27, r1
    5544:	39 f4       	brne	.+14     	; 0x5554 <__pack_f+0x144>
    5546:	e7 fe       	sbrs	r14, 7
    5548:	0d c0       	rjmp	.+26     	; 0x5564 <__pack_f+0x154>
    554a:	80 e4       	ldi	r24, 0x40	; 64
    554c:	90 e0       	ldi	r25, 0x00	; 0
    554e:	a0 e0       	ldi	r26, 0x00	; 0
    5550:	b0 e0       	ldi	r27, 0x00	; 0
    5552:	04 c0       	rjmp	.+8      	; 0x555c <__pack_f+0x14c>
    5554:	8f e3       	ldi	r24, 0x3F	; 63
    5556:	90 e0       	ldi	r25, 0x00	; 0
    5558:	a0 e0       	ldi	r26, 0x00	; 0
    555a:	b0 e0       	ldi	r27, 0x00	; 0
    555c:	e8 0e       	add	r14, r24
    555e:	f9 1e       	adc	r15, r25
    5560:	0a 1f       	adc	r16, r26
    5562:	1b 1f       	adc	r17, r27
    5564:	17 ff       	sbrs	r17, 7
    5566:	05 c0       	rjmp	.+10     	; 0x5572 <__pack_f+0x162>
    5568:	16 95       	lsr	r17
    556a:	07 95       	ror	r16
    556c:	f7 94       	ror	r15
    556e:	e7 94       	ror	r14
    5570:	31 96       	adiw	r30, 0x01	; 1
    5572:	87 e0       	ldi	r24, 0x07	; 7
    5574:	16 95       	lsr	r17
    5576:	07 95       	ror	r16
    5578:	f7 94       	ror	r15
    557a:	e7 94       	ror	r14
    557c:	8a 95       	dec	r24
    557e:	d1 f7       	brne	.-12     	; 0x5574 <__pack_f+0x164>
    5580:	05 c0       	rjmp	.+10     	; 0x558c <__pack_f+0x17c>
    5582:	ee 24       	eor	r14, r14
    5584:	ff 24       	eor	r15, r15
    5586:	87 01       	movw	r16, r14
    5588:	ef ef       	ldi	r30, 0xFF	; 255
    558a:	f0 e0       	ldi	r31, 0x00	; 0
    558c:	6e 2f       	mov	r22, r30
    558e:	67 95       	ror	r22
    5590:	66 27       	eor	r22, r22
    5592:	67 95       	ror	r22
    5594:	90 2f       	mov	r25, r16
    5596:	9f 77       	andi	r25, 0x7F	; 127
    5598:	d7 94       	ror	r13
    559a:	dd 24       	eor	r13, r13
    559c:	d7 94       	ror	r13
    559e:	8e 2f       	mov	r24, r30
    55a0:	86 95       	lsr	r24
    55a2:	49 2f       	mov	r20, r25
    55a4:	46 2b       	or	r20, r22
    55a6:	58 2f       	mov	r21, r24
    55a8:	5d 29       	or	r21, r13
    55aa:	b7 01       	movw	r22, r14
    55ac:	ca 01       	movw	r24, r20
    55ae:	1f 91       	pop	r17
    55b0:	0f 91       	pop	r16
    55b2:	ff 90       	pop	r15
    55b4:	ef 90       	pop	r14
    55b6:	df 90       	pop	r13
    55b8:	08 95       	ret

000055ba <__unpack_f>:
    55ba:	fc 01       	movw	r30, r24
    55bc:	db 01       	movw	r26, r22
    55be:	40 81       	ld	r20, Z
    55c0:	51 81       	ldd	r21, Z+1	; 0x01
    55c2:	22 81       	ldd	r18, Z+2	; 0x02
    55c4:	62 2f       	mov	r22, r18
    55c6:	6f 77       	andi	r22, 0x7F	; 127
    55c8:	70 e0       	ldi	r23, 0x00	; 0
    55ca:	22 1f       	adc	r18, r18
    55cc:	22 27       	eor	r18, r18
    55ce:	22 1f       	adc	r18, r18
    55d0:	93 81       	ldd	r25, Z+3	; 0x03
    55d2:	89 2f       	mov	r24, r25
    55d4:	88 0f       	add	r24, r24
    55d6:	82 2b       	or	r24, r18
    55d8:	28 2f       	mov	r18, r24
    55da:	30 e0       	ldi	r19, 0x00	; 0
    55dc:	99 1f       	adc	r25, r25
    55de:	99 27       	eor	r25, r25
    55e0:	99 1f       	adc	r25, r25
    55e2:	11 96       	adiw	r26, 0x01	; 1
    55e4:	9c 93       	st	X, r25
    55e6:	11 97       	sbiw	r26, 0x01	; 1
    55e8:	21 15       	cp	r18, r1
    55ea:	31 05       	cpc	r19, r1
    55ec:	a9 f5       	brne	.+106    	; 0x5658 <__unpack_f+0x9e>
    55ee:	41 15       	cp	r20, r1
    55f0:	51 05       	cpc	r21, r1
    55f2:	61 05       	cpc	r22, r1
    55f4:	71 05       	cpc	r23, r1
    55f6:	11 f4       	brne	.+4      	; 0x55fc <__unpack_f+0x42>
    55f8:	82 e0       	ldi	r24, 0x02	; 2
    55fa:	37 c0       	rjmp	.+110    	; 0x566a <__unpack_f+0xb0>
    55fc:	82 e8       	ldi	r24, 0x82	; 130
    55fe:	9f ef       	ldi	r25, 0xFF	; 255
    5600:	13 96       	adiw	r26, 0x03	; 3
    5602:	9c 93       	st	X, r25
    5604:	8e 93       	st	-X, r24
    5606:	12 97       	sbiw	r26, 0x02	; 2
    5608:	9a 01       	movw	r18, r20
    560a:	ab 01       	movw	r20, r22
    560c:	67 e0       	ldi	r22, 0x07	; 7
    560e:	22 0f       	add	r18, r18
    5610:	33 1f       	adc	r19, r19
    5612:	44 1f       	adc	r20, r20
    5614:	55 1f       	adc	r21, r21
    5616:	6a 95       	dec	r22
    5618:	d1 f7       	brne	.-12     	; 0x560e <__unpack_f+0x54>
    561a:	83 e0       	ldi	r24, 0x03	; 3
    561c:	8c 93       	st	X, r24
    561e:	0d c0       	rjmp	.+26     	; 0x563a <__unpack_f+0x80>
    5620:	22 0f       	add	r18, r18
    5622:	33 1f       	adc	r19, r19
    5624:	44 1f       	adc	r20, r20
    5626:	55 1f       	adc	r21, r21
    5628:	12 96       	adiw	r26, 0x02	; 2
    562a:	8d 91       	ld	r24, X+
    562c:	9c 91       	ld	r25, X
    562e:	13 97       	sbiw	r26, 0x03	; 3
    5630:	01 97       	sbiw	r24, 0x01	; 1
    5632:	13 96       	adiw	r26, 0x03	; 3
    5634:	9c 93       	st	X, r25
    5636:	8e 93       	st	-X, r24
    5638:	12 97       	sbiw	r26, 0x02	; 2
    563a:	20 30       	cpi	r18, 0x00	; 0
    563c:	80 e0       	ldi	r24, 0x00	; 0
    563e:	38 07       	cpc	r19, r24
    5640:	80 e0       	ldi	r24, 0x00	; 0
    5642:	48 07       	cpc	r20, r24
    5644:	80 e4       	ldi	r24, 0x40	; 64
    5646:	58 07       	cpc	r21, r24
    5648:	58 f3       	brcs	.-42     	; 0x5620 <__unpack_f+0x66>
    564a:	14 96       	adiw	r26, 0x04	; 4
    564c:	2d 93       	st	X+, r18
    564e:	3d 93       	st	X+, r19
    5650:	4d 93       	st	X+, r20
    5652:	5c 93       	st	X, r21
    5654:	17 97       	sbiw	r26, 0x07	; 7
    5656:	08 95       	ret
    5658:	2f 3f       	cpi	r18, 0xFF	; 255
    565a:	31 05       	cpc	r19, r1
    565c:	79 f4       	brne	.+30     	; 0x567c <__unpack_f+0xc2>
    565e:	41 15       	cp	r20, r1
    5660:	51 05       	cpc	r21, r1
    5662:	61 05       	cpc	r22, r1
    5664:	71 05       	cpc	r23, r1
    5666:	19 f4       	brne	.+6      	; 0x566e <__unpack_f+0xb4>
    5668:	84 e0       	ldi	r24, 0x04	; 4
    566a:	8c 93       	st	X, r24
    566c:	08 95       	ret
    566e:	64 ff       	sbrs	r22, 4
    5670:	03 c0       	rjmp	.+6      	; 0x5678 <__unpack_f+0xbe>
    5672:	81 e0       	ldi	r24, 0x01	; 1
    5674:	8c 93       	st	X, r24
    5676:	12 c0       	rjmp	.+36     	; 0x569c <__unpack_f+0xe2>
    5678:	1c 92       	st	X, r1
    567a:	10 c0       	rjmp	.+32     	; 0x569c <__unpack_f+0xe2>
    567c:	2f 57       	subi	r18, 0x7F	; 127
    567e:	30 40       	sbci	r19, 0x00	; 0
    5680:	13 96       	adiw	r26, 0x03	; 3
    5682:	3c 93       	st	X, r19
    5684:	2e 93       	st	-X, r18
    5686:	12 97       	sbiw	r26, 0x02	; 2
    5688:	83 e0       	ldi	r24, 0x03	; 3
    568a:	8c 93       	st	X, r24
    568c:	87 e0       	ldi	r24, 0x07	; 7
    568e:	44 0f       	add	r20, r20
    5690:	55 1f       	adc	r21, r21
    5692:	66 1f       	adc	r22, r22
    5694:	77 1f       	adc	r23, r23
    5696:	8a 95       	dec	r24
    5698:	d1 f7       	brne	.-12     	; 0x568e <__unpack_f+0xd4>
    569a:	70 64       	ori	r23, 0x40	; 64
    569c:	14 96       	adiw	r26, 0x04	; 4
    569e:	4d 93       	st	X+, r20
    56a0:	5d 93       	st	X+, r21
    56a2:	6d 93       	st	X+, r22
    56a4:	7c 93       	st	X, r23
    56a6:	17 97       	sbiw	r26, 0x07	; 7
    56a8:	08 95       	ret

000056aa <__fpcmp_parts_f>:
    56aa:	1f 93       	push	r17
    56ac:	dc 01       	movw	r26, r24
    56ae:	fb 01       	movw	r30, r22
    56b0:	9c 91       	ld	r25, X
    56b2:	92 30       	cpi	r25, 0x02	; 2
    56b4:	08 f4       	brcc	.+2      	; 0x56b8 <__fpcmp_parts_f+0xe>
    56b6:	47 c0       	rjmp	.+142    	; 0x5746 <__fpcmp_parts_f+0x9c>
    56b8:	80 81       	ld	r24, Z
    56ba:	82 30       	cpi	r24, 0x02	; 2
    56bc:	08 f4       	brcc	.+2      	; 0x56c0 <__fpcmp_parts_f+0x16>
    56be:	43 c0       	rjmp	.+134    	; 0x5746 <__fpcmp_parts_f+0x9c>
    56c0:	94 30       	cpi	r25, 0x04	; 4
    56c2:	51 f4       	brne	.+20     	; 0x56d8 <__fpcmp_parts_f+0x2e>
    56c4:	11 96       	adiw	r26, 0x01	; 1
    56c6:	1c 91       	ld	r17, X
    56c8:	84 30       	cpi	r24, 0x04	; 4
    56ca:	99 f5       	brne	.+102    	; 0x5732 <__fpcmp_parts_f+0x88>
    56cc:	81 81       	ldd	r24, Z+1	; 0x01
    56ce:	68 2f       	mov	r22, r24
    56d0:	70 e0       	ldi	r23, 0x00	; 0
    56d2:	61 1b       	sub	r22, r17
    56d4:	71 09       	sbc	r23, r1
    56d6:	3f c0       	rjmp	.+126    	; 0x5756 <__fpcmp_parts_f+0xac>
    56d8:	84 30       	cpi	r24, 0x04	; 4
    56da:	21 f0       	breq	.+8      	; 0x56e4 <__fpcmp_parts_f+0x3a>
    56dc:	92 30       	cpi	r25, 0x02	; 2
    56de:	31 f4       	brne	.+12     	; 0x56ec <__fpcmp_parts_f+0x42>
    56e0:	82 30       	cpi	r24, 0x02	; 2
    56e2:	b9 f1       	breq	.+110    	; 0x5752 <__fpcmp_parts_f+0xa8>
    56e4:	81 81       	ldd	r24, Z+1	; 0x01
    56e6:	88 23       	and	r24, r24
    56e8:	89 f1       	breq	.+98     	; 0x574c <__fpcmp_parts_f+0xa2>
    56ea:	2d c0       	rjmp	.+90     	; 0x5746 <__fpcmp_parts_f+0x9c>
    56ec:	11 96       	adiw	r26, 0x01	; 1
    56ee:	1c 91       	ld	r17, X
    56f0:	11 97       	sbiw	r26, 0x01	; 1
    56f2:	82 30       	cpi	r24, 0x02	; 2
    56f4:	f1 f0       	breq	.+60     	; 0x5732 <__fpcmp_parts_f+0x88>
    56f6:	81 81       	ldd	r24, Z+1	; 0x01
    56f8:	18 17       	cp	r17, r24
    56fa:	d9 f4       	brne	.+54     	; 0x5732 <__fpcmp_parts_f+0x88>
    56fc:	12 96       	adiw	r26, 0x02	; 2
    56fe:	2d 91       	ld	r18, X+
    5700:	3c 91       	ld	r19, X
    5702:	13 97       	sbiw	r26, 0x03	; 3
    5704:	82 81       	ldd	r24, Z+2	; 0x02
    5706:	93 81       	ldd	r25, Z+3	; 0x03
    5708:	82 17       	cp	r24, r18
    570a:	93 07       	cpc	r25, r19
    570c:	94 f0       	brlt	.+36     	; 0x5732 <__fpcmp_parts_f+0x88>
    570e:	28 17       	cp	r18, r24
    5710:	39 07       	cpc	r19, r25
    5712:	bc f0       	brlt	.+46     	; 0x5742 <__fpcmp_parts_f+0x98>
    5714:	14 96       	adiw	r26, 0x04	; 4
    5716:	8d 91       	ld	r24, X+
    5718:	9d 91       	ld	r25, X+
    571a:	0d 90       	ld	r0, X+
    571c:	bc 91       	ld	r27, X
    571e:	a0 2d       	mov	r26, r0
    5720:	24 81       	ldd	r18, Z+4	; 0x04
    5722:	35 81       	ldd	r19, Z+5	; 0x05
    5724:	46 81       	ldd	r20, Z+6	; 0x06
    5726:	57 81       	ldd	r21, Z+7	; 0x07
    5728:	28 17       	cp	r18, r24
    572a:	39 07       	cpc	r19, r25
    572c:	4a 07       	cpc	r20, r26
    572e:	5b 07       	cpc	r21, r27
    5730:	18 f4       	brcc	.+6      	; 0x5738 <__fpcmp_parts_f+0x8e>
    5732:	11 23       	and	r17, r17
    5734:	41 f0       	breq	.+16     	; 0x5746 <__fpcmp_parts_f+0x9c>
    5736:	0a c0       	rjmp	.+20     	; 0x574c <__fpcmp_parts_f+0xa2>
    5738:	82 17       	cp	r24, r18
    573a:	93 07       	cpc	r25, r19
    573c:	a4 07       	cpc	r26, r20
    573e:	b5 07       	cpc	r27, r21
    5740:	40 f4       	brcc	.+16     	; 0x5752 <__fpcmp_parts_f+0xa8>
    5742:	11 23       	and	r17, r17
    5744:	19 f0       	breq	.+6      	; 0x574c <__fpcmp_parts_f+0xa2>
    5746:	61 e0       	ldi	r22, 0x01	; 1
    5748:	70 e0       	ldi	r23, 0x00	; 0
    574a:	05 c0       	rjmp	.+10     	; 0x5756 <__fpcmp_parts_f+0xac>
    574c:	6f ef       	ldi	r22, 0xFF	; 255
    574e:	7f ef       	ldi	r23, 0xFF	; 255
    5750:	02 c0       	rjmp	.+4      	; 0x5756 <__fpcmp_parts_f+0xac>
    5752:	60 e0       	ldi	r22, 0x00	; 0
    5754:	70 e0       	ldi	r23, 0x00	; 0
    5756:	cb 01       	movw	r24, r22
    5758:	1f 91       	pop	r17
    575a:	08 95       	ret

0000575c <strlen>:
    575c:	fc 01       	movw	r30, r24
    575e:	01 90       	ld	r0, Z+
    5760:	00 20       	and	r0, r0
    5762:	e9 f7       	brne	.-6      	; 0x575e <strlen+0x2>
    5764:	80 95       	com	r24
    5766:	90 95       	com	r25
    5768:	8e 0f       	add	r24, r30
    576a:	9f 1f       	adc	r25, r31
    576c:	08 95       	ret

0000576e <__udivmodhi4>:
    576e:	aa 1b       	sub	r26, r26
    5770:	bb 1b       	sub	r27, r27
    5772:	51 e1       	ldi	r21, 0x11	; 17
    5774:	07 c0       	rjmp	.+14     	; 0x5784 <__udivmodhi4_ep>

00005776 <__udivmodhi4_loop>:
    5776:	aa 1f       	adc	r26, r26
    5778:	bb 1f       	adc	r27, r27
    577a:	a6 17       	cp	r26, r22
    577c:	b7 07       	cpc	r27, r23
    577e:	10 f0       	brcs	.+4      	; 0x5784 <__udivmodhi4_ep>
    5780:	a6 1b       	sub	r26, r22
    5782:	b7 0b       	sbc	r27, r23

00005784 <__udivmodhi4_ep>:
    5784:	88 1f       	adc	r24, r24
    5786:	99 1f       	adc	r25, r25
    5788:	5a 95       	dec	r21
    578a:	a9 f7       	brne	.-22     	; 0x5776 <__udivmodhi4_loop>
    578c:	80 95       	com	r24
    578e:	90 95       	com	r25
    5790:	bc 01       	movw	r22, r24
    5792:	cd 01       	movw	r24, r26
    5794:	08 95       	ret

00005796 <__divmodhi4>:
    5796:	97 fb       	bst	r25, 7
    5798:	09 2e       	mov	r0, r25
    579a:	07 26       	eor	r0, r23
    579c:	0a d0       	rcall	.+20     	; 0x57b2 <__divmodhi4_neg1>
    579e:	77 fd       	sbrc	r23, 7
    57a0:	04 d0       	rcall	.+8      	; 0x57aa <__divmodhi4_neg2>
    57a2:	e5 df       	rcall	.-54     	; 0x576e <__udivmodhi4>
    57a4:	06 d0       	rcall	.+12     	; 0x57b2 <__divmodhi4_neg1>
    57a6:	00 20       	and	r0, r0
    57a8:	1a f4       	brpl	.+6      	; 0x57b0 <__divmodhi4_exit>

000057aa <__divmodhi4_neg2>:
    57aa:	70 95       	com	r23
    57ac:	61 95       	neg	r22
    57ae:	7f 4f       	sbci	r23, 0xFF	; 255

000057b0 <__divmodhi4_exit>:
    57b0:	08 95       	ret

000057b2 <__divmodhi4_neg1>:
    57b2:	f6 f7       	brtc	.-4      	; 0x57b0 <__divmodhi4_exit>
    57b4:	90 95       	com	r25
    57b6:	81 95       	neg	r24
    57b8:	9f 4f       	sbci	r25, 0xFF	; 255
    57ba:	08 95       	ret

000057bc <__prologue_saves__>:
    57bc:	2f 92       	push	r2
    57be:	3f 92       	push	r3
    57c0:	4f 92       	push	r4
    57c2:	5f 92       	push	r5
    57c4:	6f 92       	push	r6
    57c6:	7f 92       	push	r7
    57c8:	8f 92       	push	r8
    57ca:	9f 92       	push	r9
    57cc:	af 92       	push	r10
    57ce:	bf 92       	push	r11
    57d0:	cf 92       	push	r12
    57d2:	df 92       	push	r13
    57d4:	ef 92       	push	r14
    57d6:	ff 92       	push	r15
    57d8:	0f 93       	push	r16
    57da:	1f 93       	push	r17
    57dc:	cf 93       	push	r28
    57de:	df 93       	push	r29
    57e0:	cd b7       	in	r28, 0x3d	; 61
    57e2:	de b7       	in	r29, 0x3e	; 62
    57e4:	ca 1b       	sub	r28, r26
    57e6:	db 0b       	sbc	r29, r27
    57e8:	0f b6       	in	r0, 0x3f	; 63
    57ea:	f8 94       	cli
    57ec:	de bf       	out	0x3e, r29	; 62
    57ee:	0f be       	out	0x3f, r0	; 63
    57f0:	cd bf       	out	0x3d, r28	; 61
    57f2:	19 94       	eijmp

000057f4 <__epilogue_restores__>:
    57f4:	2a 88       	ldd	r2, Y+18	; 0x12
    57f6:	39 88       	ldd	r3, Y+17	; 0x11
    57f8:	48 88       	ldd	r4, Y+16	; 0x10
    57fa:	5f 84       	ldd	r5, Y+15	; 0x0f
    57fc:	6e 84       	ldd	r6, Y+14	; 0x0e
    57fe:	7d 84       	ldd	r7, Y+13	; 0x0d
    5800:	8c 84       	ldd	r8, Y+12	; 0x0c
    5802:	9b 84       	ldd	r9, Y+11	; 0x0b
    5804:	aa 84       	ldd	r10, Y+10	; 0x0a
    5806:	b9 84       	ldd	r11, Y+9	; 0x09
    5808:	c8 84       	ldd	r12, Y+8	; 0x08
    580a:	df 80       	ldd	r13, Y+7	; 0x07
    580c:	ee 80       	ldd	r14, Y+6	; 0x06
    580e:	fd 80       	ldd	r15, Y+5	; 0x05
    5810:	0c 81       	ldd	r16, Y+4	; 0x04
    5812:	1b 81       	ldd	r17, Y+3	; 0x03
    5814:	aa 81       	ldd	r26, Y+2	; 0x02
    5816:	b9 81       	ldd	r27, Y+1	; 0x01
    5818:	ce 0f       	add	r28, r30
    581a:	d1 1d       	adc	r29, r1
    581c:	0f b6       	in	r0, 0x3f	; 63
    581e:	f8 94       	cli
    5820:	de bf       	out	0x3e, r29	; 62
    5822:	0f be       	out	0x3f, r0	; 63
    5824:	cd bf       	out	0x3d, r28	; 61
    5826:	ed 01       	movw	r28, r26
    5828:	08 95       	ret

0000582a <pow>:
    582a:	fa 01       	movw	r30, r20
    582c:	ee 0f       	add	r30, r30
    582e:	ff 1f       	adc	r31, r31
    5830:	30 96       	adiw	r30, 0x00	; 0
    5832:	21 05       	cpc	r18, r1
    5834:	31 05       	cpc	r19, r1
    5836:	99 f1       	breq	.+102    	; 0x589e <pow+0x74>
    5838:	61 15       	cp	r22, r1
    583a:	71 05       	cpc	r23, r1
    583c:	61 f4       	brne	.+24     	; 0x5856 <pow+0x2c>
    583e:	80 38       	cpi	r24, 0x80	; 128
    5840:	bf e3       	ldi	r27, 0x3F	; 63
    5842:	9b 07       	cpc	r25, r27
    5844:	49 f1       	breq	.+82     	; 0x5898 <pow+0x6e>
    5846:	68 94       	set
    5848:	90 38       	cpi	r25, 0x80	; 128
    584a:	81 05       	cpc	r24, r1
    584c:	61 f0       	breq	.+24     	; 0x5866 <pow+0x3c>
    584e:	80 38       	cpi	r24, 0x80	; 128
    5850:	bf ef       	ldi	r27, 0xFF	; 255
    5852:	9b 07       	cpc	r25, r27
    5854:	41 f0       	breq	.+16     	; 0x5866 <pow+0x3c>
    5856:	99 23       	and	r25, r25
    5858:	42 f5       	brpl	.+80     	; 0x58aa <pow+0x80>
    585a:	ff 3f       	cpi	r31, 0xFF	; 255
    585c:	e1 05       	cpc	r30, r1
    585e:	31 05       	cpc	r19, r1
    5860:	21 05       	cpc	r18, r1
    5862:	11 f1       	breq	.+68     	; 0x58a8 <pow+0x7e>
    5864:	e8 94       	clt
    5866:	08 94       	sec
    5868:	e7 95       	ror	r30
    586a:	d9 01       	movw	r26, r18
    586c:	aa 23       	and	r26, r26
    586e:	29 f4       	brne	.+10     	; 0x587a <pow+0x50>
    5870:	ab 2f       	mov	r26, r27
    5872:	be 2f       	mov	r27, r30
    5874:	f8 5f       	subi	r31, 0xF8	; 248
    5876:	d0 f3       	brcs	.-12     	; 0x586c <pow+0x42>
    5878:	10 c0       	rjmp	.+32     	; 0x589a <pow+0x70>
    587a:	ff 5f       	subi	r31, 0xFF	; 255
    587c:	70 f4       	brcc	.+28     	; 0x589a <pow+0x70>
    587e:	a6 95       	lsr	r26
    5880:	e0 f7       	brcc	.-8      	; 0x587a <pow+0x50>
    5882:	f7 39       	cpi	r31, 0x97	; 151
    5884:	50 f0       	brcs	.+20     	; 0x589a <pow+0x70>
    5886:	19 f0       	breq	.+6      	; 0x588e <pow+0x64>
    5888:	ff 3a       	cpi	r31, 0xAF	; 175
    588a:	38 f4       	brcc	.+14     	; 0x589a <pow+0x70>
    588c:	9f 77       	andi	r25, 0x7F	; 127
    588e:	9f 93       	push	r25
    5890:	0c d0       	rcall	.+24     	; 0x58aa <pow+0x80>
    5892:	0f 90       	pop	r0
    5894:	07 fc       	sbrc	r0, 7
    5896:	90 58       	subi	r25, 0x80	; 128
    5898:	08 95       	ret
    589a:	3e f0       	brts	.+14     	; 0x58aa <pow+0x80>
    589c:	49 c0       	rjmp	.+146    	; 0x5930 <__fp_nan>
    589e:	60 e0       	ldi	r22, 0x00	; 0
    58a0:	70 e0       	ldi	r23, 0x00	; 0
    58a2:	80 e8       	ldi	r24, 0x80	; 128
    58a4:	9f e3       	ldi	r25, 0x3F	; 63
    58a6:	08 95       	ret
    58a8:	4f e7       	ldi	r20, 0x7F	; 127
    58aa:	9f 77       	andi	r25, 0x7F	; 127
    58ac:	5f 93       	push	r21
    58ae:	4f 93       	push	r20
    58b0:	3f 93       	push	r19
    58b2:	2f 93       	push	r18
    58b4:	d0 d0       	rcall	.+416    	; 0x5a56 <log>
    58b6:	2f 91       	pop	r18
    58b8:	3f 91       	pop	r19
    58ba:	4f 91       	pop	r20
    58bc:	5f 91       	pop	r21
    58be:	f8 d9       	rcall	.-3088   	; 0x4cb0 <__mulsf3>
    58c0:	05 c0       	rjmp	.+10     	; 0x58cc <exp>
    58c2:	19 f4       	brne	.+6      	; 0x58ca <pow+0xa0>
    58c4:	0e f0       	brts	.+2      	; 0x58c8 <pow+0x9e>
    58c6:	2e c0       	rjmp	.+92     	; 0x5924 <__fp_inf>
    58c8:	7d c0       	rjmp	.+250    	; 0x59c4 <__fp_zero>
    58ca:	32 c0       	rjmp	.+100    	; 0x5930 <__fp_nan>

000058cc <exp>:
    58cc:	61 d0       	rcall	.+194    	; 0x5990 <__fp_splitA>
    58ce:	c8 f3       	brcs	.-14     	; 0x58c2 <pow+0x98>
    58d0:	96 38       	cpi	r25, 0x86	; 134
    58d2:	c0 f7       	brcc	.-16     	; 0x58c4 <pow+0x9a>
    58d4:	07 f8       	bld	r0, 7
    58d6:	0f 92       	push	r0
    58d8:	e8 94       	clt
    58da:	2b e3       	ldi	r18, 0x3B	; 59
    58dc:	3a ea       	ldi	r19, 0xAA	; 170
    58de:	48 eb       	ldi	r20, 0xB8	; 184
    58e0:	5f e7       	ldi	r21, 0x7F	; 127
    58e2:	38 d1       	rcall	.+624    	; 0x5b54 <__mulsf3_pse>
    58e4:	0f 92       	push	r0
    58e6:	0f 92       	push	r0
    58e8:	0f 92       	push	r0
    58ea:	4d b7       	in	r20, 0x3d	; 61
    58ec:	5e b7       	in	r21, 0x3e	; 62
    58ee:	0f 92       	push	r0
    58f0:	f2 d0       	rcall	.+484    	; 0x5ad6 <modf>
    58f2:	e4 ee       	ldi	r30, 0xE4	; 228
    58f4:	f0 e0       	ldi	r31, 0x00	; 0
    58f6:	1f d0       	rcall	.+62     	; 0x5936 <__fp_powser>
    58f8:	4f 91       	pop	r20
    58fa:	5f 91       	pop	r21
    58fc:	ef 91       	pop	r30
    58fe:	ff 91       	pop	r31
    5900:	e5 95       	asr	r30
    5902:	ee 1f       	adc	r30, r30
    5904:	ff 1f       	adc	r31, r31
    5906:	49 f0       	breq	.+18     	; 0x591a <exp+0x4e>
    5908:	fe 57       	subi	r31, 0x7E	; 126
    590a:	e0 68       	ori	r30, 0x80	; 128
    590c:	44 27       	eor	r20, r20
    590e:	ee 0f       	add	r30, r30
    5910:	44 1f       	adc	r20, r20
    5912:	fa 95       	dec	r31
    5914:	e1 f7       	brne	.-8      	; 0x590e <exp+0x42>
    5916:	41 95       	neg	r20
    5918:	55 0b       	sbc	r21, r21
    591a:	64 d0       	rcall	.+200    	; 0x59e4 <ldexp>
    591c:	0f 90       	pop	r0
    591e:	07 fe       	sbrs	r0, 7
    5920:	58 c0       	rjmp	.+176    	; 0x59d2 <inverse>
    5922:	08 95       	ret

00005924 <__fp_inf>:
    5924:	97 f9       	bld	r25, 7
    5926:	9f 67       	ori	r25, 0x7F	; 127
    5928:	80 e8       	ldi	r24, 0x80	; 128
    592a:	70 e0       	ldi	r23, 0x00	; 0
    592c:	60 e0       	ldi	r22, 0x00	; 0
    592e:	08 95       	ret

00005930 <__fp_nan>:
    5930:	9f ef       	ldi	r25, 0xFF	; 255
    5932:	80 ec       	ldi	r24, 0xC0	; 192
    5934:	08 95       	ret

00005936 <__fp_powser>:
    5936:	df 93       	push	r29
    5938:	cf 93       	push	r28
    593a:	1f 93       	push	r17
    593c:	0f 93       	push	r16
    593e:	ff 92       	push	r15
    5940:	ef 92       	push	r14
    5942:	df 92       	push	r13
    5944:	7b 01       	movw	r14, r22
    5946:	8c 01       	movw	r16, r24
    5948:	68 94       	set
    594a:	05 c0       	rjmp	.+10     	; 0x5956 <__fp_powser+0x20>
    594c:	da 2e       	mov	r13, r26
    594e:	ef 01       	movw	r28, r30
    5950:	ff d0       	rcall	.+510    	; 0x5b50 <__mulsf3x>
    5952:	fe 01       	movw	r30, r28
    5954:	e8 94       	clt
    5956:	a5 91       	lpm	r26, Z+
    5958:	25 91       	lpm	r18, Z+
    595a:	35 91       	lpm	r19, Z+
    595c:	45 91       	lpm	r20, Z+
    595e:	55 91       	lpm	r21, Z+
    5960:	ae f3       	brts	.-22     	; 0x594c <__fp_powser+0x16>
    5962:	ef 01       	movw	r28, r30
    5964:	59 d1       	rcall	.+690    	; 0x5c18 <__addsf3x>
    5966:	fe 01       	movw	r30, r28
    5968:	97 01       	movw	r18, r14
    596a:	a8 01       	movw	r20, r16
    596c:	da 94       	dec	r13
    596e:	79 f7       	brne	.-34     	; 0x594e <__fp_powser+0x18>
    5970:	df 90       	pop	r13
    5972:	ef 90       	pop	r14
    5974:	ff 90       	pop	r15
    5976:	0f 91       	pop	r16
    5978:	1f 91       	pop	r17
    597a:	cf 91       	pop	r28
    597c:	df 91       	pop	r29
    597e:	08 95       	ret

00005980 <__fp_split3>:
    5980:	57 fd       	sbrc	r21, 7
    5982:	90 58       	subi	r25, 0x80	; 128
    5984:	44 0f       	add	r20, r20
    5986:	55 1f       	adc	r21, r21
    5988:	59 f0       	breq	.+22     	; 0x59a0 <__fp_splitA+0x10>
    598a:	5f 3f       	cpi	r21, 0xFF	; 255
    598c:	71 f0       	breq	.+28     	; 0x59aa <__fp_splitA+0x1a>
    598e:	47 95       	ror	r20

00005990 <__fp_splitA>:
    5990:	88 0f       	add	r24, r24
    5992:	97 fb       	bst	r25, 7
    5994:	99 1f       	adc	r25, r25
    5996:	61 f0       	breq	.+24     	; 0x59b0 <__fp_splitA+0x20>
    5998:	9f 3f       	cpi	r25, 0xFF	; 255
    599a:	79 f0       	breq	.+30     	; 0x59ba <__fp_splitA+0x2a>
    599c:	87 95       	ror	r24
    599e:	08 95       	ret
    59a0:	12 16       	cp	r1, r18
    59a2:	13 06       	cpc	r1, r19
    59a4:	14 06       	cpc	r1, r20
    59a6:	55 1f       	adc	r21, r21
    59a8:	f2 cf       	rjmp	.-28     	; 0x598e <__fp_split3+0xe>
    59aa:	46 95       	lsr	r20
    59ac:	f1 df       	rcall	.-30     	; 0x5990 <__fp_splitA>
    59ae:	08 c0       	rjmp	.+16     	; 0x59c0 <__fp_splitA+0x30>
    59b0:	16 16       	cp	r1, r22
    59b2:	17 06       	cpc	r1, r23
    59b4:	18 06       	cpc	r1, r24
    59b6:	99 1f       	adc	r25, r25
    59b8:	f1 cf       	rjmp	.-30     	; 0x599c <__fp_splitA+0xc>
    59ba:	86 95       	lsr	r24
    59bc:	71 05       	cpc	r23, r1
    59be:	61 05       	cpc	r22, r1
    59c0:	08 94       	sec
    59c2:	08 95       	ret

000059c4 <__fp_zero>:
    59c4:	e8 94       	clt

000059c6 <__fp_szero>:
    59c6:	bb 27       	eor	r27, r27
    59c8:	66 27       	eor	r22, r22
    59ca:	77 27       	eor	r23, r23
    59cc:	cb 01       	movw	r24, r22
    59ce:	97 f9       	bld	r25, 7
    59d0:	08 95       	ret

000059d2 <inverse>:
    59d2:	9b 01       	movw	r18, r22
    59d4:	ac 01       	movw	r20, r24
    59d6:	60 e0       	ldi	r22, 0x00	; 0
    59d8:	70 e0       	ldi	r23, 0x00	; 0
    59da:	80 e8       	ldi	r24, 0x80	; 128
    59dc:	9f e3       	ldi	r25, 0x3F	; 63
    59de:	62 ca       	rjmp	.-2876   	; 0x4ea4 <__divsf3>
    59e0:	a1 cf       	rjmp	.-190    	; 0x5924 <__fp_inf>
    59e2:	6d c1       	rjmp	.+730    	; 0x5cbe <__fp_mpack>

000059e4 <ldexp>:
    59e4:	d5 df       	rcall	.-86     	; 0x5990 <__fp_splitA>
    59e6:	e8 f3       	brcs	.-6      	; 0x59e2 <inverse+0x10>
    59e8:	99 23       	and	r25, r25
    59ea:	d9 f3       	breq	.-10     	; 0x59e2 <inverse+0x10>
    59ec:	94 0f       	add	r25, r20
    59ee:	51 1d       	adc	r21, r1
    59f0:	bb f3       	brvs	.-18     	; 0x59e0 <inverse+0xe>
    59f2:	91 50       	subi	r25, 0x01	; 1
    59f4:	50 40       	sbci	r21, 0x00	; 0
    59f6:	94 f0       	brlt	.+36     	; 0x5a1c <ldexp+0x38>
    59f8:	59 f0       	breq	.+22     	; 0x5a10 <ldexp+0x2c>
    59fa:	88 23       	and	r24, r24
    59fc:	32 f0       	brmi	.+12     	; 0x5a0a <ldexp+0x26>
    59fe:	66 0f       	add	r22, r22
    5a00:	77 1f       	adc	r23, r23
    5a02:	88 1f       	adc	r24, r24
    5a04:	91 50       	subi	r25, 0x01	; 1
    5a06:	50 40       	sbci	r21, 0x00	; 0
    5a08:	c1 f7       	brne	.-16     	; 0x59fa <ldexp+0x16>
    5a0a:	9e 3f       	cpi	r25, 0xFE	; 254
    5a0c:	51 05       	cpc	r21, r1
    5a0e:	44 f7       	brge	.-48     	; 0x59e0 <inverse+0xe>
    5a10:	88 0f       	add	r24, r24
    5a12:	91 1d       	adc	r25, r1
    5a14:	96 95       	lsr	r25
    5a16:	87 95       	ror	r24
    5a18:	97 f9       	bld	r25, 7
    5a1a:	08 95       	ret
    5a1c:	5f 3f       	cpi	r21, 0xFF	; 255
    5a1e:	ac f0       	brlt	.+42     	; 0x5a4a <ldexp+0x66>
    5a20:	98 3e       	cpi	r25, 0xE8	; 232
    5a22:	9c f0       	brlt	.+38     	; 0x5a4a <ldexp+0x66>
    5a24:	bb 27       	eor	r27, r27
    5a26:	86 95       	lsr	r24
    5a28:	77 95       	ror	r23
    5a2a:	67 95       	ror	r22
    5a2c:	b7 95       	ror	r27
    5a2e:	08 f4       	brcc	.+2      	; 0x5a32 <ldexp+0x4e>
    5a30:	b1 60       	ori	r27, 0x01	; 1
    5a32:	93 95       	inc	r25
    5a34:	c1 f7       	brne	.-16     	; 0x5a26 <ldexp+0x42>
    5a36:	bb 0f       	add	r27, r27
    5a38:	58 f7       	brcc	.-42     	; 0x5a10 <ldexp+0x2c>
    5a3a:	11 f4       	brne	.+4      	; 0x5a40 <ldexp+0x5c>
    5a3c:	60 ff       	sbrs	r22, 0
    5a3e:	e8 cf       	rjmp	.-48     	; 0x5a10 <ldexp+0x2c>
    5a40:	6f 5f       	subi	r22, 0xFF	; 255
    5a42:	7f 4f       	sbci	r23, 0xFF	; 255
    5a44:	8f 4f       	sbci	r24, 0xFF	; 255
    5a46:	9f 4f       	sbci	r25, 0xFF	; 255
    5a48:	e3 cf       	rjmp	.-58     	; 0x5a10 <ldexp+0x2c>
    5a4a:	bd cf       	rjmp	.-134    	; 0x59c6 <__fp_szero>
    5a4c:	0e f0       	brts	.+2      	; 0x5a50 <ldexp+0x6c>
    5a4e:	37 c1       	rjmp	.+622    	; 0x5cbe <__fp_mpack>
    5a50:	6f cf       	rjmp	.-290    	; 0x5930 <__fp_nan>
    5a52:	68 94       	set
    5a54:	67 cf       	rjmp	.-306    	; 0x5924 <__fp_inf>

00005a56 <log>:
    5a56:	9c df       	rcall	.-200    	; 0x5990 <__fp_splitA>
    5a58:	c8 f3       	brcs	.-14     	; 0x5a4c <ldexp+0x68>
    5a5a:	99 23       	and	r25, r25
    5a5c:	d1 f3       	breq	.-12     	; 0x5a52 <ldexp+0x6e>
    5a5e:	c6 f3       	brts	.-16     	; 0x5a50 <ldexp+0x6c>
    5a60:	df 93       	push	r29
    5a62:	cf 93       	push	r28
    5a64:	1f 93       	push	r17
    5a66:	0f 93       	push	r16
    5a68:	ff 92       	push	r15
    5a6a:	c9 2f       	mov	r28, r25
    5a6c:	dd 27       	eor	r29, r29
    5a6e:	88 23       	and	r24, r24
    5a70:	2a f0       	brmi	.+10     	; 0x5a7c <log+0x26>
    5a72:	21 97       	sbiw	r28, 0x01	; 1
    5a74:	66 0f       	add	r22, r22
    5a76:	77 1f       	adc	r23, r23
    5a78:	88 1f       	adc	r24, r24
    5a7a:	da f7       	brpl	.-10     	; 0x5a72 <log+0x1c>
    5a7c:	20 e0       	ldi	r18, 0x00	; 0
    5a7e:	30 e0       	ldi	r19, 0x00	; 0
    5a80:	40 e8       	ldi	r20, 0x80	; 128
    5a82:	5f eb       	ldi	r21, 0xBF	; 191
    5a84:	9f e3       	ldi	r25, 0x3F	; 63
    5a86:	88 39       	cpi	r24, 0x98	; 152
    5a88:	20 f0       	brcs	.+8      	; 0x5a92 <log+0x3c>
    5a8a:	80 3e       	cpi	r24, 0xE0	; 224
    5a8c:	30 f0       	brcs	.+12     	; 0x5a9a <log+0x44>
    5a8e:	21 96       	adiw	r28, 0x01	; 1
    5a90:	8f 77       	andi	r24, 0x7F	; 127
    5a92:	e1 d8       	rcall	.-3646   	; 0x4c56 <__addsf3>
    5a94:	ec e0       	ldi	r30, 0x0C	; 12
    5a96:	f1 e0       	ldi	r31, 0x01	; 1
    5a98:	03 c0       	rjmp	.+6      	; 0x5aa0 <log+0x4a>
    5a9a:	dd d8       	rcall	.-3654   	; 0x4c56 <__addsf3>
    5a9c:	e9 e3       	ldi	r30, 0x39	; 57
    5a9e:	f1 e0       	ldi	r31, 0x01	; 1
    5aa0:	4a df       	rcall	.-364    	; 0x5936 <__fp_powser>
    5aa2:	8b 01       	movw	r16, r22
    5aa4:	be 01       	movw	r22, r28
    5aa6:	ec 01       	movw	r28, r24
    5aa8:	fb 2e       	mov	r15, r27
    5aaa:	6f 57       	subi	r22, 0x7F	; 127
    5aac:	71 09       	sbc	r23, r1
    5aae:	75 95       	asr	r23
    5ab0:	77 1f       	adc	r23, r23
    5ab2:	88 0b       	sbc	r24, r24
    5ab4:	99 0b       	sbc	r25, r25
    5ab6:	32 db       	rcall	.-2460   	; 0x511c <__floatsisf>
    5ab8:	28 e1       	ldi	r18, 0x18	; 24
    5aba:	32 e7       	ldi	r19, 0x72	; 114
    5abc:	41 e3       	ldi	r20, 0x31	; 49
    5abe:	5f e3       	ldi	r21, 0x3F	; 63
    5ac0:	47 d0       	rcall	.+142    	; 0x5b50 <__mulsf3x>
    5ac2:	af 2d       	mov	r26, r15
    5ac4:	98 01       	movw	r18, r16
    5ac6:	ae 01       	movw	r20, r28
    5ac8:	ff 90       	pop	r15
    5aca:	0f 91       	pop	r16
    5acc:	1f 91       	pop	r17
    5ace:	cf 91       	pop	r28
    5ad0:	df 91       	pop	r29
    5ad2:	a2 d0       	rcall	.+324    	; 0x5c18 <__addsf3x>
    5ad4:	10 c1       	rjmp	.+544    	; 0x5cf6 <__fp_round>

00005ad6 <modf>:
    5ad6:	fa 01       	movw	r30, r20
    5ad8:	dc 01       	movw	r26, r24
    5ada:	aa 0f       	add	r26, r26
    5adc:	bb 1f       	adc	r27, r27
    5ade:	9b 01       	movw	r18, r22
    5ae0:	ac 01       	movw	r20, r24
    5ae2:	bf 57       	subi	r27, 0x7F	; 127
    5ae4:	28 f4       	brcc	.+10     	; 0x5af0 <modf+0x1a>
    5ae6:	22 27       	eor	r18, r18
    5ae8:	33 27       	eor	r19, r19
    5aea:	44 27       	eor	r20, r20
    5aec:	50 78       	andi	r21, 0x80	; 128
    5aee:	1f c0       	rjmp	.+62     	; 0x5b2e <modf+0x58>
    5af0:	b7 51       	subi	r27, 0x17	; 23
    5af2:	88 f4       	brcc	.+34     	; 0x5b16 <modf+0x40>
    5af4:	ab 2f       	mov	r26, r27
    5af6:	00 24       	eor	r0, r0
    5af8:	46 95       	lsr	r20
    5afa:	37 95       	ror	r19
    5afc:	27 95       	ror	r18
    5afe:	01 1c       	adc	r0, r1
    5b00:	a3 95       	inc	r26
    5b02:	d2 f3       	brmi	.-12     	; 0x5af8 <modf+0x22>
    5b04:	00 20       	and	r0, r0
    5b06:	69 f0       	breq	.+26     	; 0x5b22 <modf+0x4c>
    5b08:	22 0f       	add	r18, r18
    5b0a:	33 1f       	adc	r19, r19
    5b0c:	44 1f       	adc	r20, r20
    5b0e:	b3 95       	inc	r27
    5b10:	da f3       	brmi	.-10     	; 0x5b08 <modf+0x32>
    5b12:	0d d0       	rcall	.+26     	; 0x5b2e <modf+0x58>
    5b14:	6f c8       	rjmp	.-3874   	; 0x4bf4 <__subsf3>
    5b16:	61 30       	cpi	r22, 0x01	; 1
    5b18:	71 05       	cpc	r23, r1
    5b1a:	a0 e8       	ldi	r26, 0x80	; 128
    5b1c:	8a 07       	cpc	r24, r26
    5b1e:	b9 46       	sbci	r27, 0x69	; 105
    5b20:	30 f4       	brcc	.+12     	; 0x5b2e <modf+0x58>
    5b22:	9b 01       	movw	r18, r22
    5b24:	ac 01       	movw	r20, r24
    5b26:	66 27       	eor	r22, r22
    5b28:	77 27       	eor	r23, r23
    5b2a:	88 27       	eor	r24, r24
    5b2c:	90 78       	andi	r25, 0x80	; 128
    5b2e:	30 96       	adiw	r30, 0x00	; 0
    5b30:	21 f0       	breq	.+8      	; 0x5b3a <modf+0x64>
    5b32:	20 83       	st	Z, r18
    5b34:	31 83       	std	Z+1, r19	; 0x01
    5b36:	42 83       	std	Z+2, r20	; 0x02
    5b38:	53 83       	std	Z+3, r21	; 0x03
    5b3a:	08 95       	ret
    5b3c:	ce d0       	rcall	.+412    	; 0x5cda <__fp_pscA>
    5b3e:	28 f0       	brcs	.+10     	; 0x5b4a <modf+0x74>
    5b40:	d3 d0       	rcall	.+422    	; 0x5ce8 <__fp_pscB>
    5b42:	18 f0       	brcs	.+6      	; 0x5b4a <modf+0x74>
    5b44:	95 23       	and	r25, r21
    5b46:	09 f0       	breq	.+2      	; 0x5b4a <modf+0x74>
    5b48:	ed ce       	rjmp	.-550    	; 0x5924 <__fp_inf>
    5b4a:	f2 ce       	rjmp	.-540    	; 0x5930 <__fp_nan>
    5b4c:	11 24       	eor	r1, r1
    5b4e:	3b cf       	rjmp	.-394    	; 0x59c6 <__fp_szero>

00005b50 <__mulsf3x>:
    5b50:	17 df       	rcall	.-466    	; 0x5980 <__fp_split3>
    5b52:	a0 f3       	brcs	.-24     	; 0x5b3c <modf+0x66>

00005b54 <__mulsf3_pse>:
    5b54:	95 9f       	mul	r25, r21
    5b56:	d1 f3       	breq	.-12     	; 0x5b4c <modf+0x76>
    5b58:	95 0f       	add	r25, r21
    5b5a:	50 e0       	ldi	r21, 0x00	; 0
    5b5c:	55 1f       	adc	r21, r21
    5b5e:	62 9f       	mul	r22, r18
    5b60:	f0 01       	movw	r30, r0
    5b62:	72 9f       	mul	r23, r18
    5b64:	bb 27       	eor	r27, r27
    5b66:	f0 0d       	add	r31, r0
    5b68:	b1 1d       	adc	r27, r1
    5b6a:	63 9f       	mul	r22, r19
    5b6c:	aa 27       	eor	r26, r26
    5b6e:	f0 0d       	add	r31, r0
    5b70:	b1 1d       	adc	r27, r1
    5b72:	aa 1f       	adc	r26, r26
    5b74:	64 9f       	mul	r22, r20
    5b76:	66 27       	eor	r22, r22
    5b78:	b0 0d       	add	r27, r0
    5b7a:	a1 1d       	adc	r26, r1
    5b7c:	66 1f       	adc	r22, r22
    5b7e:	82 9f       	mul	r24, r18
    5b80:	22 27       	eor	r18, r18
    5b82:	b0 0d       	add	r27, r0
    5b84:	a1 1d       	adc	r26, r1
    5b86:	62 1f       	adc	r22, r18
    5b88:	73 9f       	mul	r23, r19
    5b8a:	b0 0d       	add	r27, r0
    5b8c:	a1 1d       	adc	r26, r1
    5b8e:	62 1f       	adc	r22, r18
    5b90:	83 9f       	mul	r24, r19
    5b92:	a0 0d       	add	r26, r0
    5b94:	61 1d       	adc	r22, r1
    5b96:	22 1f       	adc	r18, r18
    5b98:	74 9f       	mul	r23, r20
    5b9a:	33 27       	eor	r19, r19
    5b9c:	a0 0d       	add	r26, r0
    5b9e:	61 1d       	adc	r22, r1
    5ba0:	23 1f       	adc	r18, r19
    5ba2:	84 9f       	mul	r24, r20
    5ba4:	60 0d       	add	r22, r0
    5ba6:	21 1d       	adc	r18, r1
    5ba8:	82 2f       	mov	r24, r18
    5baa:	76 2f       	mov	r23, r22
    5bac:	6a 2f       	mov	r22, r26
    5bae:	11 24       	eor	r1, r1
    5bb0:	9f 57       	subi	r25, 0x7F	; 127
    5bb2:	50 40       	sbci	r21, 0x00	; 0
    5bb4:	8a f0       	brmi	.+34     	; 0x5bd8 <__mulsf3_pse+0x84>
    5bb6:	e1 f0       	breq	.+56     	; 0x5bf0 <__mulsf3_pse+0x9c>
    5bb8:	88 23       	and	r24, r24
    5bba:	4a f0       	brmi	.+18     	; 0x5bce <__mulsf3_pse+0x7a>
    5bbc:	ee 0f       	add	r30, r30
    5bbe:	ff 1f       	adc	r31, r31
    5bc0:	bb 1f       	adc	r27, r27
    5bc2:	66 1f       	adc	r22, r22
    5bc4:	77 1f       	adc	r23, r23
    5bc6:	88 1f       	adc	r24, r24
    5bc8:	91 50       	subi	r25, 0x01	; 1
    5bca:	50 40       	sbci	r21, 0x00	; 0
    5bcc:	a9 f7       	brne	.-22     	; 0x5bb8 <__mulsf3_pse+0x64>
    5bce:	9e 3f       	cpi	r25, 0xFE	; 254
    5bd0:	51 05       	cpc	r21, r1
    5bd2:	70 f0       	brcs	.+28     	; 0x5bf0 <__mulsf3_pse+0x9c>
    5bd4:	a7 ce       	rjmp	.-690    	; 0x5924 <__fp_inf>
    5bd6:	f7 ce       	rjmp	.-530    	; 0x59c6 <__fp_szero>
    5bd8:	5f 3f       	cpi	r21, 0xFF	; 255
    5bda:	ec f3       	brlt	.-6      	; 0x5bd6 <__mulsf3_pse+0x82>
    5bdc:	98 3e       	cpi	r25, 0xE8	; 232
    5bde:	dc f3       	brlt	.-10     	; 0x5bd6 <__mulsf3_pse+0x82>
    5be0:	86 95       	lsr	r24
    5be2:	77 95       	ror	r23
    5be4:	67 95       	ror	r22
    5be6:	b7 95       	ror	r27
    5be8:	f7 95       	ror	r31
    5bea:	e7 95       	ror	r30
    5bec:	9f 5f       	subi	r25, 0xFF	; 255
    5bee:	c1 f7       	brne	.-16     	; 0x5be0 <__mulsf3_pse+0x8c>
    5bf0:	fe 2b       	or	r31, r30
    5bf2:	88 0f       	add	r24, r24
    5bf4:	91 1d       	adc	r25, r1
    5bf6:	96 95       	lsr	r25
    5bf8:	87 95       	ror	r24
    5bfa:	97 f9       	bld	r25, 7
    5bfc:	08 95       	ret
    5bfe:	6d d0       	rcall	.+218    	; 0x5cda <__fp_pscA>
    5c00:	30 f0       	brcs	.+12     	; 0x5c0e <__mulsf3_pse+0xba>
    5c02:	72 d0       	rcall	.+228    	; 0x5ce8 <__fp_pscB>
    5c04:	20 f0       	brcs	.+8      	; 0x5c0e <__mulsf3_pse+0xba>
    5c06:	31 f4       	brne	.+12     	; 0x5c14 <__mulsf3_pse+0xc0>
    5c08:	9f 3f       	cpi	r25, 0xFF	; 255
    5c0a:	11 f4       	brne	.+4      	; 0x5c10 <__mulsf3_pse+0xbc>
    5c0c:	1e f4       	brtc	.+6      	; 0x5c14 <__mulsf3_pse+0xc0>
    5c0e:	90 ce       	rjmp	.-736    	; 0x5930 <__fp_nan>
    5c10:	0e f4       	brtc	.+2      	; 0x5c14 <__mulsf3_pse+0xc0>
    5c12:	e0 95       	com	r30
    5c14:	e7 fb       	bst	r30, 7
    5c16:	86 ce       	rjmp	.-756    	; 0x5924 <__fp_inf>

00005c18 <__addsf3x>:
    5c18:	e9 2f       	mov	r30, r25
    5c1a:	b2 de       	rcall	.-668    	; 0x5980 <__fp_split3>
    5c1c:	80 f3       	brcs	.-32     	; 0x5bfe <__mulsf3_pse+0xaa>
    5c1e:	ba 17       	cp	r27, r26
    5c20:	62 07       	cpc	r22, r18
    5c22:	73 07       	cpc	r23, r19
    5c24:	84 07       	cpc	r24, r20
    5c26:	95 07       	cpc	r25, r21
    5c28:	18 f0       	brcs	.+6      	; 0x5c30 <__addsf3x+0x18>
    5c2a:	71 f4       	brne	.+28     	; 0x5c48 <__addsf3x+0x30>
    5c2c:	9e f5       	brtc	.+102    	; 0x5c94 <__addsf3x+0x7c>
    5c2e:	ca ce       	rjmp	.-620    	; 0x59c4 <__fp_zero>
    5c30:	0e f4       	brtc	.+2      	; 0x5c34 <__addsf3x+0x1c>
    5c32:	e0 95       	com	r30
    5c34:	0b 2e       	mov	r0, r27
    5c36:	ba 2f       	mov	r27, r26
    5c38:	a0 2d       	mov	r26, r0
    5c3a:	0b 01       	movw	r0, r22
    5c3c:	b9 01       	movw	r22, r18
    5c3e:	90 01       	movw	r18, r0
    5c40:	0c 01       	movw	r0, r24
    5c42:	ca 01       	movw	r24, r20
    5c44:	a0 01       	movw	r20, r0
    5c46:	11 24       	eor	r1, r1
    5c48:	ff 27       	eor	r31, r31
    5c4a:	59 1b       	sub	r21, r25
    5c4c:	99 f0       	breq	.+38     	; 0x5c74 <__addsf3x+0x5c>
    5c4e:	59 3f       	cpi	r21, 0xF9	; 249
    5c50:	50 f4       	brcc	.+20     	; 0x5c66 <__addsf3x+0x4e>
    5c52:	50 3e       	cpi	r21, 0xE0	; 224
    5c54:	68 f1       	brcs	.+90     	; 0x5cb0 <__addsf3x+0x98>
    5c56:	1a 16       	cp	r1, r26
    5c58:	f0 40       	sbci	r31, 0x00	; 0
    5c5a:	a2 2f       	mov	r26, r18
    5c5c:	23 2f       	mov	r18, r19
    5c5e:	34 2f       	mov	r19, r20
    5c60:	44 27       	eor	r20, r20
    5c62:	58 5f       	subi	r21, 0xF8	; 248
    5c64:	f3 cf       	rjmp	.-26     	; 0x5c4c <__addsf3x+0x34>
    5c66:	46 95       	lsr	r20
    5c68:	37 95       	ror	r19
    5c6a:	27 95       	ror	r18
    5c6c:	a7 95       	ror	r26
    5c6e:	f0 40       	sbci	r31, 0x00	; 0
    5c70:	53 95       	inc	r21
    5c72:	c9 f7       	brne	.-14     	; 0x5c66 <__addsf3x+0x4e>
    5c74:	7e f4       	brtc	.+30     	; 0x5c94 <__addsf3x+0x7c>
    5c76:	1f 16       	cp	r1, r31
    5c78:	ba 0b       	sbc	r27, r26
    5c7a:	62 0b       	sbc	r22, r18
    5c7c:	73 0b       	sbc	r23, r19
    5c7e:	84 0b       	sbc	r24, r20
    5c80:	ba f0       	brmi	.+46     	; 0x5cb0 <__addsf3x+0x98>
    5c82:	91 50       	subi	r25, 0x01	; 1
    5c84:	a1 f0       	breq	.+40     	; 0x5cae <__addsf3x+0x96>
    5c86:	ff 0f       	add	r31, r31
    5c88:	bb 1f       	adc	r27, r27
    5c8a:	66 1f       	adc	r22, r22
    5c8c:	77 1f       	adc	r23, r23
    5c8e:	88 1f       	adc	r24, r24
    5c90:	c2 f7       	brpl	.-16     	; 0x5c82 <__addsf3x+0x6a>
    5c92:	0e c0       	rjmp	.+28     	; 0x5cb0 <__addsf3x+0x98>
    5c94:	ba 0f       	add	r27, r26
    5c96:	62 1f       	adc	r22, r18
    5c98:	73 1f       	adc	r23, r19
    5c9a:	84 1f       	adc	r24, r20
    5c9c:	48 f4       	brcc	.+18     	; 0x5cb0 <__addsf3x+0x98>
    5c9e:	87 95       	ror	r24
    5ca0:	77 95       	ror	r23
    5ca2:	67 95       	ror	r22
    5ca4:	b7 95       	ror	r27
    5ca6:	f7 95       	ror	r31
    5ca8:	9e 3f       	cpi	r25, 0xFE	; 254
    5caa:	08 f0       	brcs	.+2      	; 0x5cae <__addsf3x+0x96>
    5cac:	b3 cf       	rjmp	.-154    	; 0x5c14 <__mulsf3_pse+0xc0>
    5cae:	93 95       	inc	r25
    5cb0:	88 0f       	add	r24, r24
    5cb2:	08 f0       	brcs	.+2      	; 0x5cb6 <__addsf3x+0x9e>
    5cb4:	99 27       	eor	r25, r25
    5cb6:	ee 0f       	add	r30, r30
    5cb8:	97 95       	ror	r25
    5cba:	87 95       	ror	r24
    5cbc:	08 95       	ret

00005cbe <__fp_mpack>:
    5cbe:	9f 3f       	cpi	r25, 0xFF	; 255
    5cc0:	31 f0       	breq	.+12     	; 0x5cce <__fp_mpack_finite+0xc>

00005cc2 <__fp_mpack_finite>:
    5cc2:	91 50       	subi	r25, 0x01	; 1
    5cc4:	20 f4       	brcc	.+8      	; 0x5cce <__fp_mpack_finite+0xc>
    5cc6:	87 95       	ror	r24
    5cc8:	77 95       	ror	r23
    5cca:	67 95       	ror	r22
    5ccc:	b7 95       	ror	r27
    5cce:	88 0f       	add	r24, r24
    5cd0:	91 1d       	adc	r25, r1
    5cd2:	96 95       	lsr	r25
    5cd4:	87 95       	ror	r24
    5cd6:	97 f9       	bld	r25, 7
    5cd8:	08 95       	ret

00005cda <__fp_pscA>:
    5cda:	00 24       	eor	r0, r0
    5cdc:	0a 94       	dec	r0
    5cde:	16 16       	cp	r1, r22
    5ce0:	17 06       	cpc	r1, r23
    5ce2:	18 06       	cpc	r1, r24
    5ce4:	09 06       	cpc	r0, r25
    5ce6:	08 95       	ret

00005ce8 <__fp_pscB>:
    5ce8:	00 24       	eor	r0, r0
    5cea:	0a 94       	dec	r0
    5cec:	12 16       	cp	r1, r18
    5cee:	13 06       	cpc	r1, r19
    5cf0:	14 06       	cpc	r1, r20
    5cf2:	05 06       	cpc	r0, r21
    5cf4:	08 95       	ret

00005cf6 <__fp_round>:
    5cf6:	09 2e       	mov	r0, r25
    5cf8:	03 94       	inc	r0
    5cfa:	00 0c       	add	r0, r0
    5cfc:	11 f4       	brne	.+4      	; 0x5d02 <__fp_round+0xc>
    5cfe:	88 23       	and	r24, r24
    5d00:	52 f0       	brmi	.+20     	; 0x5d16 <__fp_round+0x20>
    5d02:	bb 0f       	add	r27, r27
    5d04:	40 f4       	brcc	.+16     	; 0x5d16 <__fp_round+0x20>
    5d06:	bf 2b       	or	r27, r31
    5d08:	11 f4       	brne	.+4      	; 0x5d0e <__fp_round+0x18>
    5d0a:	60 ff       	sbrs	r22, 0
    5d0c:	04 c0       	rjmp	.+8      	; 0x5d16 <__fp_round+0x20>
    5d0e:	6f 5f       	subi	r22, 0xFF	; 255
    5d10:	7f 4f       	sbci	r23, 0xFF	; 255
    5d12:	8f 4f       	sbci	r24, 0xFF	; 255
    5d14:	9f 4f       	sbci	r25, 0xFF	; 255
    5d16:	08 95       	ret

00005d18 <_exit>:
    5d18:	f8 94       	cli

00005d1a <__stop_program>:
    5d1a:	ff cf       	rjmp	.-2      	; 0x5d1a <__stop_program>
